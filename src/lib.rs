/* automatically generated by rust-bindgen 0.69.4 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
#[repr(C)]
pub struct __BindgenUnionField<T>(::std::marker::PhantomData<T>);
impl<T> __BindgenUnionField<T> {
    #[inline]
    pub const fn new() -> Self {
        __BindgenUnionField(::std::marker::PhantomData)
    }
    #[inline]
    pub unsafe fn as_ref(&self) -> &T {
        ::std::mem::transmute(self)
    }
    #[inline]
    pub unsafe fn as_mut(&mut self) -> &mut T {
        ::std::mem::transmute(self)
    }
}
impl<T> ::std::default::Default for __BindgenUnionField<T> {
    #[inline]
    fn default() -> Self {
        Self::new()
    }
}
impl<T> ::std::clone::Clone for __BindgenUnionField<T> {
    #[inline]
    fn clone(&self) -> Self {
        *self
    }
}
impl<T> ::std::marker::Copy for __BindgenUnionField<T> {}
impl<T> ::std::fmt::Debug for __BindgenUnionField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__BindgenUnionField")
    }
}
impl<T> ::std::hash::Hash for __BindgenUnionField<T> {
    fn hash<H: ::std::hash::Hasher>(&self, _state: &mut H) {}
}
impl<T> ::std::cmp::PartialEq for __BindgenUnionField<T> {
    fn eq(&self, _other: &__BindgenUnionField<T>) -> bool {
        true
    }
}
impl<T> ::std::cmp::Eq for __BindgenUnionField<T> {}
pub const _LIBCPP_ABI_VERSION: u32 = 1;
pub const _LIBCPP_ENABLE_ASSERTIONS_DEFAULT: u32 = 0;
pub const _LIBCPP_ENABLE_HARDENED_MODE_DEFAULT: u32 = 0;
pub const _LIBCPP_ENABLE_DEBUG_MODE_DEFAULT: u32 = 0;
pub const _LIBCPP_VERSION: u32 = 170006;
pub const _LIBCPP_STD_VER: u32 = 14;
pub const _LIBCPP_OBJECT_FORMAT_MACHO: u32 = 1;
pub const _LIBCPP_ENABLE_ASSERTIONS: u32 = 0;
pub const _LIBCPP_ENABLE_HARDENED_MODE: u32 = 0;
pub const _LIBCPP_ENABLE_DEBUG_MODE: u32 = 0;
pub const _LIBCPP_LOCALE__L_EXTENSIONS: u32 = 1;
pub const SWIFT_COMPILER_IS_MSVC: u32 = 0;
pub const SWIFT_BUG_REPORT_URL: &[u8; 47] = b"https://swift.org/contributing/#reporting-bugs\0";
pub const SWIFT_BUG_REPORT_MESSAGE_BASE: &[u8; 69] =
    b"submit a bug report (https://swift.org/contributing/#reporting-bugs)\0";
pub const SWIFT_BUG_REPORT_MESSAGE: &[u8; 76] =
    b"please submit a bug report (https://swift.org/contributing/#reporting-bugs)\0";
pub const SWIFT_CRASH_BUG_REPORT_MESSAGE : & [u8 ; 109] = b"Please submit a bug report (https://swift.org/contributing/#reporting-bugs) and include the crash backtrace.\0" ;
pub const SWIFT_POINTER_IS_8_BYTES: u32 = 1;
pub const SWIFT_POINTER_IS_4_BYTES: u32 = 0;
pub const SWIFT_OBJC_INTEROP: u32 = 1;
pub const SWIFT_HAS_ISA_MASKING: u32 = 1;
pub const SWIFT_HAS_OPAQUE_ISAS: u32 = 0;
pub const SWIFT_STDLIB_HAS_MALLOC_TYPE: u32 = 0;
pub const SWIFT_CLASS_IS_SWIFT_MASK: u32 = 2;
pub const SWIFT_IMAGE_EXPORTS_swiftCore: u32 = 0;
pub const SWIFT_IMAGE_EXPORTS_swift_Concurrency: u32 = 0;
pub const SWIFT_IMAGE_EXPORTS_swiftDistributed: u32 = 0;
pub const SWIFT_IMAGE_EXPORTS_swift_Differentiation: u32 = 0;
pub const SWIFT_COMPACT_ABSOLUTE_FUNCTION_POINTER: u32 = 0;
pub const SWIFT_PTRAUTH: u32 = 0;
pub const DYNAMIC_TARGETS_ENABLED: u32 = 0;
pub const TARGET_OS_MAC: u32 = 1;
pub const TARGET_OS_OSX: u32 = 1;
pub const TARGET_OS_IPHONE: u32 = 0;
pub const TARGET_OS_IOS: u32 = 0;
pub const TARGET_OS_WATCH: u32 = 0;
pub const TARGET_OS_TV: u32 = 0;
pub const TARGET_OS_MACCATALYST: u32 = 0;
pub const TARGET_OS_UIKITFORMAC: u32 = 0;
pub const TARGET_OS_SIMULATOR: u32 = 0;
pub const TARGET_OS_EMBEDDED: u32 = 0;
pub const TARGET_OS_UNIX: u32 = 0;
pub const TARGET_OS_RTKIT: u32 = 0;
pub const TARGET_RT_LITTLE_ENDIAN: u32 = 1;
pub const TARGET_RT_BIG_ENDIAN: u32 = 0;
pub const TARGET_RT_64_BIT: u32 = 1;
pub const TARGET_RT_MAC_CFM: u32 = 0;
pub const TARGET_RT_MAC_MACHO: u32 = 1;
pub const TARGET_CPU_ARM64: u32 = 1;
pub const TARGET_OS_VISION: u32 = 0;
pub const TARGET_OS_DRIVERKIT: u32 = 0;
pub const TARGET_OS_WIN32: u32 = 0;
pub const TARGET_OS_WINDOWS: u32 = 0;
pub const TARGET_OS_LINUX: u32 = 0;
pub const TARGET_CPU_PPC: u32 = 0;
pub const TARGET_CPU_PPC64: u32 = 0;
pub const TARGET_CPU_68K: u32 = 0;
pub const TARGET_CPU_X86: u32 = 0;
pub const TARGET_CPU_X86_64: u32 = 0;
pub const TARGET_CPU_ARM: u32 = 0;
pub const TARGET_CPU_MIPS: u32 = 0;
pub const TARGET_CPU_SPARC: u32 = 0;
pub const TARGET_CPU_ALPHA: u32 = 0;
pub const TARGET_IPHONE_SIMULATOR: u32 = 0;
pub const TARGET_OS_NANO: u32 = 0;
pub const SWIFT_BACKTRACE_ON_CRASH_SUPPORTED: u32 = 1;
pub const SWIFT_BACKTRACE_SECTION: &[u8; 24] = b"__DATA,swift5_backtrace\0";
pub const SWIFT_PAGE_SIZE: u32 = 16384;
pub const __cpp_lib_chrono_udls: u32 = 201304;
pub const __cpp_lib_complex_udls: u32 = 201309;
pub const __cpp_lib_exchange_function: u32 = 201304;
pub const __cpp_lib_generic_associative_lookup: u32 = 201304;
pub const __cpp_lib_integer_sequence: u32 = 201304;
pub const __cpp_lib_integral_constant_callable: u32 = 201304;
pub const __cpp_lib_is_final: u32 = 201402;
pub const __cpp_lib_is_null_pointer: u32 = 201309;
pub const __cpp_lib_make_reverse_iterator: u32 = 201402;
pub const __cpp_lib_make_unique: u32 = 201304;
pub const __cpp_lib_null_iterators: u32 = 201304;
pub const __cpp_lib_quoted_string_io: u32 = 201304;
pub const __cpp_lib_result_of_sfinae: u32 = 201210;
pub const __cpp_lib_robust_nonmodifying_seq_ops: u32 = 201304;
pub const __cpp_lib_shared_timed_mutex: u32 = 201402;
pub const __cpp_lib_string_udls: u32 = 201304;
pub const __cpp_lib_transformation_trait_aliases: u32 = 201304;
pub const __cpp_lib_transparent_operators: u32 = 201210;
pub const __cpp_lib_tuple_element_t: u32 = 201402;
pub const __cpp_lib_tuples_by_type: u32 = 201304;
pub const __WORDSIZE: u32 = 64;
pub const __has_safe_buffers: u32 = 1;
pub const __DARWIN_ONLY_64_BIT_INO_T: u32 = 1;
pub const __DARWIN_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const __DARWIN_ONLY_VERS_1050: u32 = 1;
pub const __DARWIN_UNIX03: u32 = 1;
pub const __DARWIN_64_BIT_INO_T: u32 = 1;
pub const __DARWIN_VERS_1050: u32 = 1;
pub const __DARWIN_NON_CANCELABLE: u32 = 0;
pub const __DARWIN_SUF_EXTSN: &[u8; 14] = b"$DARWIN_EXTSN\0";
pub const __DARWIN_C_ANSI: u32 = 4096;
pub const __DARWIN_C_FULL: u32 = 900000;
pub const __DARWIN_C_LEVEL: u32 = 900000;
pub const __DARWIN_NO_LONG_LONG: u32 = 0;
pub const _DARWIN_FEATURE_64_BIT_INODE: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_64_BIT_INODE: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_VERS_1050: u32 = 1;
pub const _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE: u32 = 1;
pub const _DARWIN_FEATURE_UNIX_CONFORMANCE: u32 = 3;
pub const __has_ptrcheck: u32 = 0;
pub const __PTHREAD_SIZE__: u32 = 8176;
pub const __PTHREAD_ATTR_SIZE__: u32 = 56;
pub const __PTHREAD_MUTEXATTR_SIZE__: u32 = 8;
pub const __PTHREAD_MUTEX_SIZE__: u32 = 56;
pub const __PTHREAD_CONDATTR_SIZE__: u32 = 8;
pub const __PTHREAD_COND_SIZE__: u32 = 40;
pub const __PTHREAD_ONCE_SIZE__: u32 = 8;
pub const __PTHREAD_RWLOCK_SIZE__: u32 = 192;
pub const __PTHREAD_RWLOCKATTR_SIZE__: u32 = 16;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const INT64_MAX: u64 = 9223372036854775807;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT64_MIN: i64 = -9223372036854775808;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const UINT64_MAX: i32 = -1;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST64_MIN: i64 = -9223372036854775808;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const INT_LEAST64_MAX: u64 = 9223372036854775807;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const UINT_LEAST64_MAX: i32 = -1;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i32 = -32768;
pub const INT_FAST32_MIN: i32 = -2147483648;
pub const INT_FAST64_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u32 = 32767;
pub const INT_FAST32_MAX: u32 = 2147483647;
pub const INT_FAST64_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: u32 = 65535;
pub const UINT_FAST32_MAX: u32 = 4294967295;
pub const UINT_FAST64_MAX: i32 = -1;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const UINTPTR_MAX: i32 = -1;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: i32 = -2147483648;
pub const WINT_MAX: u32 = 2147483647;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const __API_TO_BE_DEPRECATED: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_MACOS: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_IOS: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_MACCATALYST: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_WATCHOS: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_TVOS: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_DRIVERKIT: u32 = 100000;
pub const __API_TO_BE_DEPRECATED_VISIONOS: u32 = 100000;
pub const __MAC_10_0: u32 = 1000;
pub const __MAC_10_1: u32 = 1010;
pub const __MAC_10_2: u32 = 1020;
pub const __MAC_10_3: u32 = 1030;
pub const __MAC_10_4: u32 = 1040;
pub const __MAC_10_5: u32 = 1050;
pub const __MAC_10_6: u32 = 1060;
pub const __MAC_10_7: u32 = 1070;
pub const __MAC_10_8: u32 = 1080;
pub const __MAC_10_9: u32 = 1090;
pub const __MAC_10_10: u32 = 101000;
pub const __MAC_10_10_2: u32 = 101002;
pub const __MAC_10_10_3: u32 = 101003;
pub const __MAC_10_11: u32 = 101100;
pub const __MAC_10_11_2: u32 = 101102;
pub const __MAC_10_11_3: u32 = 101103;
pub const __MAC_10_11_4: u32 = 101104;
pub const __MAC_10_12: u32 = 101200;
pub const __MAC_10_12_1: u32 = 101201;
pub const __MAC_10_12_2: u32 = 101202;
pub const __MAC_10_12_4: u32 = 101204;
pub const __MAC_10_13: u32 = 101300;
pub const __MAC_10_13_1: u32 = 101301;
pub const __MAC_10_13_2: u32 = 101302;
pub const __MAC_10_13_4: u32 = 101304;
pub const __MAC_10_14: u32 = 101400;
pub const __MAC_10_14_1: u32 = 101401;
pub const __MAC_10_14_4: u32 = 101404;
pub const __MAC_10_14_5: u32 = 101405;
pub const __MAC_10_14_6: u32 = 101406;
pub const __MAC_10_15: u32 = 101500;
pub const __MAC_10_15_1: u32 = 101501;
pub const __MAC_10_15_4: u32 = 101504;
pub const __MAC_10_16: u32 = 101600;
pub const __MAC_11_0: u32 = 110000;
pub const __MAC_11_1: u32 = 110100;
pub const __MAC_11_3: u32 = 110300;
pub const __MAC_11_4: u32 = 110400;
pub const __MAC_11_5: u32 = 110500;
pub const __MAC_11_6: u32 = 110600;
pub const __MAC_12_0: u32 = 120000;
pub const __MAC_12_1: u32 = 120100;
pub const __MAC_12_2: u32 = 120200;
pub const __MAC_12_3: u32 = 120300;
pub const __MAC_12_4: u32 = 120400;
pub const __MAC_12_5: u32 = 120500;
pub const __MAC_12_6: u32 = 120600;
pub const __MAC_12_7: u32 = 120700;
pub const __MAC_13_0: u32 = 130000;
pub const __MAC_13_1: u32 = 130100;
pub const __MAC_13_2: u32 = 130200;
pub const __MAC_13_3: u32 = 130300;
pub const __MAC_13_4: u32 = 130400;
pub const __MAC_13_5: u32 = 130500;
pub const __MAC_13_6: u32 = 130600;
pub const __MAC_14_0: u32 = 140000;
pub const __MAC_14_1: u32 = 140100;
pub const __MAC_14_2: u32 = 140200;
pub const __MAC_14_3: u32 = 140300;
pub const __MAC_14_4: u32 = 140400;
pub const __MAC_14_5: u32 = 140500;
pub const __IPHONE_2_0: u32 = 20000;
pub const __IPHONE_2_1: u32 = 20100;
pub const __IPHONE_2_2: u32 = 20200;
pub const __IPHONE_3_0: u32 = 30000;
pub const __IPHONE_3_1: u32 = 30100;
pub const __IPHONE_3_2: u32 = 30200;
pub const __IPHONE_4_0: u32 = 40000;
pub const __IPHONE_4_1: u32 = 40100;
pub const __IPHONE_4_2: u32 = 40200;
pub const __IPHONE_4_3: u32 = 40300;
pub const __IPHONE_5_0: u32 = 50000;
pub const __IPHONE_5_1: u32 = 50100;
pub const __IPHONE_6_0: u32 = 60000;
pub const __IPHONE_6_1: u32 = 60100;
pub const __IPHONE_7_0: u32 = 70000;
pub const __IPHONE_7_1: u32 = 70100;
pub const __IPHONE_8_0: u32 = 80000;
pub const __IPHONE_8_1: u32 = 80100;
pub const __IPHONE_8_2: u32 = 80200;
pub const __IPHONE_8_3: u32 = 80300;
pub const __IPHONE_8_4: u32 = 80400;
pub const __IPHONE_9_0: u32 = 90000;
pub const __IPHONE_9_1: u32 = 90100;
pub const __IPHONE_9_2: u32 = 90200;
pub const __IPHONE_9_3: u32 = 90300;
pub const __IPHONE_10_0: u32 = 100000;
pub const __IPHONE_10_1: u32 = 100100;
pub const __IPHONE_10_2: u32 = 100200;
pub const __IPHONE_10_3: u32 = 100300;
pub const __IPHONE_11_0: u32 = 110000;
pub const __IPHONE_11_1: u32 = 110100;
pub const __IPHONE_11_2: u32 = 110200;
pub const __IPHONE_11_3: u32 = 110300;
pub const __IPHONE_11_4: u32 = 110400;
pub const __IPHONE_12_0: u32 = 120000;
pub const __IPHONE_12_1: u32 = 120100;
pub const __IPHONE_12_2: u32 = 120200;
pub const __IPHONE_12_3: u32 = 120300;
pub const __IPHONE_12_4: u32 = 120400;
pub const __IPHONE_13_0: u32 = 130000;
pub const __IPHONE_13_1: u32 = 130100;
pub const __IPHONE_13_2: u32 = 130200;
pub const __IPHONE_13_3: u32 = 130300;
pub const __IPHONE_13_4: u32 = 130400;
pub const __IPHONE_13_5: u32 = 130500;
pub const __IPHONE_13_6: u32 = 130600;
pub const __IPHONE_13_7: u32 = 130700;
pub const __IPHONE_14_0: u32 = 140000;
pub const __IPHONE_14_1: u32 = 140100;
pub const __IPHONE_14_2: u32 = 140200;
pub const __IPHONE_14_3: u32 = 140300;
pub const __IPHONE_14_5: u32 = 140500;
pub const __IPHONE_14_4: u32 = 140400;
pub const __IPHONE_14_6: u32 = 140600;
pub const __IPHONE_14_7: u32 = 140700;
pub const __IPHONE_14_8: u32 = 140800;
pub const __IPHONE_15_0: u32 = 150000;
pub const __IPHONE_15_1: u32 = 150100;
pub const __IPHONE_15_2: u32 = 150200;
pub const __IPHONE_15_3: u32 = 150300;
pub const __IPHONE_15_4: u32 = 150400;
pub const __IPHONE_15_5: u32 = 150500;
pub const __IPHONE_15_6: u32 = 150600;
pub const __IPHONE_15_7: u32 = 150700;
pub const __IPHONE_15_8: u32 = 150800;
pub const __IPHONE_16_0: u32 = 160000;
pub const __IPHONE_16_1: u32 = 160100;
pub const __IPHONE_16_2: u32 = 160200;
pub const __IPHONE_16_3: u32 = 160300;
pub const __IPHONE_16_4: u32 = 160400;
pub const __IPHONE_16_5: u32 = 160500;
pub const __IPHONE_16_6: u32 = 160600;
pub const __IPHONE_16_7: u32 = 160700;
pub const __IPHONE_17_0: u32 = 170000;
pub const __IPHONE_17_1: u32 = 170100;
pub const __IPHONE_17_2: u32 = 170200;
pub const __IPHONE_17_3: u32 = 170300;
pub const __IPHONE_17_4: u32 = 170400;
pub const __IPHONE_17_5: u32 = 170500;
pub const __WATCHOS_1_0: u32 = 10000;
pub const __WATCHOS_2_0: u32 = 20000;
pub const __WATCHOS_2_1: u32 = 20100;
pub const __WATCHOS_2_2: u32 = 20200;
pub const __WATCHOS_3_0: u32 = 30000;
pub const __WATCHOS_3_1: u32 = 30100;
pub const __WATCHOS_3_1_1: u32 = 30101;
pub const __WATCHOS_3_2: u32 = 30200;
pub const __WATCHOS_4_0: u32 = 40000;
pub const __WATCHOS_4_1: u32 = 40100;
pub const __WATCHOS_4_2: u32 = 40200;
pub const __WATCHOS_4_3: u32 = 40300;
pub const __WATCHOS_5_0: u32 = 50000;
pub const __WATCHOS_5_1: u32 = 50100;
pub const __WATCHOS_5_2: u32 = 50200;
pub const __WATCHOS_5_3: u32 = 50300;
pub const __WATCHOS_6_0: u32 = 60000;
pub const __WATCHOS_6_1: u32 = 60100;
pub const __WATCHOS_6_2: u32 = 60200;
pub const __WATCHOS_7_0: u32 = 70000;
pub const __WATCHOS_7_1: u32 = 70100;
pub const __WATCHOS_7_2: u32 = 70200;
pub const __WATCHOS_7_3: u32 = 70300;
pub const __WATCHOS_7_4: u32 = 70400;
pub const __WATCHOS_7_5: u32 = 70500;
pub const __WATCHOS_7_6: u32 = 70600;
pub const __WATCHOS_8_0: u32 = 80000;
pub const __WATCHOS_8_1: u32 = 80100;
pub const __WATCHOS_8_3: u32 = 80300;
pub const __WATCHOS_8_4: u32 = 80400;
pub const __WATCHOS_8_5: u32 = 80500;
pub const __WATCHOS_8_6: u32 = 80600;
pub const __WATCHOS_8_7: u32 = 80700;
pub const __WATCHOS_8_8: u32 = 80800;
pub const __WATCHOS_9_0: u32 = 90000;
pub const __WATCHOS_9_1: u32 = 90100;
pub const __WATCHOS_9_2: u32 = 90200;
pub const __WATCHOS_9_3: u32 = 90300;
pub const __WATCHOS_9_4: u32 = 90400;
pub const __WATCHOS_9_5: u32 = 90500;
pub const __WATCHOS_9_6: u32 = 90600;
pub const __WATCHOS_10_0: u32 = 100000;
pub const __WATCHOS_10_1: u32 = 100100;
pub const __WATCHOS_10_2: u32 = 100200;
pub const __WATCHOS_10_3: u32 = 100300;
pub const __WATCHOS_10_4: u32 = 100400;
pub const __WATCHOS_10_5: u32 = 100500;
pub const __TVOS_9_0: u32 = 90000;
pub const __TVOS_9_1: u32 = 90100;
pub const __TVOS_9_2: u32 = 90200;
pub const __TVOS_10_0: u32 = 100000;
pub const __TVOS_10_0_1: u32 = 100001;
pub const __TVOS_10_1: u32 = 100100;
pub const __TVOS_10_2: u32 = 100200;
pub const __TVOS_11_0: u32 = 110000;
pub const __TVOS_11_1: u32 = 110100;
pub const __TVOS_11_2: u32 = 110200;
pub const __TVOS_11_3: u32 = 110300;
pub const __TVOS_11_4: u32 = 110400;
pub const __TVOS_12_0: u32 = 120000;
pub const __TVOS_12_1: u32 = 120100;
pub const __TVOS_12_2: u32 = 120200;
pub const __TVOS_12_3: u32 = 120300;
pub const __TVOS_12_4: u32 = 120400;
pub const __TVOS_13_0: u32 = 130000;
pub const __TVOS_13_2: u32 = 130200;
pub const __TVOS_13_3: u32 = 130300;
pub const __TVOS_13_4: u32 = 130400;
pub const __TVOS_14_0: u32 = 140000;
pub const __TVOS_14_1: u32 = 140100;
pub const __TVOS_14_2: u32 = 140200;
pub const __TVOS_14_3: u32 = 140300;
pub const __TVOS_14_5: u32 = 140500;
pub const __TVOS_14_6: u32 = 140600;
pub const __TVOS_14_7: u32 = 140700;
pub const __TVOS_15_0: u32 = 150000;
pub const __TVOS_15_1: u32 = 150100;
pub const __TVOS_15_2: u32 = 150200;
pub const __TVOS_15_3: u32 = 150300;
pub const __TVOS_15_4: u32 = 150400;
pub const __TVOS_15_5: u32 = 150500;
pub const __TVOS_15_6: u32 = 150600;
pub const __TVOS_16_0: u32 = 160000;
pub const __TVOS_16_1: u32 = 160100;
pub const __TVOS_16_2: u32 = 160200;
pub const __TVOS_16_3: u32 = 160300;
pub const __TVOS_16_4: u32 = 160400;
pub const __TVOS_16_5: u32 = 160500;
pub const __TVOS_16_6: u32 = 160600;
pub const __TVOS_17_0: u32 = 170000;
pub const __TVOS_17_1: u32 = 170100;
pub const __TVOS_17_2: u32 = 170200;
pub const __TVOS_17_3: u32 = 170300;
pub const __TVOS_17_4: u32 = 170400;
pub const __TVOS_17_5: u32 = 170500;
pub const __BRIDGEOS_2_0: u32 = 20000;
pub const __BRIDGEOS_3_0: u32 = 30000;
pub const __BRIDGEOS_3_1: u32 = 30100;
pub const __BRIDGEOS_3_4: u32 = 30400;
pub const __BRIDGEOS_4_0: u32 = 40000;
pub const __BRIDGEOS_4_1: u32 = 40100;
pub const __BRIDGEOS_5_0: u32 = 50000;
pub const __BRIDGEOS_5_1: u32 = 50100;
pub const __BRIDGEOS_5_3: u32 = 50300;
pub const __BRIDGEOS_6_0: u32 = 60000;
pub const __BRIDGEOS_6_2: u32 = 60200;
pub const __BRIDGEOS_6_4: u32 = 60400;
pub const __BRIDGEOS_6_5: u32 = 60500;
pub const __BRIDGEOS_6_6: u32 = 60600;
pub const __BRIDGEOS_7_0: u32 = 70000;
pub const __BRIDGEOS_7_1: u32 = 70100;
pub const __BRIDGEOS_7_2: u32 = 70200;
pub const __BRIDGEOS_7_3: u32 = 70300;
pub const __BRIDGEOS_7_4: u32 = 70400;
pub const __BRIDGEOS_7_6: u32 = 70600;
pub const __BRIDGEOS_8_0: u32 = 80000;
pub const __BRIDGEOS_8_1: u32 = 80100;
pub const __BRIDGEOS_8_2: u32 = 80200;
pub const __BRIDGEOS_8_3: u32 = 80300;
pub const __BRIDGEOS_8_4: u32 = 80400;
pub const __BRIDGEOS_8_5: u32 = 80500;
pub const __DRIVERKIT_19_0: u32 = 190000;
pub const __DRIVERKIT_20_0: u32 = 200000;
pub const __DRIVERKIT_21_0: u32 = 210000;
pub const __DRIVERKIT_22_0: u32 = 220000;
pub const __DRIVERKIT_22_4: u32 = 220400;
pub const __DRIVERKIT_22_5: u32 = 220500;
pub const __DRIVERKIT_22_6: u32 = 220600;
pub const __DRIVERKIT_23_0: u32 = 230000;
pub const __DRIVERKIT_23_1: u32 = 230100;
pub const __DRIVERKIT_23_2: u32 = 230200;
pub const __DRIVERKIT_23_3: u32 = 230300;
pub const __DRIVERKIT_23_4: u32 = 230400;
pub const __DRIVERKIT_23_5: u32 = 230500;
pub const __VISIONOS_1_0: u32 = 10000;
pub const __VISIONOS_1_1: u32 = 10100;
pub const __VISIONOS_1_2: u32 = 10200;
pub const MAC_OS_X_VERSION_10_0: u32 = 1000;
pub const MAC_OS_X_VERSION_10_1: u32 = 1010;
pub const MAC_OS_X_VERSION_10_2: u32 = 1020;
pub const MAC_OS_X_VERSION_10_3: u32 = 1030;
pub const MAC_OS_X_VERSION_10_4: u32 = 1040;
pub const MAC_OS_X_VERSION_10_5: u32 = 1050;
pub const MAC_OS_X_VERSION_10_6: u32 = 1060;
pub const MAC_OS_X_VERSION_10_7: u32 = 1070;
pub const MAC_OS_X_VERSION_10_8: u32 = 1080;
pub const MAC_OS_X_VERSION_10_9: u32 = 1090;
pub const MAC_OS_X_VERSION_10_10: u32 = 101000;
pub const MAC_OS_X_VERSION_10_10_2: u32 = 101002;
pub const MAC_OS_X_VERSION_10_10_3: u32 = 101003;
pub const MAC_OS_X_VERSION_10_11: u32 = 101100;
pub const MAC_OS_X_VERSION_10_11_2: u32 = 101102;
pub const MAC_OS_X_VERSION_10_11_3: u32 = 101103;
pub const MAC_OS_X_VERSION_10_11_4: u32 = 101104;
pub const MAC_OS_X_VERSION_10_12: u32 = 101200;
pub const MAC_OS_X_VERSION_10_12_1: u32 = 101201;
pub const MAC_OS_X_VERSION_10_12_2: u32 = 101202;
pub const MAC_OS_X_VERSION_10_12_4: u32 = 101204;
pub const MAC_OS_X_VERSION_10_13: u32 = 101300;
pub const MAC_OS_X_VERSION_10_13_1: u32 = 101301;
pub const MAC_OS_X_VERSION_10_13_2: u32 = 101302;
pub const MAC_OS_X_VERSION_10_13_4: u32 = 101304;
pub const MAC_OS_X_VERSION_10_14: u32 = 101400;
pub const MAC_OS_X_VERSION_10_14_1: u32 = 101401;
pub const MAC_OS_X_VERSION_10_14_4: u32 = 101404;
pub const MAC_OS_X_VERSION_10_14_5: u32 = 101405;
pub const MAC_OS_X_VERSION_10_14_6: u32 = 101406;
pub const MAC_OS_X_VERSION_10_15: u32 = 101500;
pub const MAC_OS_X_VERSION_10_15_1: u32 = 101501;
pub const MAC_OS_X_VERSION_10_15_4: u32 = 101504;
pub const MAC_OS_X_VERSION_10_16: u32 = 101600;
pub const MAC_OS_VERSION_11_0: u32 = 110000;
pub const MAC_OS_VERSION_11_1: u32 = 110100;
pub const MAC_OS_VERSION_11_3: u32 = 110300;
pub const MAC_OS_VERSION_11_4: u32 = 110400;
pub const MAC_OS_VERSION_11_5: u32 = 110500;
pub const MAC_OS_VERSION_11_6: u32 = 110600;
pub const MAC_OS_VERSION_12_0: u32 = 120000;
pub const MAC_OS_VERSION_12_1: u32 = 120100;
pub const MAC_OS_VERSION_12_2: u32 = 120200;
pub const MAC_OS_VERSION_12_3: u32 = 120300;
pub const MAC_OS_VERSION_12_4: u32 = 120400;
pub const MAC_OS_VERSION_12_5: u32 = 120500;
pub const MAC_OS_VERSION_12_6: u32 = 120600;
pub const MAC_OS_VERSION_12_7: u32 = 120700;
pub const MAC_OS_VERSION_13_0: u32 = 130000;
pub const MAC_OS_VERSION_13_1: u32 = 130100;
pub const MAC_OS_VERSION_13_2: u32 = 130200;
pub const MAC_OS_VERSION_13_3: u32 = 130300;
pub const MAC_OS_VERSION_13_4: u32 = 130400;
pub const MAC_OS_VERSION_13_5: u32 = 130500;
pub const MAC_OS_VERSION_13_6: u32 = 130600;
pub const MAC_OS_VERSION_14_0: u32 = 140000;
pub const MAC_OS_VERSION_14_1: u32 = 140100;
pub const MAC_OS_VERSION_14_2: u32 = 140200;
pub const MAC_OS_VERSION_14_3: u32 = 140300;
pub const MAC_OS_VERSION_14_4: u32 = 140400;
pub const MAC_OS_VERSION_14_5: u32 = 140500;
pub const __MAC_OS_X_VERSION_MAX_ALLOWED: u32 = 140500;
pub const __ENABLE_LEGACY_MAC_AVAILABILITY: u32 = 1;
pub const __DARWIN_WCHAR_MIN: i32 = -2147483648;
pub const _FORTIFY_SOURCE: u32 = 2;
pub const __DARWIN_NSIG: u32 = 32;
pub const NSIG: u32 = 32;
pub const _ARM_SIGNAL_: u32 = 1;
pub const SIGHUP: u32 = 1;
pub const SIGINT: u32 = 2;
pub const SIGQUIT: u32 = 3;
pub const SIGILL: u32 = 4;
pub const SIGTRAP: u32 = 5;
pub const SIGABRT: u32 = 6;
pub const SIGIOT: u32 = 6;
pub const SIGEMT: u32 = 7;
pub const SIGFPE: u32 = 8;
pub const SIGKILL: u32 = 9;
pub const SIGBUS: u32 = 10;
pub const SIGSEGV: u32 = 11;
pub const SIGSYS: u32 = 12;
pub const SIGPIPE: u32 = 13;
pub const SIGALRM: u32 = 14;
pub const SIGTERM: u32 = 15;
pub const SIGURG: u32 = 16;
pub const SIGSTOP: u32 = 17;
pub const SIGTSTP: u32 = 18;
pub const SIGCONT: u32 = 19;
pub const SIGCHLD: u32 = 20;
pub const SIGTTIN: u32 = 21;
pub const SIGTTOU: u32 = 22;
pub const SIGIO: u32 = 23;
pub const SIGXCPU: u32 = 24;
pub const SIGXFSZ: u32 = 25;
pub const SIGVTALRM: u32 = 26;
pub const SIGPROF: u32 = 27;
pub const SIGWINCH: u32 = 28;
pub const SIGINFO: u32 = 29;
pub const SIGUSR1: u32 = 30;
pub const SIGUSR2: u32 = 31;
pub const __DARWIN_OPAQUE_ARM_THREAD_STATE64: u32 = 0;
pub const SIGEV_NONE: u32 = 0;
pub const SIGEV_SIGNAL: u32 = 1;
pub const SIGEV_THREAD: u32 = 3;
pub const ILL_NOOP: u32 = 0;
pub const ILL_ILLOPC: u32 = 1;
pub const ILL_ILLTRP: u32 = 2;
pub const ILL_PRVOPC: u32 = 3;
pub const ILL_ILLOPN: u32 = 4;
pub const ILL_ILLADR: u32 = 5;
pub const ILL_PRVREG: u32 = 6;
pub const ILL_COPROC: u32 = 7;
pub const ILL_BADSTK: u32 = 8;
pub const FPE_NOOP: u32 = 0;
pub const FPE_FLTDIV: u32 = 1;
pub const FPE_FLTOVF: u32 = 2;
pub const FPE_FLTUND: u32 = 3;
pub const FPE_FLTRES: u32 = 4;
pub const FPE_FLTINV: u32 = 5;
pub const FPE_FLTSUB: u32 = 6;
pub const FPE_INTDIV: u32 = 7;
pub const FPE_INTOVF: u32 = 8;
pub const SEGV_NOOP: u32 = 0;
pub const SEGV_MAPERR: u32 = 1;
pub const SEGV_ACCERR: u32 = 2;
pub const BUS_NOOP: u32 = 0;
pub const BUS_ADRALN: u32 = 1;
pub const BUS_ADRERR: u32 = 2;
pub const BUS_OBJERR: u32 = 3;
pub const TRAP_BRKPT: u32 = 1;
pub const TRAP_TRACE: u32 = 2;
pub const CLD_NOOP: u32 = 0;
pub const CLD_EXITED: u32 = 1;
pub const CLD_KILLED: u32 = 2;
pub const CLD_DUMPED: u32 = 3;
pub const CLD_TRAPPED: u32 = 4;
pub const CLD_STOPPED: u32 = 5;
pub const CLD_CONTINUED: u32 = 6;
pub const POLL_IN: u32 = 1;
pub const POLL_OUT: u32 = 2;
pub const POLL_MSG: u32 = 3;
pub const POLL_ERR: u32 = 4;
pub const POLL_PRI: u32 = 5;
pub const POLL_HUP: u32 = 6;
pub const SA_ONSTACK: u32 = 1;
pub const SA_RESTART: u32 = 2;
pub const SA_RESETHAND: u32 = 4;
pub const SA_NOCLDSTOP: u32 = 8;
pub const SA_NODEFER: u32 = 16;
pub const SA_NOCLDWAIT: u32 = 32;
pub const SA_SIGINFO: u32 = 64;
pub const SA_USERTRAMP: u32 = 256;
pub const SA_64REGSET: u32 = 512;
pub const SA_USERSPACE_MASK: u32 = 127;
pub const SIG_BLOCK: u32 = 1;
pub const SIG_UNBLOCK: u32 = 2;
pub const SIG_SETMASK: u32 = 3;
pub const SI_USER: u32 = 65537;
pub const SI_QUEUE: u32 = 65538;
pub const SI_TIMER: u32 = 65539;
pub const SI_ASYNCIO: u32 = 65540;
pub const SI_MESGQ: u32 = 65541;
pub const SS_ONSTACK: u32 = 1;
pub const SS_DISABLE: u32 = 4;
pub const MINSIGSTKSZ: u32 = 32768;
pub const SIGSTKSZ: u32 = 131072;
pub const SV_ONSTACK: u32 = 1;
pub const SV_INTERRUPT: u32 = 2;
pub const SV_RESETHAND: u32 = 4;
pub const SV_NODEFER: u32 = 16;
pub const SV_NOCLDSTOP: u32 = 8;
pub const SV_SIGINFO: u32 = 64;
pub const PRIO_PROCESS: u32 = 0;
pub const PRIO_PGRP: u32 = 1;
pub const PRIO_USER: u32 = 2;
pub const PRIO_DARWIN_THREAD: u32 = 3;
pub const PRIO_DARWIN_PROCESS: u32 = 4;
pub const PRIO_MIN: i32 = -20;
pub const PRIO_MAX: u32 = 20;
pub const PRIO_DARWIN_BG: u32 = 4096;
pub const PRIO_DARWIN_NONUI: u32 = 4097;
pub const RUSAGE_SELF: u32 = 0;
pub const RUSAGE_CHILDREN: i32 = -1;
pub const RUSAGE_INFO_V0: u32 = 0;
pub const RUSAGE_INFO_V1: u32 = 1;
pub const RUSAGE_INFO_V2: u32 = 2;
pub const RUSAGE_INFO_V3: u32 = 3;
pub const RUSAGE_INFO_V4: u32 = 4;
pub const RUSAGE_INFO_V5: u32 = 5;
pub const RUSAGE_INFO_V6: u32 = 6;
pub const RUSAGE_INFO_CURRENT: u32 = 6;
pub const RU_PROC_RUNS_RESLIDE: u32 = 1;
pub const RLIMIT_CPU: u32 = 0;
pub const RLIMIT_FSIZE: u32 = 1;
pub const RLIMIT_DATA: u32 = 2;
pub const RLIMIT_STACK: u32 = 3;
pub const RLIMIT_CORE: u32 = 4;
pub const RLIMIT_AS: u32 = 5;
pub const RLIMIT_RSS: u32 = 5;
pub const RLIMIT_MEMLOCK: u32 = 6;
pub const RLIMIT_NPROC: u32 = 7;
pub const RLIMIT_NOFILE: u32 = 8;
pub const RLIM_NLIMITS: u32 = 9;
pub const _RLIMIT_POSIX_FLAG: u32 = 4096;
pub const RLIMIT_WAKEUPS_MONITOR: u32 = 1;
pub const RLIMIT_CPU_USAGE_MONITOR: u32 = 2;
pub const RLIMIT_THREAD_CPULIMITS: u32 = 3;
pub const RLIMIT_FOOTPRINT_INTERVAL: u32 = 4;
pub const WAKEMON_ENABLE: u32 = 1;
pub const WAKEMON_DISABLE: u32 = 2;
pub const WAKEMON_GET_PARAMS: u32 = 4;
pub const WAKEMON_SET_DEFAULTS: u32 = 8;
pub const WAKEMON_MAKE_FATAL: u32 = 16;
pub const CPUMON_MAKE_FATAL: u32 = 4096;
pub const FOOTPRINT_INTERVAL_RESET: u32 = 1;
pub const IOPOL_TYPE_DISK: u32 = 0;
pub const IOPOL_TYPE_VFS_ATIME_UPDATES: u32 = 2;
pub const IOPOL_TYPE_VFS_MATERIALIZE_DATALESS_FILES: u32 = 3;
pub const IOPOL_TYPE_VFS_STATFS_NO_DATA_VOLUME: u32 = 4;
pub const IOPOL_TYPE_VFS_TRIGGER_RESOLVE: u32 = 5;
pub const IOPOL_TYPE_VFS_IGNORE_CONTENT_PROTECTION: u32 = 6;
pub const IOPOL_TYPE_VFS_IGNORE_PERMISSIONS: u32 = 7;
pub const IOPOL_TYPE_VFS_SKIP_MTIME_UPDATE: u32 = 8;
pub const IOPOL_TYPE_VFS_ALLOW_LOW_SPACE_WRITES: u32 = 9;
pub const IOPOL_TYPE_VFS_DISALLOW_RW_FOR_O_EVTONLY: u32 = 10;
pub const IOPOL_SCOPE_PROCESS: u32 = 0;
pub const IOPOL_SCOPE_THREAD: u32 = 1;
pub const IOPOL_SCOPE_DARWIN_BG: u32 = 2;
pub const IOPOL_DEFAULT: u32 = 0;
pub const IOPOL_IMPORTANT: u32 = 1;
pub const IOPOL_PASSIVE: u32 = 2;
pub const IOPOL_THROTTLE: u32 = 3;
pub const IOPOL_UTILITY: u32 = 4;
pub const IOPOL_STANDARD: u32 = 5;
pub const IOPOL_APPLICATION: u32 = 5;
pub const IOPOL_NORMAL: u32 = 1;
pub const IOPOL_ATIME_UPDATES_DEFAULT: u32 = 0;
pub const IOPOL_ATIME_UPDATES_OFF: u32 = 1;
pub const IOPOL_MATERIALIZE_DATALESS_FILES_DEFAULT: u32 = 0;
pub const IOPOL_MATERIALIZE_DATALESS_FILES_OFF: u32 = 1;
pub const IOPOL_MATERIALIZE_DATALESS_FILES_ON: u32 = 2;
pub const IOPOL_VFS_STATFS_NO_DATA_VOLUME_DEFAULT: u32 = 0;
pub const IOPOL_VFS_STATFS_FORCE_NO_DATA_VOLUME: u32 = 1;
pub const IOPOL_VFS_TRIGGER_RESOLVE_DEFAULT: u32 = 0;
pub const IOPOL_VFS_TRIGGER_RESOLVE_OFF: u32 = 1;
pub const IOPOL_VFS_CONTENT_PROTECTION_DEFAULT: u32 = 0;
pub const IOPOL_VFS_CONTENT_PROTECTION_IGNORE: u32 = 1;
pub const IOPOL_VFS_IGNORE_PERMISSIONS_OFF: u32 = 0;
pub const IOPOL_VFS_IGNORE_PERMISSIONS_ON: u32 = 1;
pub const IOPOL_VFS_SKIP_MTIME_UPDATE_OFF: u32 = 0;
pub const IOPOL_VFS_SKIP_MTIME_UPDATE_ON: u32 = 1;
pub const IOPOL_VFS_ALLOW_LOW_SPACE_WRITES_OFF: u32 = 0;
pub const IOPOL_VFS_ALLOW_LOW_SPACE_WRITES_ON: u32 = 1;
pub const IOPOL_VFS_DISALLOW_RW_FOR_O_EVTONLY_DEFAULT: u32 = 0;
pub const IOPOL_VFS_DISALLOW_RW_FOR_O_EVTONLY_ON: u32 = 1;
pub const IOPOL_VFS_NOCACHE_WRITE_FS_BLKSIZE_DEFAULT: u32 = 0;
pub const IOPOL_VFS_NOCACHE_WRITE_FS_BLKSIZE_ON: u32 = 1;
pub const WNOHANG: u32 = 1;
pub const WUNTRACED: u32 = 2;
pub const WCOREFLAG: u32 = 128;
pub const _WSTOPPED: u32 = 127;
pub const WEXITED: u32 = 4;
pub const WSTOPPED: u32 = 8;
pub const WCONTINUED: u32 = 16;
pub const WNOWAIT: u32 = 32;
pub const WAIT_ANY: i32 = -1;
pub const WAIT_MYPGRP: u32 = 0;
pub const _QUAD_HIGHWORD: u32 = 1;
pub const _QUAD_LOWWORD: u32 = 0;
pub const __DARWIN_LITTLE_ENDIAN: u32 = 1234;
pub const __DARWIN_BIG_ENDIAN: u32 = 4321;
pub const __DARWIN_PDP_ENDIAN: u32 = 3412;
pub const __DARWIN_BYTE_ORDER: u32 = 1234;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const EXIT_FAILURE: u32 = 1;
pub const EXIT_SUCCESS: u32 = 0;
pub const RAND_MAX: u32 = 2147483647;
pub const FP_NAN: u32 = 1;
pub const FP_INFINITE: u32 = 2;
pub const FP_ZERO: u32 = 3;
pub const FP_NORMAL: u32 = 4;
pub const FP_SUBNORMAL: u32 = 5;
pub const FP_SUPERNORMAL: u32 = 6;
pub const FP_FAST_FMA: u32 = 1;
pub const FP_FAST_FMAF: u32 = 1;
pub const FP_FAST_FMAL: u32 = 1;
pub const FP_ILOGB0: i32 = -2147483648;
pub const FP_ILOGBNAN: i32 = -2147483648;
pub const MATH_ERRNO: u32 = 1;
pub const MATH_ERREXCEPT: u32 = 2;
pub const M_E: f64 = 2.718281828459045;
pub const M_LOG2E: f64 = 1.4426950408889634;
pub const M_LOG10E: f64 = 0.4342944819032518;
pub const M_LN2: f64 = 0.6931471805599453;
pub const M_LN10: f64 = 2.302585092994046;
pub const M_PI: f64 = 3.141592653589793;
pub const M_PI_2: f64 = 1.5707963267948966;
pub const M_PI_4: f64 = 0.7853981633974483;
pub const M_1_PI: f64 = 0.3183098861837907;
pub const M_2_PI: f64 = 0.6366197723675814;
pub const M_2_SQRTPI: f64 = 1.1283791670955126;
pub const M_SQRT2: f64 = 1.4142135623730951;
pub const M_SQRT1_2: f64 = 0.7071067811865476;
pub const FP_SNAN: u32 = 1;
pub const FP_QNAN: u32 = 1;
pub const DOMAIN: u32 = 1;
pub const SING: u32 = 2;
pub const OVERFLOW: u32 = 3;
pub const UNDERFLOW: u32 = 4;
pub const TLOSS: u32 = 5;
pub const PLOSS: u32 = 6;
pub const MAC_OS_X_VERSION_MAX_ALLOWED: u32 = 140000;
pub const __AVAILABILITY_MACROS_USES_AVAILABILITY: u32 = 1;
pub const __DARWIN_FD_SETSIZE: u32 = 1024;
pub const __DARWIN_NBBY: u32 = 8;
pub const NBBY: u32 = 8;
pub const FD_SETSIZE: u32 = 1024;
pub const OBJC_API_VERSION: u32 = 2;
pub const OBJC_NO_GC: u32 = 1;
pub const NS_ENFORCE_NSOBJECT_DESIGNATED_INITIALIZER: u32 = 1;
pub const OBJC_OLD_DISPATCH_PROTOTYPES: u32 = 0;
pub const __bool_true_false_are_defined: u32 = 1;
pub const OBJC_BOOL_IS_BOOL: u32 = 1;
pub const __DARWIN_CLK_TCK: u32 = 100;
pub const MB_LEN_MAX: u32 = 6;
pub const CLK_TCK: u32 = 100;
pub const CHAR_BIT: u32 = 8;
pub const SCHAR_MAX: u32 = 127;
pub const SCHAR_MIN: i32 = -128;
pub const UCHAR_MAX: u32 = 255;
pub const CHAR_MAX: u32 = 127;
pub const CHAR_MIN: i32 = -128;
pub const USHRT_MAX: u32 = 65535;
pub const SHRT_MAX: u32 = 32767;
pub const SHRT_MIN: i32 = -32768;
pub const UINT_MAX: u32 = 4294967295;
pub const INT_MAX: u32 = 2147483647;
pub const INT_MIN: i32 = -2147483648;
pub const ULONG_MAX: i32 = -1;
pub const LONG_MAX: u64 = 9223372036854775807;
pub const LONG_MIN: i64 = -9223372036854775808;
pub const ULLONG_MAX: i32 = -1;
pub const LLONG_MAX: u64 = 9223372036854775807;
pub const LLONG_MIN: i64 = -9223372036854775808;
pub const LONG_BIT: u32 = 64;
pub const SSIZE_MAX: u64 = 9223372036854775807;
pub const WORD_BIT: u32 = 32;
pub const SIZE_T_MAX: i32 = -1;
pub const UQUAD_MAX: i32 = -1;
pub const QUAD_MAX: u64 = 9223372036854775807;
pub const QUAD_MIN: i64 = -9223372036854775808;
pub const ARG_MAX: u32 = 1048576;
pub const CHILD_MAX: u32 = 266;
pub const GID_MAX: u32 = 2147483647;
pub const LINK_MAX: u32 = 32767;
pub const MAX_CANON: u32 = 1024;
pub const MAX_INPUT: u32 = 1024;
pub const NAME_MAX: u32 = 255;
pub const NGROUPS_MAX: u32 = 16;
pub const UID_MAX: u32 = 2147483647;
pub const OPEN_MAX: u32 = 10240;
pub const PATH_MAX: u32 = 1024;
pub const PIPE_BUF: u32 = 512;
pub const BC_BASE_MAX: u32 = 99;
pub const BC_DIM_MAX: u32 = 2048;
pub const BC_SCALE_MAX: u32 = 99;
pub const BC_STRING_MAX: u32 = 1000;
pub const CHARCLASS_NAME_MAX: u32 = 14;
pub const COLL_WEIGHTS_MAX: u32 = 2;
pub const EQUIV_CLASS_MAX: u32 = 2;
pub const EXPR_NEST_MAX: u32 = 32;
pub const LINE_MAX: u32 = 2048;
pub const RE_DUP_MAX: u32 = 255;
pub const NZERO: u32 = 20;
pub const _POSIX_ARG_MAX: u32 = 4096;
pub const _POSIX_CHILD_MAX: u32 = 25;
pub const _POSIX_LINK_MAX: u32 = 8;
pub const _POSIX_MAX_CANON: u32 = 255;
pub const _POSIX_MAX_INPUT: u32 = 255;
pub const _POSIX_NAME_MAX: u32 = 14;
pub const _POSIX_NGROUPS_MAX: u32 = 8;
pub const _POSIX_OPEN_MAX: u32 = 20;
pub const _POSIX_PATH_MAX: u32 = 256;
pub const _POSIX_PIPE_BUF: u32 = 512;
pub const _POSIX_SSIZE_MAX: u32 = 32767;
pub const _POSIX_STREAM_MAX: u32 = 8;
pub const _POSIX_TZNAME_MAX: u32 = 6;
pub const _POSIX2_BC_BASE_MAX: u32 = 99;
pub const _POSIX2_BC_DIM_MAX: u32 = 2048;
pub const _POSIX2_BC_SCALE_MAX: u32 = 99;
pub const _POSIX2_BC_STRING_MAX: u32 = 1000;
pub const _POSIX2_EQUIV_CLASS_MAX: u32 = 2;
pub const _POSIX2_EXPR_NEST_MAX: u32 = 32;
pub const _POSIX2_LINE_MAX: u32 = 2048;
pub const _POSIX2_RE_DUP_MAX: u32 = 255;
pub const _POSIX_AIO_LISTIO_MAX: u32 = 2;
pub const _POSIX_AIO_MAX: u32 = 1;
pub const _POSIX_DELAYTIMER_MAX: u32 = 32;
pub const _POSIX_MQ_OPEN_MAX: u32 = 8;
pub const _POSIX_MQ_PRIO_MAX: u32 = 32;
pub const _POSIX_RTSIG_MAX: u32 = 8;
pub const _POSIX_SEM_NSEMS_MAX: u32 = 256;
pub const _POSIX_SEM_VALUE_MAX: u32 = 32767;
pub const _POSIX_SIGQUEUE_MAX: u32 = 32;
pub const _POSIX_TIMER_MAX: u32 = 32;
pub const _POSIX_CLOCKRES_MIN: u32 = 20000000;
pub const _POSIX_THREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const _POSIX_THREAD_KEYS_MAX: u32 = 128;
pub const _POSIX_THREAD_THREADS_MAX: u32 = 64;
pub const PTHREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const PTHREAD_KEYS_MAX: u32 = 512;
pub const PTHREAD_STACK_MIN: u32 = 16384;
pub const _POSIX_HOST_NAME_MAX: u32 = 255;
pub const _POSIX_LOGIN_NAME_MAX: u32 = 9;
pub const _POSIX_SS_REPL_MAX: u32 = 4;
pub const _POSIX_SYMLINK_MAX: u32 = 255;
pub const _POSIX_SYMLOOP_MAX: u32 = 8;
pub const _POSIX_TRACE_EVENT_NAME_MAX: u32 = 30;
pub const _POSIX_TRACE_NAME_MAX: u32 = 8;
pub const _POSIX_TRACE_SYS_MAX: u32 = 8;
pub const _POSIX_TRACE_USER_EVENT_MAX: u32 = 32;
pub const _POSIX_TTY_NAME_MAX: u32 = 9;
pub const _POSIX2_CHARCLASS_NAME_MAX: u32 = 14;
pub const _POSIX2_COLL_WEIGHTS_MAX: u32 = 2;
pub const _POSIX_RE_DUP_MAX: u32 = 255;
pub const OFF_MIN: i64 = -9223372036854775808;
pub const OFF_MAX: u64 = 9223372036854775807;
pub const PASS_MAX: u32 = 128;
pub const NL_ARGMAX: u32 = 9;
pub const NL_LANGMAX: u32 = 14;
pub const NL_MSGMAX: u32 = 32767;
pub const NL_NMAX: u32 = 1;
pub const NL_SETMAX: u32 = 255;
pub const NL_TEXTMAX: u32 = 2048;
pub const _XOPEN_IOV_MAX: u32 = 16;
pub const IOV_MAX: u32 = 1024;
pub const _XOPEN_NAME_MAX: u32 = 255;
pub const _XOPEN_PATH_MAX: u32 = 1024;
pub const TIME_UTC: u32 = 1;
pub const EPERM: u32 = 1;
pub const ENOENT: u32 = 2;
pub const ESRCH: u32 = 3;
pub const EINTR: u32 = 4;
pub const EIO: u32 = 5;
pub const ENXIO: u32 = 6;
pub const E2BIG: u32 = 7;
pub const ENOEXEC: u32 = 8;
pub const EBADF: u32 = 9;
pub const ECHILD: u32 = 10;
pub const EDEADLK: u32 = 11;
pub const ENOMEM: u32 = 12;
pub const EACCES: u32 = 13;
pub const EFAULT: u32 = 14;
pub const ENOTBLK: u32 = 15;
pub const EBUSY: u32 = 16;
pub const EEXIST: u32 = 17;
pub const EXDEV: u32 = 18;
pub const ENODEV: u32 = 19;
pub const ENOTDIR: u32 = 20;
pub const EISDIR: u32 = 21;
pub const EINVAL: u32 = 22;
pub const ENFILE: u32 = 23;
pub const EMFILE: u32 = 24;
pub const ENOTTY: u32 = 25;
pub const ETXTBSY: u32 = 26;
pub const EFBIG: u32 = 27;
pub const ENOSPC: u32 = 28;
pub const ESPIPE: u32 = 29;
pub const EROFS: u32 = 30;
pub const EMLINK: u32 = 31;
pub const EPIPE: u32 = 32;
pub const EDOM: u32 = 33;
pub const ERANGE: u32 = 34;
pub const EAGAIN: u32 = 35;
pub const EWOULDBLOCK: u32 = 35;
pub const EINPROGRESS: u32 = 36;
pub const EALREADY: u32 = 37;
pub const ENOTSOCK: u32 = 38;
pub const EDESTADDRREQ: u32 = 39;
pub const EMSGSIZE: u32 = 40;
pub const EPROTOTYPE: u32 = 41;
pub const ENOPROTOOPT: u32 = 42;
pub const EPROTONOSUPPORT: u32 = 43;
pub const ESOCKTNOSUPPORT: u32 = 44;
pub const ENOTSUP: u32 = 45;
pub const EPFNOSUPPORT: u32 = 46;
pub const EAFNOSUPPORT: u32 = 47;
pub const EADDRINUSE: u32 = 48;
pub const EADDRNOTAVAIL: u32 = 49;
pub const ENETDOWN: u32 = 50;
pub const ENETUNREACH: u32 = 51;
pub const ENETRESET: u32 = 52;
pub const ECONNABORTED: u32 = 53;
pub const ECONNRESET: u32 = 54;
pub const ENOBUFS: u32 = 55;
pub const EISCONN: u32 = 56;
pub const ENOTCONN: u32 = 57;
pub const ESHUTDOWN: u32 = 58;
pub const ETOOMANYREFS: u32 = 59;
pub const ETIMEDOUT: u32 = 60;
pub const ECONNREFUSED: u32 = 61;
pub const ELOOP: u32 = 62;
pub const ENAMETOOLONG: u32 = 63;
pub const EHOSTDOWN: u32 = 64;
pub const EHOSTUNREACH: u32 = 65;
pub const ENOTEMPTY: u32 = 66;
pub const EPROCLIM: u32 = 67;
pub const EUSERS: u32 = 68;
pub const EDQUOT: u32 = 69;
pub const ESTALE: u32 = 70;
pub const EREMOTE: u32 = 71;
pub const EBADRPC: u32 = 72;
pub const ERPCMISMATCH: u32 = 73;
pub const EPROGUNAVAIL: u32 = 74;
pub const EPROGMISMATCH: u32 = 75;
pub const EPROCUNAVAIL: u32 = 76;
pub const ENOLCK: u32 = 77;
pub const ENOSYS: u32 = 78;
pub const EFTYPE: u32 = 79;
pub const EAUTH: u32 = 80;
pub const ENEEDAUTH: u32 = 81;
pub const EPWROFF: u32 = 82;
pub const EDEVERR: u32 = 83;
pub const EOVERFLOW: u32 = 84;
pub const EBADEXEC: u32 = 85;
pub const EBADARCH: u32 = 86;
pub const ESHLIBVERS: u32 = 87;
pub const EBADMACHO: u32 = 88;
pub const ECANCELED: u32 = 89;
pub const EIDRM: u32 = 90;
pub const ENOMSG: u32 = 91;
pub const EILSEQ: u32 = 92;
pub const ENOATTR: u32 = 93;
pub const EBADMSG: u32 = 94;
pub const EMULTIHOP: u32 = 95;
pub const ENODATA: u32 = 96;
pub const ENOLINK: u32 = 97;
pub const ENOSR: u32 = 98;
pub const ENOSTR: u32 = 99;
pub const EPROTO: u32 = 100;
pub const ETIME: u32 = 101;
pub const EOPNOTSUPP: u32 = 102;
pub const ENOPOLICY: u32 = 103;
pub const ENOTRECOVERABLE: u32 = 104;
pub const EOWNERDEAD: u32 = 105;
pub const EQFULL: u32 = 106;
pub const ELAST: u32 = 106;
pub const _PTHREAD_MUTEX_SIG_init: u32 = 850045863;
pub const _PTHREAD_ERRORCHECK_MUTEX_SIG_init: u32 = 850045857;
pub const _PTHREAD_RECURSIVE_MUTEX_SIG_init: u32 = 850045858;
pub const _PTHREAD_FIRSTFIT_MUTEX_SIG_init: u32 = 850045859;
pub const _PTHREAD_COND_SIG_init: u32 = 1018212795;
pub const _PTHREAD_ONCE_SIG_init: u32 = 816954554;
pub const _PTHREAD_RWLOCK_SIG_init: u32 = 766030772;
pub const SCHED_OTHER: u32 = 1;
pub const SCHED_FIFO: u32 = 4;
pub const SCHED_RR: u32 = 2;
pub const __SCHED_PARAM_SIZE__: u32 = 4;
pub const QOS_MIN_RELATIVE_PRIORITY: i32 = -15;
pub const PTHREAD_CREATE_JOINABLE: u32 = 1;
pub const PTHREAD_CREATE_DETACHED: u32 = 2;
pub const PTHREAD_INHERIT_SCHED: u32 = 1;
pub const PTHREAD_EXPLICIT_SCHED: u32 = 2;
pub const PTHREAD_CANCEL_ENABLE: u32 = 1;
pub const PTHREAD_CANCEL_DISABLE: u32 = 0;
pub const PTHREAD_CANCEL_DEFERRED: u32 = 2;
pub const PTHREAD_CANCEL_ASYNCHRONOUS: u32 = 0;
pub const PTHREAD_SCOPE_SYSTEM: u32 = 1;
pub const PTHREAD_SCOPE_PROCESS: u32 = 2;
pub const PTHREAD_PROCESS_SHARED: u32 = 1;
pub const PTHREAD_PROCESS_PRIVATE: u32 = 2;
pub const PTHREAD_PRIO_NONE: u32 = 0;
pub const PTHREAD_PRIO_INHERIT: u32 = 1;
pub const PTHREAD_PRIO_PROTECT: u32 = 2;
pub const PTHREAD_MUTEX_NORMAL: u32 = 0;
pub const PTHREAD_MUTEX_ERRORCHECK: u32 = 1;
pub const PTHREAD_MUTEX_RECURSIVE: u32 = 2;
pub const PTHREAD_MUTEX_DEFAULT: u32 = 0;
pub const PTHREAD_MUTEX_POLICY_FAIRSHARE_NP: u32 = 1;
pub const PTHREAD_MUTEX_POLICY_FIRSTFIT_NP: u32 = 3;
pub const SWIFT_HAS_MSVC_ARM_ATOMICS: u32 = 1;
pub const __GNUC_VA_LIST: u32 = 1;
pub const _LIBCPP_TYPEINFO_COMPARISON_IMPLEMENTATION: u32 = 3;
pub const _CACHED_RUNES: u32 = 256;
pub const _CRMASK: i32 = -256;
pub const _RUNE_MAGIC_A: &[u8; 9] = b"RuneMagA\0";
pub const _CTYPE_A: u32 = 256;
pub const _CTYPE_C: u32 = 512;
pub const _CTYPE_D: u32 = 1024;
pub const _CTYPE_G: u32 = 2048;
pub const _CTYPE_L: u32 = 4096;
pub const _CTYPE_P: u32 = 8192;
pub const _CTYPE_S: u32 = 16384;
pub const _CTYPE_U: u32 = 32768;
pub const _CTYPE_X: u32 = 65536;
pub const _CTYPE_B: u32 = 131072;
pub const _CTYPE_R: u32 = 262144;
pub const _CTYPE_I: u32 = 524288;
pub const _CTYPE_T: u32 = 1048576;
pub const _CTYPE_Q: u32 = 2097152;
pub const _CTYPE_SW0: u32 = 536870912;
pub const _CTYPE_SW1: u32 = 1073741824;
pub const _CTYPE_SW2: u32 = 2147483648;
pub const _CTYPE_SW3: u32 = 3221225472;
pub const _CTYPE_SWM: u32 = 3758096384;
pub const _CTYPE_SWS: u32 = 30;
pub const RENAME_SECLUDE: u32 = 1;
pub const RENAME_SWAP: u32 = 2;
pub const RENAME_EXCL: u32 = 4;
pub const RENAME_RESERVED1: u32 = 8;
pub const RENAME_NOFOLLOW_ANY: u32 = 16;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const SEEK_HOLE: u32 = 3;
pub const SEEK_DATA: u32 = 4;
pub const __SLBF: u32 = 1;
pub const __SNBF: u32 = 2;
pub const __SRD: u32 = 4;
pub const __SWR: u32 = 8;
pub const __SRW: u32 = 16;
pub const __SEOF: u32 = 32;
pub const __SERR: u32 = 64;
pub const __SMBF: u32 = 128;
pub const __SAPP: u32 = 256;
pub const __SSTR: u32 = 512;
pub const __SOPT: u32 = 1024;
pub const __SNPT: u32 = 2048;
pub const __SOFF: u32 = 4096;
pub const __SMOD: u32 = 8192;
pub const __SALC: u32 = 16384;
pub const __SIGN: u32 = 32768;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 1;
pub const _IONBF: u32 = 2;
pub const BUFSIZ: u32 = 1024;
pub const EOF: i32 = -1;
pub const FOPEN_MAX: u32 = 20;
pub const FILENAME_MAX: u32 = 1024;
pub const P_tmpdir: &[u8; 10] = b"/var/tmp/\0";
pub const L_tmpnam: u32 = 1024;
pub const TMP_MAX: u32 = 308915776;
pub const L_ctermid: u32 = 1024;
pub const LC_ALL: u32 = 0;
pub const LC_COLLATE: u32 = 1;
pub const LC_CTYPE: u32 = 2;
pub const LC_MONETARY: u32 = 3;
pub const LC_NUMERIC: u32 = 4;
pub const LC_TIME: u32 = 5;
pub const LC_MESSAGES: u32 = 6;
pub const _LC_LAST: u32 = 7;
pub const LC_COLLATE_MASK: u32 = 1;
pub const LC_CTYPE_MASK: u32 = 2;
pub const LC_MESSAGES_MASK: u32 = 4;
pub const LC_MONETARY_MASK: u32 = 8;
pub const LC_NUMERIC_MASK: u32 = 16;
pub const LC_TIME_MASK: u32 = 32;
pub const _LC_NUM_MASK: u32 = 6;
pub const _LC_LAST_MASK: u32 = 32;
pub const _LIBCPP_HAS_CATOPEN: u32 = 1;
pub const NL_SETD: u32 = 1;
pub const NL_CAT_LOCALE: u32 = 1;
pub const _LIBCPP_GET_C_LOCALE: u32 = 0;
pub const SWIFT_ABI_DEFAULT_LEAST_VALID_POINTER: u32 = 4096;
pub const SWIFT_ABI_DEFAULT_FUNCTION_SPARE_BITS_MASK: u32 = 0;
pub const SWIFT_ABI_DEFAULT_SWIFT_SPARE_BITS_MASK: u32 = 0;
pub const SWIFT_ABI_DEFAULT_OBJC_RESERVED_BITS_MASK: u32 = 0;
pub const SWIFT_ABI_DEFAULT_OBJC_NUM_RESERVED_LOW_BITS: u32 = 0;
pub const SWIFT_ABI_DEFAULT_OBJC_WEAK_REFERENCE_MARKER_MASK: u32 = 0;
pub const SWIFT_ABI_DEFAULT_OBJC_WEAK_REFERENCE_MARKER_VALUE: u32 = 0;
pub const SWIFT_ABI_DEFAULT_BRIDGEOBJECT_TAG_32: u32 = 0;
pub const SWIFT_ABI_DEFAULT_BRIDGEOBJECT_TAG_64: i64 = -9223372036854775808;
pub const SWIFT_ABI_DEFAULT_64BIT_SPARE_BITS_MASK: i64 = -72057594037927929;
pub const SWIFT_ABI_DEFAULT_REFERENCE_POISON_DEBUG_VALUE_32: u32 = 1088;
pub const SWIFT_ABI_DEFAULT_REFERENCE_POISON_DEBUG_VALUE_64: u32 = 1088;
pub const SWIFT_ABI_I386_SWIFT_SPARE_BITS_MASK: u32 = 3;
pub const SWIFT_ABI_I386_OBJC_WEAK_REFERENCE_MARKER_MASK: u32 = 1;
pub const SWIFT_ABI_I386_OBJC_WEAK_REFERENCE_MARKER_VALUE: u32 = 1;
pub const SWIFT_ABI_I386_IS_OBJC_BIT: u32 = 2;
pub const SWIFT_ABI_ARM_SWIFT_SPARE_BITS_MASK: u32 = 3;
pub const SWIFT_ABI_ARM_OBJC_WEAK_REFERENCE_MARKER_MASK: u32 = 1;
pub const SWIFT_ABI_ARM_OBJC_WEAK_REFERENCE_MARKER_VALUE: u32 = 1;
pub const SWIFT_ABI_ARM_IS_OBJC_BIT: u32 = 2;
pub const SWIFT_ABI_DARWIN_X86_64_LEAST_VALID_POINTER: u64 = 4294967296;
pub const SWIFT_ABI_X86_64_SWIFT_SPARE_BITS_MASK: i64 = -72057594037927929;
pub const SWIFT_ABI_X86_64_OBJC_RESERVED_BITS_MASK: u32 = 1;
pub const SWIFT_ABI_X86_64_OBJC_NUM_RESERVED_LOW_BITS: u32 = 1;
pub const SWIFT_ABI_X86_64_SIMULATOR_OBJC_RESERVED_BITS_MASK: i64 = -9223372036854775808;
pub const SWIFT_ABI_X86_64_SIMULATOR_OBJC_NUM_RESERVED_LOW_BITS: u32 = 0;
pub const SWIFT_ABI_X86_64_IS_OBJC_BIT: u64 = 4611686018427387904;
pub const SWIFT_ABI_X86_64_OBJC_WEAK_REFERENCE_MARKER_MASK: u32 = 3;
pub const SWIFT_ABI_X86_64_OBJC_WEAK_REFERENCE_MARKER_VALUE: u32 = 2;
pub const SWIFT_ABI_X86_64_SIMULATOR_OBJC_WEAK_REFERENCE_MARKER_MASK: i64 = -9223372036854775807;
pub const SWIFT_ABI_X86_64_SIMULATOR_OBJC_WEAK_REFERENCE_MARKER_VALUE: u32 = 1;
pub const SWIFT_ABI_DARWIN_ARM64_LEAST_VALID_POINTER: u64 = 4294967296;
pub const SWIFT_ABI_ANDROID_ARM64_SWIFT_SPARE_BITS_MASK: u64 = 67553994410557447;
pub const SWIFT_ABI_ANDROID_ARM64_OBJC_RESERVED_BITS_MASK: u32 = 0;
pub const SWIFT_ABI_ARM64_SWIFT_SPARE_BITS_MASK: i64 = -1152921504606846969;
pub const SWIFT_ABI_ARM64_OBJC_RESERVED_BITS_MASK: i64 = -9223372036854775808;
pub const SWIFT_ABI_ARM64_OBJC_NUM_RESERVED_LOW_BITS: u32 = 0;
pub const SWIFT_ABI_ARM64_IS_OBJC_BIT: u64 = 4611686018427387904;
pub const SWIFT_ABI_ARM64_OBJC_WEAK_REFERENCE_MARKER_MASK: i64 = -9223372036854775807;
pub const SWIFT_ABI_ARM64_OBJC_WEAK_REFERENCE_MARKER_VALUE: u32 = 1;
pub const SWIFT_ABI_POWERPC_SWIFT_SPARE_BITS_MASK: u32 = 3;
pub const SWIFT_ABI_POWERPC64_SWIFT_SPARE_BITS_MASK: i64 = -72057594037927929;
pub const SWIFT_ABI_S390X_SWIFT_SPARE_BITS_MASK: i64 = -72057594037927929;
pub const SWIFT_ABI_S390X_OBJC_RESERVED_BITS_MASK: i64 = -9223372036854775808;
pub const SWIFT_ABI_S390X_OBJC_NUM_RESERVED_LOW_BITS: u32 = 0;
pub const SWIFT_ABI_S390X_IS_OBJC_BIT: u64 = 4611686018427387904;
pub const SWIFT_ABI_S390X_OBJC_WEAK_REFERENCE_MARKER_MASK: i64 = -9223372036854775807;
pub const SWIFT_ABI_S390X_OBJC_WEAK_REFERENCE_MARKER_VALUE: u32 = 1;
pub const SWIFT_ABI_WASM32_LEAST_VALID_POINTER: u32 = 4096;
pub const SWIFT_TARGET_OS_SIMULATOR: u32 = 0;
pub const SWIFT_TARGET_OS_DARWIN: u32 = 1;
pub const SWIFT_ABI_HEAP_OBJECT_HEADER_SIZE_64: u32 = 16;
pub const SWIFT_ABI_HEAP_OBJECT_HEADER_SIZE_32: u32 = 8;
extern "C" {
    #[link_name = "\u{1}__ZNSt3__122__libcpp_verbose_abortEPKcz"]
    pub fn std___libcpp_verbose_abort(__format: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__15__useEPKcz"]
    pub fn std___use(arg1: *const ::std::os::raw::c_char, ...);
}
pub type std___enable_if_t = u8;
pub type std_enable_if_t = u8;
pub type std_integral_constant_value_type<_Tp> = _Tp;
pub type std_integral_constant_type = u8;
extern "C" {
    #[link_name = "\u{1}value"]
    pub static std_value: _Tp;
}
pub type std_true_type = u8;
pub type std_false_type = u8;
pub type std__BoolConstant = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_remove_const {
    pub _address: u8,
}
pub type std_remove_const_type<_Tp> = _Tp;
pub type std___remove_const_t<_Tp> = _Tp;
pub type std_remove_const_t<_Tp> = std___remove_const_t<_Tp>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_remove_volatile {
    pub _address: u8,
}
pub type std_remove_volatile_type<_Tp> = _Tp;
pub type std___remove_volatile_t<_Tp> = _Tp;
pub type std_remove_volatile_t<_Tp> = std___remove_volatile_t<_Tp>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_remove_cv {
    pub _address: u8,
}
pub type std_remove_cv_type<_Tp> = _Tp;
pub type std___remove_cv_t<_Tp> = _Tp;
pub type std_remove_cv_t<_Tp> = std___remove_cv_t<_Tp>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___libcpp_is_integral {
    pub _address: u8,
}
pub const std___libcpp_is_integral_value: std___libcpp_is_integral__bindgen_ty_1 = 0;
pub type std___libcpp_is_integral__bindgen_ty_1 = i32;
const _: () = {
    ["Size of template specialization: std___libcpp_is_integral_open0_bool__close0"]
        [::std::mem::size_of::<std___libcpp_is_integral>() - 1usize];
    ["Align of template specialization: std___libcpp_is_integral_open0_bool__close0"]
        [::std::mem::align_of::<std___libcpp_is_integral>() - 1usize];
};
const _: () = {
    ["Size of template specialization: std___libcpp_is_integral_open0_char_close0"]
        [::std::mem::size_of::<std___libcpp_is_integral>() - 1usize];
    ["Align of template specialization: std___libcpp_is_integral_open0_char_close0"]
        [::std::mem::align_of::<std___libcpp_is_integral>() - 1usize];
};
const _: () = {
    ["Size of template specialization: std___libcpp_is_integral_open0_signed_char_close0"]
        [::std::mem::size_of::<std___libcpp_is_integral>() - 1usize];
    ["Align of template specialization: std___libcpp_is_integral_open0_signed_char_close0"]
        [::std::mem::align_of::<std___libcpp_is_integral>() - 1usize];
};
const _: () = {
    ["Size of template specialization: std___libcpp_is_integral_open0_unsigned_char_close0"]
        [::std::mem::size_of::<std___libcpp_is_integral>() - 1usize];
    ["Align of template specialization: std___libcpp_is_integral_open0_unsigned_char_close0"]
        [::std::mem::align_of::<std___libcpp_is_integral>() - 1usize];
};
const _: () = {
    ["Size of template specialization: std___libcpp_is_integral_open0_wchar_t_close0"]
        [::std::mem::size_of::<std___libcpp_is_integral>() - 1usize];
    ["Align of template specialization: std___libcpp_is_integral_open0_wchar_t_close0"]
        [::std::mem::align_of::<std___libcpp_is_integral>() - 1usize];
};
const _: () = {
    ["Size of template specialization: std___libcpp_is_integral_open0_char16_t_close0"]
        [::std::mem::size_of::<std___libcpp_is_integral>() - 1usize];
    ["Align of template specialization: std___libcpp_is_integral_open0_char16_t_close0"]
        [::std::mem::align_of::<std___libcpp_is_integral>() - 1usize];
};
const _: () = {
    ["Size of template specialization: std___libcpp_is_integral_open0_char32_t_close0"]
        [::std::mem::size_of::<std___libcpp_is_integral>() - 1usize];
    ["Align of template specialization: std___libcpp_is_integral_open0_char32_t_close0"]
        [::std::mem::align_of::<std___libcpp_is_integral>() - 1usize];
};
const _: () = {
    ["Size of template specialization: std___libcpp_is_integral_open0_short_close0"]
        [::std::mem::size_of::<std___libcpp_is_integral>() - 1usize];
    ["Align of template specialization: std___libcpp_is_integral_open0_short_close0"]
        [::std::mem::align_of::<std___libcpp_is_integral>() - 1usize];
};
const _: () = {
    ["Size of template specialization: std___libcpp_is_integral_open0_unsigned_short_close0"]
        [::std::mem::size_of::<std___libcpp_is_integral>() - 1usize];
    ["Align of template specialization: std___libcpp_is_integral_open0_unsigned_short_close0"]
        [::std::mem::align_of::<std___libcpp_is_integral>() - 1usize];
};
const _: () = {
    ["Size of template specialization: std___libcpp_is_integral_open0_int_close0"]
        [::std::mem::size_of::<std___libcpp_is_integral>() - 1usize];
    ["Align of template specialization: std___libcpp_is_integral_open0_int_close0"]
        [::std::mem::align_of::<std___libcpp_is_integral>() - 1usize];
};
const _: () = {
    ["Size of template specialization: std___libcpp_is_integral_open0_unsigned_int_close0"]
        [::std::mem::size_of::<std___libcpp_is_integral>() - 1usize];
    ["Align of template specialization: std___libcpp_is_integral_open0_unsigned_int_close0"]
        [::std::mem::align_of::<std___libcpp_is_integral>() - 1usize];
};
const _: () = {
    ["Size of template specialization: std___libcpp_is_integral_open0_long_close0"]
        [::std::mem::size_of::<std___libcpp_is_integral>() - 1usize];
    ["Align of template specialization: std___libcpp_is_integral_open0_long_close0"]
        [::std::mem::align_of::<std___libcpp_is_integral>() - 1usize];
};
const _: () = {
    ["Size of template specialization: std___libcpp_is_integral_open0_unsigned_long_close0"]
        [::std::mem::size_of::<std___libcpp_is_integral>() - 1usize];
    ["Align of template specialization: std___libcpp_is_integral_open0_unsigned_long_close0"]
        [::std::mem::align_of::<std___libcpp_is_integral>() - 1usize];
};
const _: () = {
    ["Size of template specialization: std___libcpp_is_integral_open0_long_long_close0"]
        [::std::mem::size_of::<std___libcpp_is_integral>() - 1usize];
    ["Align of template specialization: std___libcpp_is_integral_open0_long_long_close0"]
        [::std::mem::align_of::<std___libcpp_is_integral>() - 1usize];
};
const _: () = {
    ["Size of template specialization: std___libcpp_is_integral_open0_unsigned_long_long_close0"]
        [::std::mem::size_of::<std___libcpp_is_integral>() - 1usize];
    ["Align of template specialization: std___libcpp_is_integral_open0_unsigned_long_long_close0"] [:: std :: mem :: align_of :: < std___libcpp_is_integral > () - 1usize] ;
};
const _: () = {
    ["Size of template specialization: std___libcpp_is_integral_open0___int128_close0"]
        [::std::mem::size_of::<std___libcpp_is_integral>() - 1usize];
    ["Align of template specialization: std___libcpp_is_integral_open0___int128_close0"]
        [::std::mem::align_of::<std___libcpp_is_integral>() - 1usize];
};
const _: () = {
    ["Size of template specialization: std___libcpp_is_integral_open0_unsigned___int128_close0"]
        [::std::mem::size_of::<std___libcpp_is_integral>() - 1usize];
    ["Align of template specialization: std___libcpp_is_integral_open0_unsigned___int128_close0"]
        [::std::mem::align_of::<std___libcpp_is_integral>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_integral {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_alignment_of {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_const {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_lvalue_reference {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_rvalue_reference {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_reference {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_function {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_same {
    pub _address: u8,
}
pub type std__IsSame = std__BoolConstant;
pub type std__IsNotSame = std__BoolConstant;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___libcpp_is_referenceable {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_void {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_remove_reference {
    pub _address: u8,
}
pub type std_remove_reference_type<_Tp> = _Tp;
pub type std___libcpp_remove_reference_t<_Tp> = _Tp;
pub type std_remove_reference_t<_Tp> = std___libcpp_remove_reference_t<_Tp>;
pub type std___add_pointer_t<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_add_pointer {
    pub _address: u8,
}
pub type std_add_pointer_type = std___add_pointer_t<_Tp>;
pub type std_add_pointer_t<_Tp> = std___add_pointer_t<_Tp>;
pub type std__If = u8;
pub type std_conditional_type<_If> = _If;
pub type std_conditional_t = u8;
pub type std___conditional_t = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_array {
    pub _base: std_false_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_remove_extent {
    pub _address: u8,
}
pub type std_remove_extent_type<_Tp> = _Tp;
pub type std___remove_extent_t<_Tp> = _Tp;
pub type std_remove_extent_t<_Tp> = std___remove_extent_t<_Tp>;
pub type std___decay_t<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_decay {
    pub _address: u8,
}
pub type std_decay_type = std___decay_t<_Tp>;
pub type std_decay_t<_Tp> = std___decay_t<_Tp>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_base_of {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_class {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_convertible {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_add_const {
    pub _address: u8,
}
pub type std_add_const_type<_Tp> = _Tp;
pub type std_add_const_t = std_add_const;
pub type std___add_lvalue_reference_t<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_add_lvalue_reference {
    pub _address: u8,
}
pub type std_add_lvalue_reference_type = std___add_lvalue_reference_t<_Tp>;
pub type std_add_lvalue_reference_t<_Tp> = std___add_lvalue_reference_t<_Tp>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_copy_constructible {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___libcpp_is_final {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_final {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_polymorphic {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_add_cv {
    pub _address: u8,
}
pub type std_add_cv_type<_Tp> = _Tp;
pub type std_add_cv_t = std_add_cv;
pub type std___add_rvalue_reference_t<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_add_rvalue_reference {
    pub _address: u8,
}
pub type std_add_rvalue_reference_type<_Tp> = std___add_rvalue_reference_t<_Tp>;
pub type std_add_rvalue_reference_t<_Tp> = std___add_rvalue_reference_t<_Tp>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_add_volatile {
    pub _address: u8,
}
pub type std_add_volatile_type<_Tp> = _Tp;
pub type std_add_volatile_t = std_add_volatile;
#[repr(C)]
#[derive(Debug)]
pub struct std___nat {
    pub _address: u8,
}
const _: () = {
    ["Size of std___nat"][::std::mem::size_of::<std___nat>() - 1usize];
    ["Alignment of std___nat"][::std::mem::align_of::<std___nat>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___type_list {
    pub _address: u8,
}
pub type std___type_list__Head<_Hp> = _Hp;
pub type std___type_list__Tail<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___align_type {
    pub _address: u8,
}
pub type std___align_type_type<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___struct_double {
    pub __lx: f64,
}
const _: () = {
    ["Size of std___struct_double"][::std::mem::size_of::<std___struct_double>() - 8usize];
    ["Alignment of std___struct_double"][::std::mem::align_of::<std___struct_double>() - 8usize];
    ["Offset of field: std___struct_double::__lx"]
        [::std::mem::offset_of!(std___struct_double, __lx) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___struct_double4 {
    pub __lx: [f64; 4usize],
}
const _: () = {
    ["Size of std___struct_double4"][::std::mem::size_of::<std___struct_double4>() - 32usize];
    ["Alignment of std___struct_double4"][::std::mem::align_of::<std___struct_double4>() - 8usize];
    ["Offset of field: std___struct_double4::__lx"]
        [::std::mem::offset_of!(std___struct_double4, __lx) - 0usize];
};
pub type std___all_types = std___type_list;
extern "C" {
    #[link_name = "\u{1}__min"]
    pub static std___select_align___min: ::std::os::raw::c_ulong;
}
extern "C" {
    #[link_name = "\u{1}__max"]
    pub static std___select_align___max: ::std::os::raw::c_ulong;
}
extern "C" {
    #[link_name = "\u{1}value"]
    pub static std___select_align_value: ::std::os::raw::c_ulong;
}
pub type std_aligned_storage__Aligner = u8;
#[repr(C)]
#[derive(Copy, Clone)]
pub union std_aligned_storage_type {
    pub __align: std_aligned_storage__Aligner,
    pub __data: *mut ::std::os::raw::c_uchar,
}
const _: () = {
    ["Size of std_aligned_storage_type"]
        [::std::mem::size_of::<std_aligned_storage_type>() - 8usize];
    ["Alignment of std_aligned_storage_type"]
        [::std::mem::align_of::<std_aligned_storage_type>() - 8usize];
};
pub type std_aligned_storage_t = u8;
pub type std_aligned_union_type = u8;
pub type std_aligned_union_t = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_volatile {
    pub _address: u8,
}
pub type std___apply_cv_impl___apply<_Up> = _Up;
pub type std___apply_cv_t = u8;
pub type std___remove_const_ref_t<_Tp> = std___remove_const_t<std___libcpp_remove_reference_t<_Tp>>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___extract_key_fail_tag {
    pub _address: u8,
}
const _: () = {
    ["Size of std___extract_key_fail_tag"]
        [::std::mem::size_of::<std___extract_key_fail_tag>() - 1usize];
    ["Alignment of std___extract_key_fail_tag"]
        [::std::mem::align_of::<std___extract_key_fail_tag>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___extract_key_self_tag {
    pub _address: u8,
}
const _: () = {
    ["Size of std___extract_key_self_tag"]
        [::std::mem::size_of::<std___extract_key_self_tag>() - 1usize];
    ["Alignment of std___extract_key_self_tag"]
        [::std::mem::align_of::<std___extract_key_self_tag>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___extract_key_first_tag {
    pub _address: u8,
}
const _: () = {
    ["Size of std___extract_key_first_tag"]
        [::std::mem::size_of::<std___extract_key_first_tag>() - 1usize];
    ["Alignment of std___extract_key_first_tag"]
        [::std::mem::align_of::<std___extract_key_first_tag>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___can_extract_key {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___can_extract_map_key {
    pub _address: u8,
}
pub type std___remove_cvref_t<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_same_uncvref {
    pub _address: u8,
}
pub type std___void_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___common_type2_imp {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___common_type_impl {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___common_types {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_common_type {
    pub _address: u8,
}
const _: () = {
    ["Size of template specialization: std_common_type_open0_close0"]
        [::std::mem::size_of::<std_common_type>() - 1usize];
    ["Align of template specialization: std_common_type_open0_close0"]
        [::std::mem::align_of::<std_common_type>() - 1usize];
};
pub type std_common_type_t = std_common_type;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___copy_cv {
    pub _address: u8,
}
pub type std___copy_cv_type<_To> = _To;
pub type std___copy_cv_t = std___copy_cv;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___copy_cvref {
    pub _address: u8,
}
pub type std___copy_cvref_type = std___copy_cv_t;
pub type std___copy_cvref_t = std___copy_cvref;
pub type std___expand_to_true = std_true_type;
pub type std__And<_Pred> = _Pred;
pub type std__Or = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_remove_all_extents {
    pub _address: u8,
}
pub type std_remove_all_extents_type<_Tp> = _Tp;
pub type std___remove_all_extents_t<_Tp> = _Tp;
pub type std_remove_all_extents_t<_Tp> = std___remove_all_extents_t<_Tp>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_has_virtual_destructor {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_core_convertible {
    pub _base: std_false_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___libcpp_is_member_pointer {
    pub _address: u8,
}
pub const std___libcpp_is_member_pointer___is_member: std___libcpp_is_member_pointer__bindgen_ty_1 =
    0;
pub const std___libcpp_is_member_pointer___is_func: std___libcpp_is_member_pointer__bindgen_ty_1 =
    0;
pub const std___libcpp_is_member_pointer___is_obj: std___libcpp_is_member_pointer__bindgen_ty_1 = 0;
pub type std___libcpp_is_member_pointer__bindgen_ty_1 = i32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_member_function_pointer {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_member_object_pointer {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_reference_wrapper_impl {
    pub _base: std_false_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_reference_wrapper {
    pub _base: std___is_reference_wrapper_impl,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___any {
    pub _address: u8,
}
const _: () = {
    ["Size of std___any"][::std::mem::size_of::<std___any>() - 1usize];
    ["Alignment of std___any"][::std::mem::align_of::<std___any>() - 1usize];
};
extern "C" {
    #[link_name = "\u{1}__ZNSt3__15__anyC1Ez"]
    pub fn std___any___any(this: *mut std___any, ...);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___member_pointer_traits {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___member_pointer_class_type {
    pub _address: u8,
}
pub type std___enable_if_bullet1 = u8;
pub type std___enable_if_bullet2 = u8;
pub type std___enable_if_bullet3 = u8;
pub type std___enable_if_bullet4 = u8;
pub type std___enable_if_bullet5 = u8;
pub type std___enable_if_bullet6 = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___invokable_r {
    pub _address: u8,
}
pub type std___invokable_r__Result<_Fp> = _Fp;
pub type std___invokable_r_type = std___conditional_t;
pub type std___invokable = std___invokable_r;
pub type std___nothrow_invokable_r = u8;
pub type std___nothrow_invokable = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___invoke_of {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_abstract {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___libcpp_is_floating_point {
    pub _base: std_false_type,
}
const _: () = {
    ["Size of template specialization: std___libcpp_is_floating_point_open0_float_close0"]
        [::std::mem::size_of::<std___libcpp_is_floating_point>() - 1usize];
    ["Align of template specialization: std___libcpp_is_floating_point_open0_float_close0"]
        [::std::mem::align_of::<std___libcpp_is_floating_point>() - 1usize];
};
const _: () = {
    ["Size of template specialization: std___libcpp_is_floating_point_open0_double_close0"]
        [::std::mem::size_of::<std___libcpp_is_floating_point>() - 1usize];
    ["Align of template specialization: std___libcpp_is_floating_point_open0_double_close0"]
        [::std::mem::align_of::<std___libcpp_is_floating_point>() - 1usize];
};
const _: () = {
    ["Size of template specialization: std___libcpp_is_floating_point_open0_long_double_close0"]
        [::std::mem::size_of::<std___libcpp_is_floating_point>() - 1usize];
    ["Align of template specialization: std___libcpp_is_floating_point_open0_long_double_close0"]
        [::std::mem::align_of::<std___libcpp_is_floating_point>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_floating_point {
    pub _base: std___libcpp_is_floating_point,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_arithmetic {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_assignable {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___libcpp_is_bounded_array {
    pub _base: std_false_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_callable {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_standard_layout {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_trivial {
    pub _address: u8,
}
pub type std__IsCharLikeType = std__And<_Pred>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_nullptr_t_impl {
    pub _base: std_false_type,
}
const _: () = {
    ["Size of template specialization: std___is_nullptr_t_impl_open0_nullptr_t_close0"]
        [::std::mem::size_of::<std___is_nullptr_t_impl>() - 1usize];
    ["Align of template specialization: std___is_nullptr_t_impl_open0_nullptr_t_close0"]
        [::std::mem::align_of::<std___is_nullptr_t_impl>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_nullptr_t {
    pub _base: std___is_nullptr_t_impl,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_null_pointer {
    pub _base: std___is_nullptr_t_impl,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_fundamental {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_compound {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_constructible {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_copy_assignable {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_default_constructible {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_destructible {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_empty {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_enum {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_implicitly_default_constructible {
    pub _base: std_false_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_literal_type {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_member_pointer {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_move_assignable {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_move_constructible {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_nothrow_assignable {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_nothrow_constructible {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Lazy {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_nothrow_copy_assignable {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_nothrow_copy_constructible {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_nothrow_default_constructible {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_pointer {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_scalar {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_nothrow_destructible {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_nothrow_move_assignable {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_nothrow_move_constructible {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_union {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_object {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_pod {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_underlying_type {
    pub _address: u8,
}
pub type std_underlying_type_t = std_underlying_type;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_signed {
    pub _address: u8,
}
pub type std___swap_result_t = u8;
pub type std___detail___swappable_with___swap1<_Tp> = _Tp;
pub type std___detail___swappable_with___swap2<_Up> = _Up;
pub const __block_size: std___detail__bindgen_ty_1 = 64;
pub type std___detail__bindgen_ty_1 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_swappable {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_nothrow_swappable {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_trivially_assignable {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_trivially_constructible {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_trivially_copy_assignable {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_trivially_copy_constructible {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_trivially_copyable {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_trivially_default_constructible {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_trivially_destructible {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_trivially_move_assignable {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_trivially_move_constructible {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___libcpp_is_unbounded_array {
    pub _base: std_false_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_unsigned {
    pub _address: u8,
}
pub type std___make_const_lvalue_ref<_Tp> = *const std___libcpp_remove_reference_t<_Tp>;
pub type std___make_signed_t<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_make_signed {
    pub _address: u8,
}
pub type std_make_signed_type = std___make_signed_t<_Tp>;
pub type std_make_signed_t<_Tp> = std___make_signed_t<_Tp>;
pub type std___make_unsigned_t<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_make_unsigned {
    pub _address: u8,
}
pub type std_make_unsigned_type = std___make_unsigned_t<_Tp>;
pub type std_make_unsigned_t<_Tp> = std___make_unsigned_t<_Tp>;
pub type std___copy_unsigned_t = std___conditional_t;
pub type std___maybe_const = std___conditional_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__Not {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_rank {
    pub _base: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_remove_pointer {
    pub _address: u8,
}
pub type std_remove_pointer_type<_Tp> = _Tp;
pub type std___remove_pointer_t<_Tp> = _Tp;
pub type std_remove_pointer_t<_Tp> = std___remove_pointer_t<_Tp>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_result_of {
    pub _address: u8,
}
pub type std_result_of_t = std_result_of;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___type_identity {
    pub _address: u8,
}
pub type std___type_identity_type<_Tp> = _Tp;
pub type std___type_identity_t = std___type_identity;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___unwrap_reference {
    pub _address: u8,
}
pub type std___unwrap_reference_type<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___unwrap_ref_decay {
    pub _address: u8,
}
pub type std___move_if_noexcept_result_t = std___conditional_t;
pub const std_float_round_style_round_indeterminate: std_float_round_style = -1;
pub const std_float_round_style_round_toward_zero: std_float_round_style = 0;
pub const std_float_round_style_round_to_nearest: std_float_round_style = 1;
pub const std_float_round_style_round_toward_infinity: std_float_round_style = 2;
pub const std_float_round_style_round_toward_neg_infinity: std_float_round_style = 3;
pub type std_float_round_style = ::std::os::raw::c_int;
pub const std_float_denorm_style_denorm_indeterminate: std_float_denorm_style = -1;
pub const std_float_denorm_style_denorm_absent: std_float_denorm_style = 0;
pub const std_float_denorm_style_denorm_present: std_float_denorm_style = 1;
pub type std_float_denorm_style = ::std::os::raw::c_int;
pub type std___libcpp_numeric_limits_type<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_numeric_limits {
    pub _address: u8,
}
pub type std_numeric_limits___base = u8;
pub type std_numeric_limits_type = std_numeric_limits___base;
extern "C" {
    #[link_name = "\u{1}is_specialized"]
    pub static std_is_specialized: bool;
}
extern "C" {
    #[link_name = "\u{1}digits"]
    pub static std_digits: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}digits10"]
    pub static std_digits10: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}max_digits10"]
    pub static std_max_digits10: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}is_signed"]
    pub static std_is_signed: bool;
}
extern "C" {
    #[link_name = "\u{1}is_integer"]
    pub static std_is_integer: bool;
}
extern "C" {
    #[link_name = "\u{1}is_exact"]
    pub static std_is_exact: bool;
}
extern "C" {
    #[link_name = "\u{1}radix"]
    pub static std_radix: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}min_exponent"]
    pub static std_min_exponent: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}min_exponent10"]
    pub static std_min_exponent10: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}max_exponent"]
    pub static std_max_exponent: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}max_exponent10"]
    pub static std_max_exponent10: ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}has_infinity"]
    pub static std_has_infinity: bool;
}
extern "C" {
    #[link_name = "\u{1}has_quiet_NaN"]
    pub static std_has_quiet_NaN: bool;
}
extern "C" {
    #[link_name = "\u{1}has_signaling_NaN"]
    pub static std_has_signaling_NaN: bool;
}
extern "C" {
    #[link_name = "\u{1}has_denorm"]
    pub static std_has_denorm: std_float_denorm_style;
}
extern "C" {
    #[link_name = "\u{1}has_denorm_loss"]
    pub static std_has_denorm_loss: bool;
}
extern "C" {
    #[link_name = "\u{1}is_iec559"]
    pub static std_is_iec559: bool;
}
extern "C" {
    #[link_name = "\u{1}is_bounded"]
    pub static std_is_bounded: bool;
}
extern "C" {
    #[link_name = "\u{1}is_modulo"]
    pub static std_is_modulo: bool;
}
extern "C" {
    #[link_name = "\u{1}traps"]
    pub static std_traps: bool;
}
extern "C" {
    #[link_name = "\u{1}tinyness_before"]
    pub static std_tinyness_before: bool;
}
extern "C" {
    #[link_name = "\u{1}round_style"]
    pub static std_round_style: std_float_round_style;
}
#[repr(C)]
#[derive(Debug)]
pub struct std___exception_guard_exceptions<_Rollback> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Rollback>>,
    pub __rollback_: _Rollback,
    pub __completed_: bool,
}
#[repr(C)]
#[derive(Debug)]
pub struct std___exception_guard_noexceptions {
    pub __completed_: bool,
}
pub type std___exception_guard<_Rollback> = std___exception_guard_exceptions<_Rollback>;
pub type std___integer_sequence___convert = u8;
pub type std___integer_sequence___to_tuple_indices = u8;
pub type std___make_indices_imp = u8;
pub type std_integer_sequence_value_type<_Tp> = _Tp;
pub type std_index_sequence = u8;
pub type std___make_integer_sequence = u8;
pub type std_make_integer_sequence = std___make_integer_sequence;
pub type std_make_index_sequence = std_make_integer_sequence;
pub type std_index_sequence_for = std_make_index_sequence;
pub type std___make_tuple_indices_type = std___make_indices_imp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___tuple_types {
    pub _address: u8,
}
pub type std_tuple_element_t = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_tuple_size {
    pub _address: u8,
}
pub type std___enable_if_tuple_size_imp<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___make_tuple_types_flat {
    pub _address: u8,
}
pub type std___make_tuple_types__RawTp<_Tp> =
    std___remove_cv_t<std___libcpp_remove_reference_t<_Tp>>;
pub type std___make_tuple_types__Maker = std___make_tuple_types_flat;
pub type std___make_tuple_types_type = std___make_tuple_types__Maker;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___tuple_like_ext {
    pub _base: std_false_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___tuple_sfinae_base {
    pub _address: u8,
}
pub type std___tuple_sfinae_base___constructible = std_is_constructible;
pub type std___tuple_sfinae_base___convertible = std_is_convertible;
pub type std___tuple_sfinae_base___assignable = std_is_assignable;
const _: () = {
    ["Size of std___tuple_sfinae_base"][::std::mem::size_of::<std___tuple_sfinae_base>() - 1usize];
    ["Alignment of std___tuple_sfinae_base"]
        [::std::mem::align_of::<std___tuple_sfinae_base>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___check_tuple_constructor_fail {
    pub _address: u8,
}
const _: () = {
    ["Size of std___check_tuple_constructor_fail"]
        [::std::mem::size_of::<std___check_tuple_constructor_fail>() - 1usize];
    ["Alignment of std___check_tuple_constructor_fail"]
        [::std::mem::align_of::<std___check_tuple_constructor_fail>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_piecewise_construct_t {
    pub _address: u8,
}
const _: () = {
    ["Size of std_piecewise_construct_t"]
        [::std::mem::size_of::<std_piecewise_construct_t>() - 1usize];
    ["Alignment of std_piecewise_construct_t"]
        [::std::mem::align_of::<std_piecewise_construct_t>() - 1usize];
};
extern "C" {
    #[link_name = "\u{1}__ZNSt3__1L19piecewise_constructE"]
    pub static std_piecewise_construct: std_piecewise_construct_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___non_trivially_copyable_base {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_pair<_T1, _T2> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_T1>>,
    pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_T2>>,
    pub first: _T1,
    pub second: _T2,
}
pub type std_pair_first_type<_T1> = _T1;
pub type std_pair_second_type<_T2> = _T2;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_pair__CheckArgs {
    pub _address: u8,
}
pub type std_pair__CheckArgsDep = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___numeric_type {
    pub _address: u8,
}
pub type std___numeric_type_type<_Tp> = _Tp;
const _: () = {
    ["Size of template specialization: std___numeric_type_open0_void_close0"]
        [::std::mem::size_of::<std___numeric_type>() - 1usize];
    ["Align of template specialization: std___numeric_type_open0_void_close0"]
        [::std::mem::align_of::<std___numeric_type>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___promote {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_pmr_polymorphic_allocator {
    pub _address: u8,
}
pub type std_string = std_basic_string;
pub type std_wstring = std_basic_string;
pub type std_u16string = std_basic_string;
pub type std_u32string = std_basic_string;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_basic_filebuf {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_basic_ifstream {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_basic_ofstream {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_basic_fstream {
    pub _address: u8,
}
pub type std_filebuf = std_basic_filebuf;
pub type std_ifstream = std_basic_ifstream;
pub type std_ofstream = std_basic_ofstream;
pub type std_fstream = std_basic_fstream;
pub type std_wfilebuf = std_basic_filebuf;
pub type std_wifstream = std_basic_ifstream;
pub type std_wofstream = std_basic_ofstream;
pub type std_wfstream = std_basic_fstream;
pub type std_ios = std_basic_ios;
pub type std_wios = std_basic_ios;
pub type std_streamoff = ::std::os::raw::c_longlong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_basic_istream {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_basic_iostream {
    pub _address: u8,
}
pub type std_istream = std_basic_istream;
pub type std_iostream = std_basic_iostream;
pub type std_wistream = std_basic_istream;
pub type std_wiostream = std_basic_iostream;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_basic_ostream {
    pub _address: u8,
}
pub type std_ostream = std_basic_ostream;
pub type std_wostream = std_basic_ostream;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_basic_stringbuf {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_basic_istringstream {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_basic_ostringstream {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_basic_stringstream {
    pub _address: u8,
}
pub type std_stringbuf = std_basic_stringbuf;
pub type std_istringstream = std_basic_istringstream;
pub type std_ostringstream = std_basic_ostringstream;
pub type std_stringstream = std_basic_stringstream;
pub type std_wstringbuf = std_basic_stringbuf;
pub type std_wistringstream = std_basic_istringstream;
pub type std_wostringstream = std_basic_ostringstream;
pub type std_wstringstream = std_basic_stringstream;
pub type std_streambuf = std_basic_streambuf<::std::os::raw::c_char>;
pub type std_wstreambuf = std_basic_streambuf<u32>;
pub type std_streampos = std_fpos<__mbstate_t>;
pub type std_wstreampos = std_fpos<__mbstate_t>;
pub type std_u16streampos = std_fpos<__mbstate_t>;
pub type std_u32streampos = std_fpos<__mbstate_t>;
#[repr(C)]
pub struct std___save_flags<_CharT> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
    pub __stream_: *mut std___save_flags___stream_type,
    pub __fmtflags_: std___save_flags_fmtflags,
    pub __fill_: _CharT,
}
pub type std___save_flags___stream_type = std_basic_ios;
pub type std___save_flags_fmtflags = std___save_flags___stream_type;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___libcpp_is_always_lock_free {
    pub _address: u8,
}
pub const std___legacy_memory_order___mo_relaxed: std___legacy_memory_order = 0;
pub const std___legacy_memory_order___mo_consume: std___legacy_memory_order = 1;
pub const std___legacy_memory_order___mo_acquire: std___legacy_memory_order = 2;
pub const std___legacy_memory_order___mo_release: std___legacy_memory_order = 3;
pub const std___legacy_memory_order___mo_acq_rel: std___legacy_memory_order = 4;
pub const std___legacy_memory_order___mo_seq_cst: std___legacy_memory_order = 5;
pub type std___legacy_memory_order = ::std::os::raw::c_uint;
pub type std___memory_order_underlying_t = type_;
pub const std_memory_order_memory_order_relaxed: std_memory_order = 0;
pub const std_memory_order_memory_order_consume: std_memory_order = 1;
pub const std_memory_order_memory_order_acquire: std_memory_order = 2;
pub const std_memory_order_memory_order_release: std_memory_order = 3;
pub const std_memory_order_memory_order_acq_rel: std_memory_order = 4;
pub const std_memory_order_memory_order_seq_cst: std_memory_order = 5;
pub type std_memory_order = ::std::os::raw::c_uint;
#[repr(C)]
pub struct std___cxx_atomic_base_impl {
    pub __a_value: [u8; 0usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___cxx_atomic_impl<_Base> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Base>>,
    pub _base: _Base,
}
pub type std___cxx_contention_t = ::std::os::raw::c_longlong;
pub type std___cxx_atomic_contention_t = std___cxx_atomic_impl<std___cxx_atomic_base_impl>;
extern "C" {
    #[link_name = "\u{1}value"]
    pub static std___static_gcd_value: ::std::os::raw::c_long;
}
extern "C" {
    #[link_name = "\u{1}value"]
    pub static std___static_lcm_value: ::std::os::raw::c_long;
}
extern "C" {
    #[link_name = "\u{1}value"]
    pub static std___static_abs_value: ::std::os::raw::c_long;
}
extern "C" {
    #[link_name = "\u{1}value"]
    pub static std___static_sign_value: ::std::os::raw::c_long;
}
pub const std___ll_mul_nan: ::std::os::raw::c_long = -9223372036854775808;
pub const std___ll_mul_min: ::std::os::raw::c_long = -9223372036854775807;
pub const std___ll_mul_max: ::std::os::raw::c_long = 9223372036854775807;
extern "C" {
    #[link_name = "\u{1}__a_x"]
    pub static std___ll_mul___a_x: ::std::os::raw::c_long;
}
extern "C" {
    #[link_name = "\u{1}__a_y"]
    pub static std___ll_mul___a_y: ::std::os::raw::c_long;
}
extern "C" {
    #[link_name = "\u{1}value"]
    pub static std___ll_mul_value: ::std::os::raw::c_long;
}
pub const std___ll_div_nan: ::std::os::raw::c_long = -9223372036854775808;
pub const std___ll_div_min: ::std::os::raw::c_long = -9223372036854775807;
pub const std___ll_div_max: ::std::os::raw::c_long = 9223372036854775807;
extern "C" {
    #[link_name = "\u{1}value"]
    pub static std___ll_div_value: ::std::os::raw::c_long;
}
extern "C" {
    #[link_name = "\u{1}__na"]
    pub static std_ratio___na: ::std::os::raw::c_long;
}
extern "C" {
    #[link_name = "\u{1}__da"]
    pub static std_ratio___da: ::std::os::raw::c_long;
}
extern "C" {
    #[link_name = "\u{1}__s"]
    pub static std_ratio___s: ::std::os::raw::c_long;
}
extern "C" {
    #[link_name = "\u{1}__gcd"]
    pub static std_ratio___gcd: ::std::os::raw::c_long;
}
extern "C" {
    #[link_name = "\u{1}num"]
    pub static std_ratio_num: ::std::os::raw::c_long;
}
extern "C" {
    #[link_name = "\u{1}den"]
    pub static std_ratio_den: ::std::os::raw::c_long;
}
extern "C" {
    #[link_name = "\u{1}num"]
    pub static std_num: ::std::os::raw::c_long;
}
extern "C" {
    #[link_name = "\u{1}den"]
    pub static std_den: ::std::os::raw::c_long;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_ratio {
    pub _base: std_false_type,
}
pub type std_atto = u8;
pub type std_femto = u8;
pub type std_pico = u8;
pub type std_nano = u8;
pub type std_micro = u8;
pub type std_milli = u8;
pub type std_centi = u8;
pub type std_deci = u8;
pub type std_deca = u8;
pub type std_hecto = u8;
pub type std_kilo = u8;
pub type std_mega = u8;
pub type std_giga = u8;
pub type std_tera = u8;
pub type std_peta = u8;
pub type std_exa = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___ratio_multiply {
    pub _address: u8,
}
pub type std___ratio_multiply_type = u8;
pub type std_ratio_multiply = std___ratio_multiply;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___ratio_divide {
    pub _address: u8,
}
pub type std___ratio_divide_type = u8;
pub type std_ratio_divide = std___ratio_divide;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___ratio_add {
    pub _address: u8,
}
pub type std___ratio_add_type = std_ratio_multiply;
pub type std_ratio_add = std___ratio_add;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___ratio_subtract {
    pub _address: u8,
}
pub type std___ratio_subtract_type = std_ratio_multiply;
pub type std_ratio_subtract = std___ratio_subtract;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_ratio_equal {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_ratio_not_equal {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_ratio_less {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_ratio_less_equal {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_ratio_greater {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_ratio_greater_equal {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___ratio_gcd {
    pub _address: u8,
}
pub type std___ratio_gcd_type = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_chrono___is_duration {
    pub _base: std_false_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_chrono_treat_as_floating_point {
    pub _base: std_is_floating_point,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_chrono_duration_values {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_chrono_duration<_Rep> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Rep>>,
    pub __rep_: std_chrono_duration_rep<_Rep>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_chrono_duration___no_overflow {
    pub _address: u8,
}
pub type std_chrono_duration___no_overflow_type = u8;
pub type std_chrono_duration_rep<_Rep> = _Rep;
pub type std_chrono_duration_period = [u8; 0usize];
pub type std_chrono_nanoseconds = std_chrono_duration<::std::os::raw::c_longlong>;
pub type std_chrono_microseconds = std_chrono_duration<::std::os::raw::c_longlong>;
pub type std_chrono_milliseconds = std_chrono_duration<::std::os::raw::c_longlong>;
pub type std_chrono_seconds = std_chrono_duration<::std::os::raw::c_longlong>;
pub type std_chrono_minutes = std_chrono_duration<::std::os::raw::c_long>;
pub type std_chrono_hours = std_chrono_duration<::std::os::raw::c_long>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_chrono___duration_eq {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_chrono___duration_lt {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_chrono_time_point<_Duration> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Duration>>,
    pub __d_: std_chrono_time_point_duration<_Duration>,
}
pub type std_chrono_time_point_clock<_Clock> = _Clock;
pub type std_chrono_time_point_duration<_Duration> = _Duration;
pub type std_chrono_time_point_rep = [u8; 0usize];
pub type std_chrono_time_point_period = [u8; 0usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_chrono_steady_clock {
    pub _address: u8,
}
pub type std_chrono_steady_clock_duration = std_chrono_nanoseconds;
pub type std_chrono_steady_clock_rep = rep;
pub type std_chrono_steady_clock_period = u8;
pub type std_chrono_steady_clock_time_point =
    std_chrono_time_point<std_chrono_steady_clock_duration>;
pub const std_chrono_steady_clock_is_steady: bool = true;
const _: () = {
    ["Size of std_chrono_steady_clock"][::std::mem::size_of::<std_chrono_steady_clock>() - 1usize];
    ["Alignment of std_chrono_steady_clock"]
        [::std::mem::align_of::<std_chrono_steady_clock>() - 1usize];
};
extern "C" {
    #[link_name = "\u{1}__ZNSt3__16chrono12steady_clock3nowEv"]
    pub fn std_chrono_steady_clock_now() -> std_chrono_steady_clock_time_point;
}
impl std_chrono_steady_clock {
    #[inline]
    pub unsafe fn now() -> std_chrono_steady_clock_time_point {
        std_chrono_steady_clock_now()
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_chrono_system_clock {
    pub _address: u8,
}
pub type std_chrono_system_clock_duration = std_chrono_microseconds;
pub type std_chrono_system_clock_rep = rep;
pub type std_chrono_system_clock_period = u8;
pub type std_chrono_system_clock_time_point =
    std_chrono_time_point<std_chrono_duration<::std::os::raw::c_longlong>>;
pub const std_chrono_system_clock_is_steady: bool = false;
const _: () = {
    ["Size of std_chrono_system_clock"][::std::mem::size_of::<std_chrono_system_clock>() - 1usize];
    ["Alignment of std_chrono_system_clock"]
        [::std::mem::align_of::<std_chrono_system_clock>() - 1usize];
};
extern "C" {
    #[link_name = "\u{1}__ZNSt3__16chrono12system_clock3nowEv"]
    pub fn std_chrono_system_clock_now() -> std_chrono_system_clock_time_point;
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__16chrono12system_clock9to_time_tERKNS0_10time_pointIS1_NS0_8durationIxNS_5ratioILl1ELl1000000EEEEEEE"]
    pub fn std_chrono_system_clock_to_time_t(
        __t: *const std_chrono_system_clock_time_point,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__16chrono12system_clock11from_time_tEl"]
    pub fn std_chrono_system_clock_from_time_t(
        __t: ::std::os::raw::c_long,
    ) -> std_chrono_system_clock_time_point;
}
impl std_chrono_system_clock {
    #[inline]
    pub unsafe fn now() -> std_chrono_system_clock_time_point {
        std_chrono_system_clock_now()
    }
    #[inline]
    pub unsafe fn to_time_t(
        __t: *const std_chrono_system_clock_time_point,
    ) -> ::std::os::raw::c_long {
        std_chrono_system_clock_to_time_t(__t)
    }
    #[inline]
    pub unsafe fn from_time_t(__t: ::std::os::raw::c_long) -> std_chrono_system_clock_time_point {
        std_chrono_system_clock_from_time_t(__t)
    }
}
pub type std_chrono_high_resolution_clock = std_chrono_steady_clock;
pub const std___libcpp_polling_count: ::std::os::raw::c_int = 64;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___spinning_backoff_policy {
    pub _address: u8,
}
const _: () = {
    ["Size of std___spinning_backoff_policy"]
        [::std::mem::size_of::<std___spinning_backoff_policy>() - 1usize];
    ["Alignment of std___spinning_backoff_policy"]
        [::std::mem::align_of::<std___spinning_backoff_policy>() - 1usize];
};
pub type std___libcpp_mutex_t = pthread_mutex_t;
pub type std___libcpp_recursive_mutex_t = pthread_mutex_t;
pub type std___libcpp_condvar_t = pthread_cond_t;
pub type std___libcpp_exec_once_flag = pthread_once_t;
pub type std___libcpp_thread_id = pthread_t;
pub type std___libcpp_thread_t = pthread_t;
pub type std___libcpp_tls_key = pthread_key_t;
extern "C" {
    #[link_name = "\u{1}__ZNSt3__123__cxx_atomic_notify_oneEPVKv"]
    pub fn std___cxx_atomic_notify_one(arg1: *const ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__123__cxx_atomic_notify_allEPVKv"]
    pub fn std___cxx_atomic_notify_all(arg1: *const ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__123__libcpp_atomic_monitorEPVKv"]
    pub fn std___libcpp_atomic_monitor(
        arg1: *const ::std::os::raw::c_void,
    ) -> std___cxx_contention_t;
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__120__libcpp_atomic_waitEPVKvx"]
    pub fn std___libcpp_atomic_wait(
        arg1: *const ::std::os::raw::c_void,
        arg2: std___cxx_contention_t,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__123__cxx_atomic_notify_oneEPVKNS_17__cxx_atomic_implIxNS_22__cxx_atomic_base_implIxEEEE"]
    pub fn std___cxx_atomic_notify_one1(arg1: *const std___cxx_atomic_contention_t);
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__123__cxx_atomic_notify_allEPVKNS_17__cxx_atomic_implIxNS_22__cxx_atomic_base_implIxEEEE"]
    pub fn std___cxx_atomic_notify_all1(arg1: *const std___cxx_atomic_contention_t);
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__123__libcpp_atomic_monitorEPVKNS_17__cxx_atomic_implIxNS_22__cxx_atomic_base_implIxEEEE"]
    pub fn std___libcpp_atomic_monitor1(
        arg1: *const std___cxx_atomic_contention_t,
    ) -> std___cxx_contention_t;
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__120__libcpp_atomic_waitEPVKNS_17__cxx_atomic_implIxNS_22__cxx_atomic_base_implIxEEEEx"]
    pub fn std___libcpp_atomic_wait1(
        arg1: *const std___cxx_atomic_contention_t,
        arg2: std___cxx_contention_t,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___libcpp_atomic_wait_backoff_impl<_Atp, _Fn> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Atp>>,
    pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Fn>>,
    pub __a: *mut _Atp,
    pub __test_fn: _Fn,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___cxx_atomic_wait_test_fn_impl<_Atp, _Tp> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Atp>>,
    pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Tp>>,
    pub __a: *mut _Atp,
    pub __val: _Tp,
    pub __order: std_memory_order,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_atomic {
    pub _address: u8,
}
pub type std_atomic___base = u8;
pub type std_atomic_value_type<_Tp> = _Tp;
pub type std_atomic_difference_type<_Tp> = std_atomic_value_type<_Tp>;
pub type std_atomic_bool = std_atomic;
pub type std_atomic_char = std_atomic;
pub type std_atomic_schar = std_atomic;
pub type std_atomic_uchar = std_atomic;
pub type std_atomic_short = std_atomic;
pub type std_atomic_ushort = std_atomic;
pub type std_atomic_int = std_atomic;
pub type std_atomic_uint = std_atomic;
pub type std_atomic_long = std_atomic;
pub type std_atomic_ulong = std_atomic;
pub type std_atomic_llong = std_atomic;
pub type std_atomic_ullong = std_atomic;
pub type std_atomic_char16_t = std_atomic;
pub type std_atomic_char32_t = std_atomic;
pub type std_atomic_wchar_t = std_atomic;
pub type std_atomic_int_least8_t = std_atomic;
pub type std_atomic_uint_least8_t = std_atomic;
pub type std_atomic_int_least16_t = std_atomic;
pub type std_atomic_uint_least16_t = std_atomic;
pub type std_atomic_int_least32_t = std_atomic;
pub type std_atomic_uint_least32_t = std_atomic;
pub type std_atomic_int_least64_t = std_atomic;
pub type std_atomic_uint_least64_t = std_atomic;
pub type std_atomic_int_fast8_t = std_atomic;
pub type std_atomic_uint_fast8_t = std_atomic;
pub type std_atomic_int_fast16_t = std_atomic;
pub type std_atomic_uint_fast16_t = std_atomic;
pub type std_atomic_int_fast32_t = std_atomic;
pub type std_atomic_uint_fast32_t = std_atomic;
pub type std_atomic_int_fast64_t = std_atomic;
pub type std_atomic_uint_fast64_t = std_atomic;
pub type std_atomic_int8_t = std_atomic;
pub type std_atomic_uint8_t = std_atomic;
pub type std_atomic_int16_t = std_atomic;
pub type std_atomic_uint16_t = std_atomic;
pub type std_atomic_int32_t = std_atomic;
pub type std_atomic_uint32_t = std_atomic;
pub type std_atomic_int64_t = std_atomic;
pub type std_atomic_uint64_t = std_atomic;
pub type std_atomic_intptr_t = std_atomic;
pub type std_atomic_uintptr_t = std_atomic;
pub type std_atomic_size_t = std_atomic;
pub type std_atomic_ptrdiff_t = std_atomic;
pub type std_atomic_intmax_t = std_atomic;
pub type std_atomic_uintmax_t = std_atomic;
pub type std___libcpp_signed_lock_free = std___conditional_t;
pub type std___libcpp_unsigned_lock_free = std___conditional_t;
pub type std_atomic_signed_lock_free = std_atomic;
pub type std_atomic_unsigned_lock_free = std_atomic;
#[repr(C)]
pub struct std_atomic_flag {
    pub __a_: std___cxx_atomic_impl<std___cxx_atomic_base_impl>,
}
const _: () = {
    ["Size of std_atomic_flag"][::std::mem::size_of::<std_atomic_flag>() - 1usize];
    ["Alignment of std_atomic_flag"][::std::mem::align_of::<std_atomic_flag>() - 1usize];
    ["Offset of field: std_atomic_flag::__a_"]
        [::std::mem::offset_of!(std_atomic_flag, __a_) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_trivial_equality_predicate {
    pub _base: std_false_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___equal_to {
    pub _address: u8,
}
const _: () = {
    ["Size of std___equal_to"][::std::mem::size_of::<std___equal_to>() - 1usize];
    ["Alignment of std___equal_to"][::std::mem::align_of::<std___equal_to>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___less {
    pub _address: u8,
}
const _: () = {
    ["Size of template specialization: std___less_open0_void_void_close0"]
        [::std::mem::size_of::<std___less>() - 1usize];
    ["Align of template specialization: std___less_open0_void_void_close0"]
        [::std::mem::align_of::<std___less>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___libcpp_is_signed_integer {
    pub _base: std_false_type,
}
const _: () = {
    ["Size of template specialization: std___libcpp_is_signed_integer_open0_signed_char_close0"]
        [::std::mem::size_of::<std___libcpp_is_signed_integer>() - 1usize];
    ["Align of template specialization: std___libcpp_is_signed_integer_open0_signed_char_close0"]
        [::std::mem::align_of::<std___libcpp_is_signed_integer>() - 1usize];
};
const _: () = {
    ["Size of template specialization: std___libcpp_is_signed_integer_open0_short_close0"]
        [::std::mem::size_of::<std___libcpp_is_signed_integer>() - 1usize];
    ["Align of template specialization: std___libcpp_is_signed_integer_open0_short_close0"]
        [::std::mem::align_of::<std___libcpp_is_signed_integer>() - 1usize];
};
const _: () = {
    ["Size of template specialization: std___libcpp_is_signed_integer_open0_int_close0"]
        [::std::mem::size_of::<std___libcpp_is_signed_integer>() - 1usize];
    ["Align of template specialization: std___libcpp_is_signed_integer_open0_int_close0"]
        [::std::mem::align_of::<std___libcpp_is_signed_integer>() - 1usize];
};
const _: () = {
    ["Size of template specialization: std___libcpp_is_signed_integer_open0_long_close0"]
        [::std::mem::size_of::<std___libcpp_is_signed_integer>() - 1usize];
    ["Align of template specialization: std___libcpp_is_signed_integer_open0_long_close0"]
        [::std::mem::align_of::<std___libcpp_is_signed_integer>() - 1usize];
};
const _: () = {
    ["Size of template specialization: std___libcpp_is_signed_integer_open0_long_long_close0"]
        [::std::mem::size_of::<std___libcpp_is_signed_integer>() - 1usize];
    ["Align of template specialization: std___libcpp_is_signed_integer_open0_long_long_close0"]
        [::std::mem::align_of::<std___libcpp_is_signed_integer>() - 1usize];
};
const _: () = {
    ["Size of template specialization: std___libcpp_is_signed_integer_open0___int128_close0"]
        [::std::mem::size_of::<std___libcpp_is_signed_integer>() - 1usize];
    ["Align of template specialization: std___libcpp_is_signed_integer_open0___int128_close0"]
        [::std::mem::align_of::<std___libcpp_is_signed_integer>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___libcpp_is_unsigned_integer {
    pub _base: std_false_type,
}
const _: () = {
    ["Size of template specialization: std___libcpp_is_unsigned_integer_open0_unsigned_char_close0"] [:: std :: mem :: size_of :: < std___libcpp_is_unsigned_integer > () - 1usize] ;
    ["Align of template specialization: std___libcpp_is_unsigned_integer_open0_unsigned_char_close0"] [:: std :: mem :: align_of :: < std___libcpp_is_unsigned_integer > () - 1usize] ;
};
const _: () = {
    ["Size of template specialization: std___libcpp_is_unsigned_integer_open0_unsigned_short_close0"] [:: std :: mem :: size_of :: < std___libcpp_is_unsigned_integer > () - 1usize] ;
    ["Align of template specialization: std___libcpp_is_unsigned_integer_open0_unsigned_short_close0"] [:: std :: mem :: align_of :: < std___libcpp_is_unsigned_integer > () - 1usize] ;
};
const _: () = {
    ["Size of template specialization: std___libcpp_is_unsigned_integer_open0_unsigned_int_close0"] [:: std :: mem :: size_of :: < std___libcpp_is_unsigned_integer > () - 1usize] ;
    ["Align of template specialization: std___libcpp_is_unsigned_integer_open0_unsigned_int_close0"] [:: std :: mem :: align_of :: < std___libcpp_is_unsigned_integer > () - 1usize] ;
};
const _: () = {
    ["Size of template specialization: std___libcpp_is_unsigned_integer_open0_unsigned_long_close0"] [:: std :: mem :: size_of :: < std___libcpp_is_unsigned_integer > () - 1usize] ;
    ["Align of template specialization: std___libcpp_is_unsigned_integer_open0_unsigned_long_close0"] [:: std :: mem :: align_of :: < std___libcpp_is_unsigned_integer > () - 1usize] ;
};
const _: () = {
    ["Size of template specialization: std___libcpp_is_unsigned_integer_open0_unsigned_long_long_close0"] [:: std :: mem :: size_of :: < std___libcpp_is_unsigned_integer > () - 1usize] ;
    ["Align of template specialization: std___libcpp_is_unsigned_integer_open0_unsigned_long_long_close0"] [:: std :: mem :: align_of :: < std___libcpp_is_unsigned_integer > () - 1usize] ;
};
const _: () = {
    ["Size of template specialization: std___libcpp_is_unsigned_integer_open0_unsigned___int128_close0"] [:: std :: mem :: size_of :: < std___libcpp_is_unsigned_integer > () - 1usize] ;
    ["Align of template specialization: std___libcpp_is_unsigned_integer_open0_unsigned___int128_close0"] [:: std :: mem :: align_of :: < std___libcpp_is_unsigned_integer > () - 1usize] ;
};
pub type std__IsValidExpansion = u8;
pub type std___test_for_primary_template = std___enable_if_t;
pub type std___is_primary_template = std__IsValidExpansion;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_input_iterator_tag {
    pub _address: u8,
}
const _: () = {
    ["Size of std_input_iterator_tag"][::std::mem::size_of::<std_input_iterator_tag>() - 1usize];
    ["Alignment of std_input_iterator_tag"]
        [::std::mem::align_of::<std_input_iterator_tag>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_output_iterator_tag {
    pub _address: u8,
}
const _: () = {
    ["Size of std_output_iterator_tag"][::std::mem::size_of::<std_output_iterator_tag>() - 1usize];
    ["Alignment of std_output_iterator_tag"]
        [::std::mem::align_of::<std_output_iterator_tag>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_forward_iterator_tag {
    pub _address: u8,
}
const _: () = {
    ["Size of std_forward_iterator_tag"]
        [::std::mem::size_of::<std_forward_iterator_tag>() - 1usize];
    ["Alignment of std_forward_iterator_tag"]
        [::std::mem::align_of::<std_forward_iterator_tag>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_bidirectional_iterator_tag {
    pub _address: u8,
}
const _: () = {
    ["Size of std_bidirectional_iterator_tag"]
        [::std::mem::size_of::<std_bidirectional_iterator_tag>() - 1usize];
    ["Alignment of std_bidirectional_iterator_tag"]
        [::std::mem::align_of::<std_bidirectional_iterator_tag>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_random_access_iterator_tag {
    pub _address: u8,
}
const _: () = {
    ["Size of std_random_access_iterator_tag"]
        [::std::mem::size_of::<std_random_access_iterator_tag>() - 1usize];
    ["Alignment of std_random_access_iterator_tag"]
        [::std::mem::align_of::<std_random_access_iterator_tag>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___iter_traits_cache {
    pub _address: u8,
}
pub type std___iter_traits_cache_type = std__If;
pub type std__ITER_TRAITS = std___iter_traits_cache;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___iter_concept_concept_test {
    pub _address: u8,
}
pub type std___iter_concept_concept_test__Apply = std__ITER_TRAITS;
const _: () = {
    ["Size of std___iter_concept_concept_test"]
        [::std::mem::size_of::<std___iter_concept_concept_test>() - 1usize];
    ["Alignment of std___iter_concept_concept_test"]
        [::std::mem::align_of::<std___iter_concept_concept_test>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___iter_concept_category_test {
    pub _address: u8,
}
pub type std___iter_concept_category_test__Apply = std__ITER_TRAITS;
const _: () = {
    ["Size of std___iter_concept_category_test"]
        [::std::mem::size_of::<std___iter_concept_category_test>() - 1usize];
    ["Alignment of std___iter_concept_category_test"]
        [::std::mem::align_of::<std___iter_concept_category_test>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___iter_concept_random_fallback {
    pub _address: u8,
}
pub type std___iter_concept_random_fallback__Apply = std___enable_if_t;
const _: () = {
    ["Size of std___iter_concept_random_fallback"]
        [::std::mem::size_of::<std___iter_concept_random_fallback>() - 1usize];
    ["Alignment of std___iter_concept_random_fallback"]
        [::std::mem::align_of::<std___iter_concept_random_fallback>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___test_iter_concept<_Tester> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Tester>>,
    pub _base_1: _Tester,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___iter_concept_cache {
    pub _address: u8,
}
pub type std___iter_concept_cache_type = std__Or;
pub type std__ITER_CONCEPT = std___iter_concept_cache;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___has_iterator_typedefs {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___has_iterator_category {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___has_iterator_concept {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_iterator_traits {
    pub _address: u8,
}
pub type std_iterator_traits___primary_template = std_iterator_traits;
pub type std___has_input_iterator_category = u8;
pub type std___has_forward_iterator_category = u8;
pub type std___has_bidirectional_iterator_category = u8;
pub type std___has_random_access_iterator_category = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___libcpp_is_contiguous_iterator {
    pub _base: std_false_type,
}
pub type std___has_exactly_input_iterator_category = u8;
pub type std___has_exactly_forward_iterator_category = u8;
pub type std___has_exactly_bidirectional_iterator_category = u8;
pub type std___iter_value_type = std_iterator_traits;
pub type std___iter_key_type = std___remove_const_t<std_iterator_traits>;
pub type std___iter_mapped_type = std_iterator_traits;
pub type std___iter_to_alloc_type = std_pair<std_add_const, std_iterator_traits>;
pub type std___iterator_category_type = std_iterator_traits;
pub type std___iterator_pointer_type = std_iterator_traits;
pub type std___iter_diff_t = std_iterator_traits;
pub type std___iter_reference = std_iterator_traits;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___has_element_type {
    pub _base: std_false_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___has_difference_type {
    pub _base: std_false_type,
}
pub type std___pointer_traits_difference_type_type = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___has_rebind {
    pub _address: u8,
}
pub type std___pointer_traits_rebind_type = [u8; 0usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_pointer_traits {
    pub _address: u8,
}
pub type std_pointer_traits_pointer<_Ptr> = _Ptr;
pub type std_pointer_traits_element_type = u8;
pub type std_pointer_traits_difference_type = u8;
pub type std_pointer_traits_rebind = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_pointer_traits___nat {
    pub _address: u8,
}
pub type std___rebind_pointer_t = std_pointer_traits;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__HasToAddress {
    pub _base: std_false_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__HasArrow {
    pub _base: std_false_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__IsFancyPointer {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___to_address_helper {
    pub _address: u8,
}
pub type std___sfinae_underlying_type_type = std_underlying_type;
pub type std___sfinae_underlying_type___promoted_type = std___sfinae_underlying_type_type;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__IterOps {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__ClassicAlgPolicy {
    pub _address: u8,
}
const _: () = {
    ["Size of std__ClassicAlgPolicy"][::std::mem::size_of::<std__ClassicAlgPolicy>() - 1usize];
    ["Alignment of std__ClassicAlgPolicy"]
        [::std::mem::align_of::<std__ClassicAlgPolicy>() - 1usize];
};
const _: () = {
    ["Size of template specialization: std__IterOps_open0_std__ClassicAlgPolicy_close0"]
        [::std::mem::size_of::<std__IterOps>() - 1usize];
    ["Align of template specialization: std__IterOps_open0_std__ClassicAlgPolicy_close0"]
        [::std::mem::align_of::<std__IterOps>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_identity {
    pub _base: std_false_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___identity {
    pub _address: u8,
}
pub type std___identity_is_transparent = ::std::os::raw::c_void;
const _: () = {
    ["Size of std___identity"][::std::mem::size_of::<std___identity>() - 1usize];
    ["Alignment of std___identity"][::std::mem::align_of::<std___identity>() - 1usize];
};
const _: () = {
    ["Size of template specialization: std___is_identity_open0_std___identity_close0"]
        [::std::mem::size_of::<std___is_identity>() - 1usize];
    ["Align of template specialization: std___is_identity_open0_std___identity_close0"]
        [::std::mem::align_of::<std___is_identity>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_binary_function {
    pub _address: u8,
}
pub type std_binary_function_first_argument_type<_Arg1> = _Arg1;
pub type std_binary_function_second_argument_type<_Arg2> = _Arg2;
pub type std_binary_function_result_type<_Result> = _Result;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___binary_function_keep_layout_base {
    pub _address: u8,
}
pub type std___binary_function_keep_layout_base_first_argument_type<_Arg1> = _Arg1;
pub type std___binary_function_keep_layout_base_second_argument_type<_Arg2> = _Arg2;
pub type std___binary_function_keep_layout_base_result_type<_Result> = _Result;
pub type std___binary_function = std_binary_function;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_binary_negate<_Predicate> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Predicate>>,
    pub __pred_: _Predicate,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_unary_function {
    pub _address: u8,
}
pub type std_unary_function_argument_type<_Arg> = _Arg;
pub type std_unary_function_result_type<_Result> = _Result;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___unary_function_keep_layout_base {
    pub _address: u8,
}
pub type std___unary_function_keep_layout_base_argument_type<_Arg> = _Arg;
pub type std___unary_function_keep_layout_base_result_type<_Result> = _Result;
pub type std___unary_function = std_unary_function;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___has_result_type {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___derives_from_unary_function {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___derives_from_unary_function___two {
    pub __lx: ::std::os::raw::c_char,
    pub __lxx: ::std::os::raw::c_char,
}
pub type std___derives_from_unary_function_type<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___derives_from_binary_function {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___derives_from_binary_function___two {
    pub __lx: ::std::os::raw::c_char,
    pub __lxx: ::std::os::raw::c_char,
}
pub type std___derives_from_binary_function_type<_Tp> = _Tp;
pub type std___weak_result_type_imp_result_type = [u8; 0usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___weak_result_type {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___invoke_return {
    pub _address: u8,
}
pub type std___invoke_return_type<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___has_allocator_type {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_uses_allocator {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_allocator_arg_t {
    pub _address: u8,
}
const _: () = {
    ["Size of std_allocator_arg_t"][::std::mem::size_of::<std_allocator_arg_t>() - 1usize];
    ["Alignment of std_allocator_arg_t"][::std::mem::align_of::<std_allocator_arg_t>() - 1usize];
};
extern "C" {
    #[link_name = "\u{1}__ZNSt3__1L13allocator_argE"]
    pub static std_allocator_arg: std_allocator_arg_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___uses_alloc_ctor_imp {
    pub _address: u8,
}
pub type std___uses_alloc_ctor_imp__RawAlloc = std___remove_cvref_t<_Tp>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___uses_alloc_ctor {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___all_default_constructible {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___tuple_impl {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_tuple {
    pub __base_: std_tuple__BaseT,
}
pub type std_tuple__BaseT = std___tuple_impl;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_tuple__IsThisTuple {
    pub _base: std_false_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_tuple__EnableUTypesCtor {
    pub _base: std__And<_Pred>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_tuple__EnableCtorFromUTypesTuple {
    pub _base: std_false_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_tuple__CtorPredicateFromPair {
    pub _base: std_false_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_tuple__EnableCtorFromPair {
    pub _base: std_tuple__CtorPredicateFromPair,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_tuple__NothrowConstructibleFromPair {
    pub _base: std_tuple__CtorPredicateFromPair,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_tuple__BothImplicitlyConvertible {
    pub _base: std_false_type,
}
const _: () = {
    ["Size of template specialization: std_tuple_open0_close0"]
        [::std::mem::size_of::<std_tuple>() - 1usize];
    ["Align of template specialization: std_tuple_open0_close0"]
        [::std::mem::align_of::<std_tuple>() - 1usize];
};
extern "C" {
    #[link_name = "\u{1}__ZNSt3__113__find_detailL11__not_foundE"]
    pub static std___find_detail___not_found: ::std::os::raw::c_ulong;
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__113__find_detailL11__ambiguousE"]
    pub static std___find_detail___ambiguous: ::std::os::raw::c_ulong;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___find_detail___find_exactly_one_checked {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___find_exactly_one_t {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___ignore_t {
    pub _address: u8,
}
const _: () = {
    ["Size of template specialization: std___ignore_t_open0_unsigned_char_close0"]
        [::std::mem::size_of::<std___ignore_t>() - 1usize];
    ["Align of template specialization: std___ignore_t_open0_unsigned_char_close0"]
        [::std::mem::align_of::<std___ignore_t>() - 1usize];
};
extern "C" {
    #[link_name = "\u{1}__ZNSt3__112_GLOBAL__N_16ignoreE"]
    pub static std__bindgen_mod_id_38667_ignore: std___ignore_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___tuple_cat_type {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___tuple_cat_return {
    pub _address: u8,
}
const _: () = {
    ["Size of template specialization: std___tuple_cat_return_open0_close0"]
        [::std::mem::size_of::<std___tuple_cat_return>() - 1usize];
    ["Align of template specialization: std___tuple_cat_return_open0_close0"]
        [::std::mem::align_of::<std___tuple_cat_return>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___tuple_cat_return_ref_imp {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___tuple_cat_return_ref {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___tuple_cat {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_bind_expression {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_placeholder {
    pub _address: u8,
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__112placeholders2_1E"]
    pub static std_placeholders__1: u8;
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__112placeholders2_2E"]
    pub static std_placeholders__2: u8;
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__112placeholders2_3E"]
    pub static std_placeholders__3: u8;
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__112placeholders2_4E"]
    pub static std_placeholders__4: u8;
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__112placeholders2_5E"]
    pub static std_placeholders__5: u8;
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__112placeholders2_6E"]
    pub static std_placeholders__6: u8;
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__112placeholders2_7E"]
    pub static std_placeholders__7: u8;
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__112placeholders2_8E"]
    pub static std_placeholders__8: u8;
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__112placeholders2_9E"]
    pub static std_placeholders__9: u8;
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__112placeholders3_10E"]
    pub static std_placeholders__10: u8;
}
pub type std___mu_return_invokable_type = std___nat;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___mu_return {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_valid_bind_return {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___bind<_Fp> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Fp>>,
    pub __f_: std___bind__Fd<_Fp>,
    pub __bound_args_: std___bind__Td,
}
pub type std___bind__Fd<_Fp> = std___decay_t<_Fp>;
pub type std___bind__Td = std_tuple;
pub type std___bind___indices = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___bind_r<_Fp> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Fp>>,
    pub _base: std___bind<_Fp>,
}
pub type std___bind_r_base<_Fp> = std___bind<_Fp>;
pub type std___bind_r__Fd<_Fp> = std___bind_r_base<_Fp>;
pub type std___bind_r__Td<_Fp> = std___bind_r_base<_Fp>;
pub type std___bind_r_result_type<_Rp> = _Rp;
#[repr(C)]
pub struct std_binder1st<_Operation> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Operation>>,
    pub op: _Operation,
    pub value: [u8; 0usize],
}
#[repr(C)]
pub struct std_binder2nd<_Operation> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Operation>>,
    pub op: _Operation,
    pub value: [u8; 0usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__PairT {
    pub first: ::std::os::raw::c_ulong,
    pub second: ::std::os::raw::c_ulong,
}
const _: () = {
    ["Size of std__PairT"][::std::mem::size_of::<std__PairT>() - 16usize];
    ["Alignment of std__PairT"][::std::mem::align_of::<std__PairT>() - 8usize];
    ["Offset of field: std__PairT::first"][::std::mem::offset_of!(std__PairT, first) - 0usize];
    ["Offset of field: std__PairT::second"][::std::mem::offset_of!(std__PairT, second) - 8usize];
};
const _: () = {
    ["Size of template specialization: std_hash_open0_bool__close0"]
        [::std::mem::size_of::<std_hash>() - 1usize];
    ["Align of template specialization: std_hash_open0_bool__close0"]
        [::std::mem::align_of::<std_hash>() - 1usize];
};
const _: () = {
    ["Size of template specialization: std_hash_open0_char_close0"]
        [::std::mem::size_of::<std_hash>() - 1usize];
    ["Align of template specialization: std_hash_open0_char_close0"]
        [::std::mem::align_of::<std_hash>() - 1usize];
};
const _: () = {
    ["Size of template specialization: std_hash_open0_signed_char_close0"]
        [::std::mem::size_of::<std_hash>() - 1usize];
    ["Align of template specialization: std_hash_open0_signed_char_close0"]
        [::std::mem::align_of::<std_hash>() - 1usize];
};
const _: () = {
    ["Size of template specialization: std_hash_open0_unsigned_char_close0"]
        [::std::mem::size_of::<std_hash>() - 1usize];
    ["Align of template specialization: std_hash_open0_unsigned_char_close0"]
        [::std::mem::align_of::<std_hash>() - 1usize];
};
const _: () = {
    ["Size of template specialization: std_hash_open0_char16_t_close0"]
        [::std::mem::size_of::<std_hash>() - 1usize];
    ["Align of template specialization: std_hash_open0_char16_t_close0"]
        [::std::mem::align_of::<std_hash>() - 1usize];
};
const _: () = {
    ["Size of template specialization: std_hash_open0_char32_t_close0"]
        [::std::mem::size_of::<std_hash>() - 1usize];
    ["Align of template specialization: std_hash_open0_char32_t_close0"]
        [::std::mem::align_of::<std_hash>() - 1usize];
};
const _: () = {
    ["Size of template specialization: std_hash_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_hash>() - 1usize];
    ["Align of template specialization: std_hash_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_hash>() - 1usize];
};
const _: () = {
    ["Size of template specialization: std_hash_open0_short_close0"]
        [::std::mem::size_of::<std_hash>() - 1usize];
    ["Align of template specialization: std_hash_open0_short_close0"]
        [::std::mem::align_of::<std_hash>() - 1usize];
};
const _: () = {
    ["Size of template specialization: std_hash_open0_unsigned_short_close0"]
        [::std::mem::size_of::<std_hash>() - 1usize];
    ["Align of template specialization: std_hash_open0_unsigned_short_close0"]
        [::std::mem::align_of::<std_hash>() - 1usize];
};
const _: () = {
    ["Size of template specialization: std_hash_open0_int_close0"]
        [::std::mem::size_of::<std_hash>() - 1usize];
    ["Align of template specialization: std_hash_open0_int_close0"]
        [::std::mem::align_of::<std_hash>() - 1usize];
};
const _: () = {
    ["Size of template specialization: std_hash_open0_unsigned_int_close0"]
        [::std::mem::size_of::<std_hash>() - 1usize];
    ["Align of template specialization: std_hash_open0_unsigned_int_close0"]
        [::std::mem::align_of::<std_hash>() - 1usize];
};
const _: () = {
    ["Size of template specialization: std_hash_open0_long_close0"]
        [::std::mem::size_of::<std_hash>() - 1usize];
    ["Align of template specialization: std_hash_open0_long_close0"]
        [::std::mem::align_of::<std_hash>() - 1usize];
};
const _: () = {
    ["Size of template specialization: std_hash_open0_unsigned_long_close0"]
        [::std::mem::size_of::<std_hash>() - 1usize];
    ["Align of template specialization: std_hash_open0_unsigned_long_close0"]
        [::std::mem::align_of::<std_hash>() - 1usize];
};
const _: () = {
    ["Size of template specialization: std_hash_open0_long_long_close0"]
        [::std::mem::size_of::<std_hash>() - 1usize];
    ["Align of template specialization: std_hash_open0_long_long_close0"]
        [::std::mem::align_of::<std_hash>() - 1usize];
};
const _: () = {
    ["Size of template specialization: std_hash_open0_unsigned_long_long_close0"]
        [::std::mem::size_of::<std_hash>() - 1usize];
    ["Align of template specialization: std_hash_open0_unsigned_long_long_close0"]
        [::std::mem::align_of::<std_hash>() - 1usize];
};
const _: () = {
    ["Size of template specialization: std_hash_open0___int128_close0"]
        [::std::mem::size_of::<std_hash>() - 1usize];
    ["Align of template specialization: std_hash_open0___int128_close0"]
        [::std::mem::align_of::<std_hash>() - 1usize];
};
const _: () = {
    ["Size of template specialization: std_hash_open0_unsigned___int128_close0"]
        [::std::mem::size_of::<std_hash>() - 1usize];
    ["Align of template specialization: std_hash_open0_unsigned___int128_close0"]
        [::std::mem::align_of::<std_hash>() - 1usize];
};
const _: () = {
    ["Size of template specialization: std_hash_open0_float_close0"]
        [::std::mem::size_of::<std_hash>() - 1usize];
    ["Align of template specialization: std_hash_open0_float_close0"]
        [::std::mem::align_of::<std_hash>() - 1usize];
};
const _: () = {
    ["Size of template specialization: std_hash_open0_double_close0"]
        [::std::mem::size_of::<std_hash>() - 1usize];
    ["Align of template specialization: std_hash_open0_double_close0"]
        [::std::mem::align_of::<std_hash>() - 1usize];
};
const _: () = {
    ["Size of template specialization: std_hash_open0_long_double_close0"]
        [::std::mem::size_of::<std_hash>() - 1usize];
    ["Align of template specialization: std_hash_open0_long_double_close0"]
        [::std::mem::align_of::<std_hash>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_hash {
    pub _address: u8,
}
pub type std___check_hash_requirements = u8;
pub type std___has_enabled_hash = u8;
pub type std___enable_hash_helper<_Type> = _Type;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_trivial_plus_operation {
    pub _base: std_false_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_plus {
    pub _address: u8,
}
pub type std_plus___result_type<_Tp> = _Tp;
const _: () = {
    ["Size of template specialization: std_plus_open0_void_close0"]
        [::std::mem::size_of::<std_plus>() - 1usize];
    ["Align of template specialization: std_plus_open0_void_close0"]
        [::std::mem::align_of::<std_plus>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_minus {
    pub _address: u8,
}
pub type std_minus___result_type<_Tp> = _Tp;
const _: () = {
    ["Size of template specialization: std_minus_open0_void_close0"]
        [::std::mem::size_of::<std_minus>() - 1usize];
    ["Align of template specialization: std_minus_open0_void_close0"]
        [::std::mem::align_of::<std_minus>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_multiplies {
    pub _address: u8,
}
pub type std_multiplies___result_type<_Tp> = _Tp;
const _: () = {
    ["Size of template specialization: std_multiplies_open0_void_close0"]
        [::std::mem::size_of::<std_multiplies>() - 1usize];
    ["Align of template specialization: std_multiplies_open0_void_close0"]
        [::std::mem::align_of::<std_multiplies>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_divides {
    pub _address: u8,
}
pub type std_divides___result_type<_Tp> = _Tp;
const _: () = {
    ["Size of template specialization: std_divides_open0_void_close0"]
        [::std::mem::size_of::<std_divides>() - 1usize];
    ["Align of template specialization: std_divides_open0_void_close0"]
        [::std::mem::align_of::<std_divides>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_modulus {
    pub _address: u8,
}
pub type std_modulus___result_type<_Tp> = _Tp;
const _: () = {
    ["Size of template specialization: std_modulus_open0_void_close0"]
        [::std::mem::size_of::<std_modulus>() - 1usize];
    ["Align of template specialization: std_modulus_open0_void_close0"]
        [::std::mem::align_of::<std_modulus>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_negate {
    pub _address: u8,
}
pub type std_negate___result_type<_Tp> = _Tp;
const _: () = {
    ["Size of template specialization: std_negate_open0_void_close0"]
        [::std::mem::size_of::<std_negate>() - 1usize];
    ["Align of template specialization: std_negate_open0_void_close0"]
        [::std::mem::align_of::<std_negate>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_bit_and {
    pub _address: u8,
}
pub type std_bit_and___result_type<_Tp> = _Tp;
const _: () = {
    ["Size of template specialization: std_bit_and_open0_void_close0"]
        [::std::mem::size_of::<std_bit_and>() - 1usize];
    ["Align of template specialization: std_bit_and_open0_void_close0"]
        [::std::mem::align_of::<std_bit_and>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_bit_not {
    pub _address: u8,
}
const _: () = {
    ["Size of template specialization: std_bit_not_open0_void_close0"]
        [::std::mem::size_of::<std_bit_not>() - 1usize];
    ["Align of template specialization: std_bit_not_open0_void_close0"]
        [::std::mem::align_of::<std_bit_not>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_bit_or {
    pub _address: u8,
}
pub type std_bit_or___result_type<_Tp> = _Tp;
const _: () = {
    ["Size of template specialization: std_bit_or_open0_void_close0"]
        [::std::mem::size_of::<std_bit_or>() - 1usize];
    ["Align of template specialization: std_bit_or_open0_void_close0"]
        [::std::mem::align_of::<std_bit_or>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_bit_xor {
    pub _address: u8,
}
pub type std_bit_xor___result_type<_Tp> = _Tp;
const _: () = {
    ["Size of template specialization: std_bit_xor_open0_void_close0"]
        [::std::mem::size_of::<std_bit_xor>() - 1usize];
    ["Align of template specialization: std_bit_xor_open0_void_close0"]
        [::std::mem::align_of::<std_bit_xor>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_equal_to {
    pub _address: u8,
}
pub type std_equal_to___result_type = bool;
const _: () = {
    ["Size of template specialization: std_equal_to_open0_void_close0"]
        [::std::mem::size_of::<std_equal_to>() - 1usize];
    ["Align of template specialization: std_equal_to_open0_void_close0"]
        [::std::mem::align_of::<std_equal_to>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_not_equal_to {
    pub _address: u8,
}
pub type std_not_equal_to___result_type = bool;
const _: () = {
    ["Size of template specialization: std_not_equal_to_open0_void_close0"]
        [::std::mem::size_of::<std_not_equal_to>() - 1usize];
    ["Align of template specialization: std_not_equal_to_open0_void_close0"]
        [::std::mem::align_of::<std_not_equal_to>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_less {
    pub _address: u8,
}
pub type std_less___result_type = bool;
const _: () = {
    ["Size of template specialization: std_less_open0_void_close0"]
        [::std::mem::size_of::<std_less>() - 1usize];
    ["Align of template specialization: std_less_open0_void_close0"]
        [::std::mem::align_of::<std_less>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_less_equal {
    pub _address: u8,
}
pub type std_less_equal___result_type = bool;
const _: () = {
    ["Size of template specialization: std_less_equal_open0_void_close0"]
        [::std::mem::size_of::<std_less_equal>() - 1usize];
    ["Align of template specialization: std_less_equal_open0_void_close0"]
        [::std::mem::align_of::<std_less_equal>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_greater_equal {
    pub _address: u8,
}
pub type std_greater_equal___result_type = bool;
const _: () = {
    ["Size of template specialization: std_greater_equal_open0_void_close0"]
        [::std::mem::size_of::<std_greater_equal>() - 1usize];
    ["Align of template specialization: std_greater_equal_open0_void_close0"]
        [::std::mem::align_of::<std_greater_equal>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_greater {
    pub _address: u8,
}
pub type std_greater___result_type = bool;
const _: () = {
    ["Size of template specialization: std_greater_open0_void_close0"]
        [::std::mem::size_of::<std_greater>() - 1usize];
    ["Align of template specialization: std_greater_open0_void_close0"]
        [::std::mem::align_of::<std_greater>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_logical_and {
    pub _address: u8,
}
pub type std_logical_and___result_type = bool;
const _: () = {
    ["Size of template specialization: std_logical_and_open0_void_close0"]
        [::std::mem::size_of::<std_logical_and>() - 1usize];
    ["Align of template specialization: std_logical_and_open0_void_close0"]
        [::std::mem::align_of::<std_logical_and>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_logical_not {
    pub _address: u8,
}
pub type std_logical_not___result_type = bool;
const _: () = {
    ["Size of template specialization: std_logical_not_open0_void_close0"]
        [::std::mem::size_of::<std_logical_not>() - 1usize];
    ["Align of template specialization: std_logical_not_open0_void_close0"]
        [::std::mem::align_of::<std_logical_not>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_logical_or {
    pub _address: u8,
}
pub type std_logical_or___result_type = bool;
const _: () = {
    ["Size of template specialization: std_logical_or_open0_void_close0"]
        [::std::mem::size_of::<std_logical_or>() - 1usize];
    ["Align of template specialization: std_logical_or_open0_void_close0"]
        [::std::mem::align_of::<std_logical_or>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_reference_wrapper<_Tp> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Tp>>,
    pub __f_: *mut std_reference_wrapper_type<_Tp>,
}
pub type std_reference_wrapper_type<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___has_pointer {
    pub _base: std_false_type,
}
pub type std___pointer_type = [u8; 0usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___has_const_pointer {
    pub _base: std_false_type,
}
pub type std___const_pointer_type = [u8; 0usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___has_void_pointer {
    pub _base: std_false_type,
}
pub type std___void_pointer_type = [u8; 0usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___has_const_void_pointer {
    pub _base: std_false_type,
}
pub type std___const_void_pointer_type = [u8; 0usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___has_size_type {
    pub _base: std_false_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___has_alloc_traits_difference_type {
    pub _base: std_false_type,
}
pub type std___alloc_traits_difference_type_type = std_pointer_traits;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___has_propagate_on_container_copy_assignment {
    pub _base: std_false_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___has_propagate_on_container_move_assignment {
    pub _base: std_false_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___has_propagate_on_container_swap {
    pub _base: std_false_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___has_is_always_equal {
    pub _base: std_false_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___has_rebind_other {
    pub _base: std_false_type,
}
pub type std___allocator_traits_rebind_type = [u8; 0usize];
pub type std___allocator_traits_rebind_t = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___has_allocate_hint {
    pub _base: std_false_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___has_construct_impl {
    pub _base: std_false_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___has_construct {
    pub _base: std___has_construct_impl,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___has_destroy {
    pub _base: std_false_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___has_max_size {
    pub _base: std_false_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___has_select_on_container_copy_construction {
    pub _base: std_false_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_allocator_traits {
    pub _address: u8,
}
pub type std_allocator_traits_allocator_type<_Alloc> = _Alloc;
pub type std_allocator_traits_value_type = [u8; 0usize];
pub type std_allocator_traits_pointer = [u8; 0usize];
pub type std_allocator_traits_const_pointer = [u8; 0usize];
pub type std_allocator_traits_void_pointer = [u8; 0usize];
pub type std_allocator_traits_const_void_pointer = [u8; 0usize];
pub type std_allocator_traits_difference_type = [u8; 0usize];
pub type std_allocator_traits_size_type = [u8; 0usize];
pub type std_allocator_traits_propagate_on_container_copy_assignment = u8;
pub type std_allocator_traits_propagate_on_container_move_assignment = u8;
pub type std_allocator_traits_propagate_on_container_swap = u8;
pub type std_allocator_traits_is_always_equal = u8;
pub type std_allocator_traits_rebind_alloc = std___allocator_traits_rebind_t;
pub type std_allocator_traits_rebind_traits = std_allocator_traits;
pub type std___rebind_alloc = [u8; 0usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_default_allocator {
    pub _base: std_false_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_cpp17_move_insertable {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_cpp17_copy_insertable {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug)]
pub struct std___allocation_guard<_Alloc> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Alloc>>,
    pub __alloc_: _Alloc,
    pub __n_: std___allocation_guard__Size,
    pub __ptr_: std___allocation_guard__Pointer,
}
pub type std___allocation_guard__Pointer = std_allocator_traits;
pub type std___allocation_guard__Size = std_allocator_traits;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___allocation_result<_Pointer> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Pointer>>,
    pub ptr: _Pointer,
    pub count: ::std::os::raw::c_ulong,
}
const _: () = {
    ["Size of template specialization: std_allocator_open0_void_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_void_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
const _: () = {
    ["Size of template specialization: std_allocator_open0_const_void_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_const_void_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_allocator {
    pub _address: u8,
}
pub type std_allocator_size_type = ::std::os::raw::c_ulong;
pub type std_allocator_difference_type = ::std::os::raw::c_long;
pub type std_allocator_value_type<_Tp> = _Tp;
pub type std_allocator_propagate_on_container_move_assignment = std_true_type;
pub type std_allocator_is_always_equal = std_true_type;
pub type std_allocator_pointer<_Tp> = *mut _Tp;
pub type std_allocator_const_pointer<_Tp> = *const _Tp;
pub type std_allocator_reference<_Tp> = *mut _Tp;
pub type std_allocator_const_reference<_Tp> = *const _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_allocator_rebind {
    pub _address: u8,
}
pub type std_allocator_rebind_other = std_allocator;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___allocator_destructor<_Alloc> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Alloc>>,
    pub __alloc_: *mut _Alloc,
    pub __s_: std___allocator_destructor_size_type,
}
pub type std___allocator_destructor___alloc_traits = std_allocator_traits;
pub type std___allocator_destructor_pointer = std___allocator_destructor___alloc_traits;
pub type std___allocator_destructor_size_type = std___allocator_destructor___alloc_traits;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_auto_ptr_ref<_Tp> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Tp>>,
    pub __ptr_: *mut _Tp,
}
#[repr(C)]
#[derive(Debug)]
pub struct std_auto_ptr<_Tp> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Tp>>,
    pub __ptr_: *mut _Tp,
}
pub type std_auto_ptr_element_type<_Tp> = _Tp;
const _: () = {
    ["Size of template specialization: std_auto_ptr_open0_void_close0"]
        [::std::mem::size_of::<std_auto_ptr<::std::os::raw::c_void>>() - 1usize];
    ["Align of template specialization: std_auto_ptr_open0_void_close0"]
        [::std::mem::align_of::<std_auto_ptr<::std::os::raw::c_void>>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___default_init_tag {
    pub _address: u8,
}
const _: () = {
    ["Size of std___default_init_tag"][::std::mem::size_of::<std___default_init_tag>() - 1usize];
    ["Alignment of std___default_init_tag"]
        [::std::mem::align_of::<std___default_init_tag>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___value_init_tag {
    pub _address: u8,
}
const _: () = {
    ["Size of std___value_init_tag"][::std::mem::size_of::<std___value_init_tag>() - 1usize];
    ["Alignment of std___value_init_tag"][::std::mem::align_of::<std___value_init_tag>() - 1usize];
};
pub type std___compressed_pair_elem__ParamT<_Tp> = _Tp;
pub type std___compressed_pair_elem_reference<_Tp> = *mut _Tp;
pub type std___compressed_pair_elem_const_reference<_Tp> = *const _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___compressed_pair {
    pub _address: u8,
}
pub type std___compressed_pair__Base1 = u8;
pub type std___compressed_pair__Base2 = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___libcpp_datasizeof {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___libcpp_datasizeof__FirstPaddingByte<_Tp> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Tp>>,
    pub __v_: _Tp,
    pub __first_padding_byte_: ::std::os::raw::c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_always_bitcastable {
    pub _address: u8,
}
pub type std___is_always_bitcastable__UnqualFrom<_From> = std___remove_cv_t<_From>;
pub type std___is_always_bitcastable__UnqualTo<_To> = std___remove_cv_t<_To>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_equality_comparable {
    pub _base: std_false_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___libcpp_is_trivially_equality_comparable_impl {
    pub _base: std_false_type,
}
pub type std___libcpp_is_trivially_equality_comparable =
    std___libcpp_is_trivially_equality_comparable_impl;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___libcpp_is_trivially_lexicographically_comparable {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_less_than_comparable {
    pub _base: std_false_type,
}
pub type std___element_count = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___can_lower_copy_assignment_to_memmove {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___can_lower_move_assignment_to_memmove {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___overload<_F1, _F2> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_F1>>,
    pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_F2>>,
    pub _base: _F1,
    pub _base_1: _F2,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___can_rewrap {
    pub _base: std_false_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___segmented_iterator_traits {
    pub _address: u8,
}
pub type std___is_segmented_iterator = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___debug_less<_Compare> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Compare>>,
    pub __comp_: *mut _Compare,
}
pub type std___comp_ref_type<_Comp> = *mut _Comp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___copy_loop {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___copy_loop__CopySegment<_OutIter> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_OutIter>>,
    pub __result_: *mut _OutIter,
}
pub type std___copy_loop__CopySegment__Traits = std___segmented_iterator_traits;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___copy_trivial {
    pub _address: u8,
}
const _: () = {
    ["Size of std___copy_trivial"][::std::mem::size_of::<std___copy_trivial>() - 1usize];
    ["Alignment of std___copy_trivial"][::std::mem::align_of::<std___copy_trivial>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___move_loop {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___move_loop__MoveSegment<_OutIter> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_OutIter>>,
    pub __result_: *mut _OutIter,
}
pub type std___move_loop__MoveSegment__Traits = std___segmented_iterator_traits;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___move_trivial {
    pub _address: u8,
}
const _: () = {
    ["Size of std___move_trivial"][::std::mem::size_of::<std___move_trivial>() - 1usize];
    ["Alignment of std___move_trivial"][::std::mem::align_of::<std___move_trivial>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_iterator {
    pub _address: u8,
}
pub type std_iterator_value_type<_Tp> = _Tp;
pub type std_iterator_difference_type<_Distance> = _Distance;
pub type std_iterator_pointer<_Pointer> = _Pointer;
pub type std_iterator_reference<_Reference> = _Reference;
pub type std_iterator_iterator_category<_Category> = _Category;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_reverse_iterator<_Iter> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Iter>>,
    pub __t_: _Iter,
    pub current: _Iter,
}
pub type std_reverse_iterator_iterator_type<_Iter> = _Iter;
pub type std_reverse_iterator_iterator_category = std__If;
pub type std_reverse_iterator_pointer = std_iterator_traits;
pub type std_reverse_iterator_value_type = std_iterator_traits;
pub type std_reverse_iterator_difference_type = std_iterator_traits;
pub type std_reverse_iterator_reference = std_iterator_traits;
pub type std___unconstrained_reverse_iterator<_Iter> = std_reverse_iterator<_Iter>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___unwrap_reverse_iter_impl {
    pub _address: u8,
}
pub type std___unwrap_reverse_iter_impl__UnwrappedIter = u8;
pub type std___unwrap_reverse_iter_impl__ReverseWrapper = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___unreachable_sentinel {
    pub _address: u8,
}
const _: () = {
    ["Size of std___unreachable_sentinel"]
        [::std::mem::size_of::<std___unreachable_sentinel>() - 1usize];
    ["Alignment of std___unreachable_sentinel"]
        [::std::mem::align_of::<std___unreachable_sentinel>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__AllocatorDestroyRangeReverse<_Alloc, _Iter> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Alloc>>,
    pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Iter>>,
    pub __alloc_: *mut _Alloc,
    pub __first_: *mut _Iter,
    pub __last_: *mut _Iter,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___allocator_has_trivial_copy_construct {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___allocator_has_trivial_move_construct {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_default_delete {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___unique_ptr_deleter_sfinae {
    pub _address: u8,
}
pub type std___unique_ptr_deleter_sfinae___lval_ref_type<_Deleter> = *const _Deleter;
pub type std___unique_ptr_deleter_sfinae___good_rval_ref_type<_Deleter> = *mut _Deleter;
pub type std___unique_ptr_deleter_sfinae___enable_rval_overload = std_true_type;
#[repr(C)]
#[derive(Debug)]
pub struct std_unique_ptr {
    pub __ptr_: std___compressed_pair,
}
pub type std_unique_ptr_element_type<_Tp> = _Tp;
pub type std_unique_ptr_deleter_type<_Dp> = _Dp;
pub type std_unique_ptr_pointer = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_unique_ptr___nat {
    pub __for_bool_: ::std::os::raw::c_int,
}
pub type std_unique_ptr__DeleterSFINAE = std___unique_ptr_deleter_sfinae;
pub type std_unique_ptr__LValRefType = u8;
pub type std_unique_ptr__GoodRValRefType = u8;
pub type std_unique_ptr__BadRValRefType = u8;
pub type std_unique_ptr__EnableIfDeleterDefaultConstructible = u8;
pub type std_unique_ptr__EnableIfDeleterConstructible = u8;
pub type std_unique_ptr__EnableIfMoveConvertible = u8;
pub type std_unique_ptr__EnableIfDeleterConvertible = u8;
pub type std_unique_ptr__EnableIfDeleterAssignable = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___unique_if {
    pub _address: u8,
}
pub type std___unique_if___unique_single = std_unique_ptr;
#[repr(C)]
#[derive(Debug)]
pub struct std___libcpp_refstring {
    pub __imp_: *const ::std::os::raw::c_char,
}
const _: () = {
    ["Size of std___libcpp_refstring"][::std::mem::size_of::<std___libcpp_refstring>() - 8usize];
    ["Alignment of std___libcpp_refstring"]
        [::std::mem::align_of::<std___libcpp_refstring>() - 8usize];
    ["Offset of field: std___libcpp_refstring::__imp_"]
        [::std::mem::offset_of!(std___libcpp_refstring, __imp_) - 0usize];
};
extern "C" {
    #[link_name = "\u{1}__ZNSt3__121__throw_runtime_errorEPKc"]
    pub fn std___throw_runtime_error(arg1: *const ::std::os::raw::c_char);
}
#[repr(C)]
#[derive(Debug)]
pub struct std_bad_weak_ptr {
    pub _base: std_exception,
}
const _: () = {
    ["Size of std_bad_weak_ptr"][::std::mem::size_of::<std_bad_weak_ptr>() - 8usize];
    ["Alignment of std_bad_weak_ptr"][::std::mem::align_of::<std_bad_weak_ptr>() - 8usize];
};
extern "C" {
    #[link_name = "\u{1}__ZNSt3__112bad_weak_ptrD1Ev"]
    pub fn std_bad_weak_ptr_bad_weak_ptr_destructor(this: *mut std_bad_weak_ptr);
}
extern "C" {
    #[link_name = "\u{1}__ZNKSt3__112bad_weak_ptr4whatEv"]
    pub fn std_bad_weak_ptr_what(
        this: *mut ::std::os::raw::c_void,
    ) -> *const ::std::os::raw::c_char;
}
#[repr(C)]
pub struct std___shared_count__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct std___shared_count {
    pub vtable_: *const std___shared_count__bindgen_vtable,
    pub __shared_owners_: ::std::os::raw::c_long,
}
const _: () = {
    ["Size of std___shared_count"][::std::mem::size_of::<std___shared_count>() - 16usize];
    ["Alignment of std___shared_count"][::std::mem::align_of::<std___shared_count>() - 8usize];
    ["Offset of field: std___shared_count::__shared_owners_"]
        [::std::mem::offset_of!(std___shared_count, __shared_owners_) - 8usize];
};
extern "C" {
    #[link_name = "\u{1}__ZNSt3__114__shared_countD1Ev"]
    pub fn std___shared_count___shared_count_destructor(this: *mut std___shared_count);
}
#[repr(C)]
#[derive(Debug)]
pub struct std___shared_weak_count {
    pub _base: std___shared_count,
    pub __shared_weak_owners_: ::std::os::raw::c_long,
}
const _: () = {
    ["Size of std___shared_weak_count"][::std::mem::size_of::<std___shared_weak_count>() - 24usize];
    ["Alignment of std___shared_weak_count"]
        [::std::mem::align_of::<std___shared_weak_count>() - 8usize];
    ["Offset of field: std___shared_weak_count::__shared_weak_owners_"]
        [::std::mem::offset_of!(std___shared_weak_count, __shared_weak_owners_) - 16usize];
};
extern "C" {
    #[link_name = "\u{1}__ZNSt3__119__shared_weak_count14__release_weakEv"]
    pub fn std___shared_weak_count___release_weak(this: *mut std___shared_weak_count);
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__119__shared_weak_count4lockEv"]
    pub fn std___shared_weak_count_lock(
        this: *mut std___shared_weak_count,
    ) -> *mut std___shared_weak_count;
}
impl std___shared_weak_count {
    #[inline]
    pub unsafe fn __release_weak(&mut self) {
        std___shared_weak_count___release_weak(self)
    }
    #[inline]
    pub unsafe fn lock(&mut self) -> *mut std___shared_weak_count {
        std___shared_weak_count_lock(self)
    }
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__119__shared_weak_countD1Ev"]
    pub fn std___shared_weak_count___shared_weak_count_destructor(
        this: *mut std___shared_weak_count,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNKSt3__119__shared_weak_count13__get_deleterERKSt9type_info"]
    pub fn std___shared_weak_count___get_deleter(
        this: *mut ::std::os::raw::c_void,
        arg1: *const std_type_info,
    ) -> *const ::std::os::raw::c_void;
}
#[repr(C)]
#[derive(Debug)]
pub struct std___shared_ptr_pointer {
    pub _base: std___shared_weak_count,
    pub __data_: std___compressed_pair,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___for_overwrite_tag {
    pub _address: u8,
}
const _: () = {
    ["Size of std___for_overwrite_tag"][::std::mem::size_of::<std___for_overwrite_tag>() - 1usize];
    ["Alignment of std___for_overwrite_tag"]
        [::std::mem::align_of::<std___for_overwrite_tag>() - 1usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct std___shared_ptr_emplace {
    pub _base: std___shared_weak_count,
    pub __storage_: std___shared_ptr_emplace__Storage,
}
pub type std___shared_ptr_emplace__CompressedPair = std___compressed_pair;
#[repr(C)]
#[derive(Debug)]
pub struct std___shared_ptr_emplace__Storage {
    pub __blob_: *mut ::std::os::raw::c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___shared_ptr_dummy_rebind_allocator_type {
    _unused: [u8; 0],
}
const _: () = {
    ["Size of template specialization: std_allocator_open0_std___shared_ptr_dummy_rebind_allocator_type_close0"] [:: std :: mem :: size_of :: < std_allocator > () - 1usize] ;
    ["Align of template specialization: std_allocator_open0_std___shared_ptr_dummy_rebind_allocator_type_close0"] [:: std :: mem :: align_of :: < std_allocator > () - 1usize] ;
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___compatible_with {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___raw_pointer_compatible_with {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_deletable {
    pub _base: std_false_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_array_deletable {
    pub _base: std_false_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___well_formed_deleter {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___shared_ptr_deleter_ctor_reqs {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug)]
pub struct std_shared_ptr<_Tp> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Tp>>,
    pub __ptr_: *mut std_shared_ptr_element_type<_Tp>,
    pub __cntrl_: *mut std___shared_weak_count,
}
pub type std_shared_ptr_element_type<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_shared_ptr___shared_ptr_default_delete {
    pub _address: u8,
}
pub type std_shared_ptr___shared_ptr_default_allocator_type = std_allocator;
#[repr(C)]
#[derive(Debug)]
pub struct std_weak_ptr<_Tp> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Tp>>,
    pub __ptr_: *mut std_weak_ptr_element_type<_Tp>,
    pub __cntrl_: *mut std___shared_weak_count,
}
pub type std_weak_ptr_element_type<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_owner_less {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug)]
pub struct std_enable_shared_from_this<_Tp> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Tp>>,
    pub __weak_this_: std_weak_ptr<_Tp>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___sp_mut {
    pub __lx_: *mut ::std::os::raw::c_void,
}
const _: () = {
    ["Size of std___sp_mut"][::std::mem::size_of::<std___sp_mut>() - 8usize];
    ["Alignment of std___sp_mut"][::std::mem::align_of::<std___sp_mut>() - 8usize];
    ["Offset of field: std___sp_mut::__lx_"][::std::mem::offset_of!(std___sp_mut, __lx_) - 0usize];
};
extern "C" {
    #[link_name = "\u{1}__ZNSt3__18__sp_mut4lockEv"]
    pub fn std___sp_mut_lock(this: *mut std___sp_mut);
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__18__sp_mut6unlockEv"]
    pub fn std___sp_mut_unlock(this: *mut std___sp_mut);
}
impl std___sp_mut {
    #[inline]
    pub unsafe fn lock(&mut self) {
        std___sp_mut_lock(self)
    }
    #[inline]
    pub unsafe fn unlock(&mut self) {
        std___sp_mut_unlock(self)
    }
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__112__get_sp_mutEPKv"]
    pub fn std___get_sp_mut(arg1: *const ::std::os::raw::c_void) -> *mut std___sp_mut;
}
pub type std_array___self = u8;
pub type std_array_value_type<_Tp> = _Tp;
pub type std_array_reference<_Tp> = *mut std_array_value_type<_Tp>;
pub type std_array_const_reference<_Tp> = *const std_array_value_type<_Tp>;
pub type std_array_iterator<_Tp> = *mut std_array_value_type<_Tp>;
pub type std_array_const_iterator<_Tp> = *const std_array_value_type<_Tp>;
pub type std_array_pointer<_Tp> = *mut std_array_value_type<_Tp>;
pub type std_array_const_pointer<_Tp> = *const std_array_value_type<_Tp>;
pub type std_array_size_type = ::std::os::raw::c_ulong;
pub type std_array_difference_type = ::std::os::raw::c_long;
pub type std_array_reverse_iterator<_Tp> = std_reverse_iterator<std_array_iterator<_Tp>>;
pub type std_array_const_reverse_iterator<_Tp> =
    std_reverse_iterator<std_array_const_iterator<_Tp>>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___copy_backward_loop {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___copy_backward_trivial {
    pub _address: u8,
}
const _: () = {
    ["Size of std___copy_backward_trivial"]
        [::std::mem::size_of::<std___copy_backward_trivial>() - 1usize];
    ["Alignment of std___copy_backward_trivial"]
        [::std::mem::align_of::<std___copy_backward_trivial>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___move_backward_loop {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___move_backward_trivial {
    pub _address: u8,
}
const _: () = {
    ["Size of std___move_backward_trivial"]
        [::std::mem::size_of::<std___move_backward_trivial>() - 1usize];
    ["Alignment of std___move_backward_trivial"]
        [::std::mem::align_of::<std___move_backward_trivial>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___destruct_n {
    pub __size_: ::std::os::raw::c_ulong,
}
const _: () = {
    ["Size of std___destruct_n"][::std::mem::size_of::<std___destruct_n>() - 8usize];
    ["Alignment of std___destruct_n"][::std::mem::align_of::<std___destruct_n>() - 8usize];
    ["Offset of field: std___destruct_n::__size_"]
        [::std::mem::offset_of!(std___destruct_n, __size_) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___return_temporary_buffer {
    pub _address: u8,
}
const _: () = {
    ["Size of std___return_temporary_buffer"]
        [::std::mem::size_of::<std___return_temporary_buffer>() - 1usize];
    ["Alignment of std___return_temporary_buffer"]
        [::std::mem::align_of::<std___return_temporary_buffer>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___invert<_Predicate> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Predicate>>,
    pub __p_: _Predicate,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__ConstTimeDistance {
    pub _base: std_false_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__MinmaxElementLessFunc<_Comp, _Proj> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Comp>>,
    pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Proj>>,
    pub __comp_: *mut _Comp,
    pub __proj_: *mut _Proj,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_simple_comparator {
    pub _base: std_false_type,
}
const _: () = {
    ["Size of template specialization: std___is_simple_comparator_open0_ref___less_close0"]
        [::std::mem::size_of::<std___is_simple_comparator>() - 1usize];
    ["Align of template specialization: std___is_simple_comparator_open0_ref___less_close0"]
        [::std::mem::align_of::<std___is_simple_comparator>() - 1usize];
};
pub type std___use_branchless_sort = u8;
pub type std___is_any_of = std__Or;
pub type std___sort_is_specialized_in_library = std___is_any_of;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std__ProjectedPred<_Pred, _Proj> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Pred>>,
    pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Proj>>,
    pub __pred: *mut _Pred,
    pub __proj: *mut _Proj,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_move_iterator<_Iter> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Iter>>,
    pub __current_: _Iter,
}
pub type std_move_iterator_iterator_type<_Iter> = _Iter;
pub type std_move_iterator_iterator_category = std__If;
pub type std_move_iterator_value_type = std_iterator_traits;
pub type std_move_iterator_difference_type = std_iterator_traits;
pub type std_move_iterator_pointer<_Iter> = std_move_iterator_iterator_type<_Iter>;
pub type std_move_iterator___reference = std_iterator_traits;
pub type std_move_iterator_reference = u8;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___stable_sort_switch {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___wrap_iter<_Iter> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Iter>>,
    pub __i_: std___wrap_iter_iterator_type<_Iter>,
}
pub type std___wrap_iter_iterator_type<_Iter> = _Iter;
pub type std___wrap_iter_value_type = std_iterator_traits;
pub type std___wrap_iter_difference_type = std_iterator_traits;
pub type std___wrap_iter_pointer = std_iterator_traits;
pub type std___wrap_iter_reference = std_iterator_traits;
pub type std___wrap_iter_iterator_category = std_iterator_traits;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___libcpp_random_is_valid_inttype {
    pub _base: std_false_type,
}
const _: () = {
    ["Size of template specialization: std___libcpp_random_is_valid_inttype_open0_signed_char_close0"] [:: std :: mem :: size_of :: < std___libcpp_random_is_valid_inttype > () - 1usize] ;
    ["Align of template specialization: std___libcpp_random_is_valid_inttype_open0_signed_char_close0"] [:: std :: mem :: align_of :: < std___libcpp_random_is_valid_inttype > () - 1usize] ;
};
const _: () = {
    ["Size of template specialization: std___libcpp_random_is_valid_inttype_open0_short_close0"]
        [::std::mem::size_of::<std___libcpp_random_is_valid_inttype>() - 1usize];
    ["Align of template specialization: std___libcpp_random_is_valid_inttype_open0_short_close0"]
        [::std::mem::align_of::<std___libcpp_random_is_valid_inttype>() - 1usize];
};
const _: () = {
    ["Size of template specialization: std___libcpp_random_is_valid_inttype_open0_int_close0"]
        [::std::mem::size_of::<std___libcpp_random_is_valid_inttype>() - 1usize];
    ["Align of template specialization: std___libcpp_random_is_valid_inttype_open0_int_close0"]
        [::std::mem::align_of::<std___libcpp_random_is_valid_inttype>() - 1usize];
};
const _: () = {
    ["Size of template specialization: std___libcpp_random_is_valid_inttype_open0_long_close0"]
        [::std::mem::size_of::<std___libcpp_random_is_valid_inttype>() - 1usize];
    ["Align of template specialization: std___libcpp_random_is_valid_inttype_open0_long_close0"]
        [::std::mem::align_of::<std___libcpp_random_is_valid_inttype>() - 1usize];
};
const _: () = {
    ["Size of template specialization: std___libcpp_random_is_valid_inttype_open0_long_long_close0"] [:: std :: mem :: size_of :: < std___libcpp_random_is_valid_inttype > () - 1usize] ;
    ["Align of template specialization: std___libcpp_random_is_valid_inttype_open0_long_long_close0"] [:: std :: mem :: align_of :: < std___libcpp_random_is_valid_inttype > () - 1usize] ;
};
const _: () = {
    ["Size of template specialization: std___libcpp_random_is_valid_inttype_open0_unsigned_char_close0"] [:: std :: mem :: size_of :: < std___libcpp_random_is_valid_inttype > () - 1usize] ;
    ["Align of template specialization: std___libcpp_random_is_valid_inttype_open0_unsigned_char_close0"] [:: std :: mem :: align_of :: < std___libcpp_random_is_valid_inttype > () - 1usize] ;
};
const _: () = {
    ["Size of template specialization: std___libcpp_random_is_valid_inttype_open0_unsigned_short_close0"] [:: std :: mem :: size_of :: < std___libcpp_random_is_valid_inttype > () - 1usize] ;
    ["Align of template specialization: std___libcpp_random_is_valid_inttype_open0_unsigned_short_close0"] [:: std :: mem :: align_of :: < std___libcpp_random_is_valid_inttype > () - 1usize] ;
};
const _: () = {
    ["Size of template specialization: std___libcpp_random_is_valid_inttype_open0_unsigned_int_close0"] [:: std :: mem :: size_of :: < std___libcpp_random_is_valid_inttype > () - 1usize] ;
    ["Align of template specialization: std___libcpp_random_is_valid_inttype_open0_unsigned_int_close0"] [:: std :: mem :: align_of :: < std___libcpp_random_is_valid_inttype > () - 1usize] ;
};
const _: () = {
    ["Size of template specialization: std___libcpp_random_is_valid_inttype_open0_unsigned_long_close0"] [:: std :: mem :: size_of :: < std___libcpp_random_is_valid_inttype > () - 1usize] ;
    ["Align of template specialization: std___libcpp_random_is_valid_inttype_open0_unsigned_long_close0"] [:: std :: mem :: align_of :: < std___libcpp_random_is_valid_inttype > () - 1usize] ;
};
const _: () = {
    ["Size of template specialization: std___libcpp_random_is_valid_inttype_open0_unsigned_long_long_close0"] [:: std :: mem :: size_of :: < std___libcpp_random_is_valid_inttype > () - 1usize] ;
    ["Align of template specialization: std___libcpp_random_is_valid_inttype_open0_unsigned_long_long_close0"] [:: std :: mem :: align_of :: < std___libcpp_random_is_valid_inttype > () - 1usize] ;
};
const _: () = {
    ["Size of template specialization: std___libcpp_random_is_valid_inttype_open0___int128_close0"] [:: std :: mem :: size_of :: < std___libcpp_random_is_valid_inttype > () - 1usize] ;
    ["Align of template specialization: std___libcpp_random_is_valid_inttype_open0___int128_close0"] [:: std :: mem :: align_of :: < std___libcpp_random_is_valid_inttype > () - 1usize] ;
};
const _: () = {
    ["Size of template specialization: std___libcpp_random_is_valid_inttype_open0_unsigned___int128_close0"] [:: std :: mem :: size_of :: < std___libcpp_random_is_valid_inttype > () - 1usize] ;
    ["Align of template specialization: std___libcpp_random_is_valid_inttype_open0_unsigned___int128_close0"] [:: std :: mem :: align_of :: < std___libcpp_random_is_valid_inttype > () - 1usize] ;
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___libcpp_random_is_valid_urng {
    pub _base: std_false_type,
}
#[repr(C)]
pub struct std___independent_bits_engine<_Engine> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Engine>>,
    pub __e_: *mut _Engine,
    pub __w_: ::std::os::raw::c_ulong,
    pub __w0_: ::std::os::raw::c_ulong,
    pub __n_: ::std::os::raw::c_ulong,
    pub __n0_: ::std::os::raw::c_ulong,
    pub __y0_: std___independent_bits_engine__Working_result_type,
    pub __y1_: std___independent_bits_engine__Working_result_type,
    pub __mask0_: std___independent_bits_engine__Engine_result_type,
    pub __mask1_: std___independent_bits_engine__Engine_result_type,
}
pub type std___independent_bits_engine_result_type<_UIntType> = _UIntType;
pub type std___independent_bits_engine__Engine_result_type = [u8; 0usize];
pub type std___independent_bits_engine__Working_result_type = std___conditional_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_uniform_int_distribution<_IntType> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_IntType>>,
    pub __p_: std_uniform_int_distribution_param_type<_IntType>,
}
pub type std_uniform_int_distribution_result_type<_IntType> = _IntType;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_uniform_int_distribution_param_type<_IntType> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_IntType>>,
    pub __a_: std_uniform_int_distribution_result_type<_IntType>,
    pub __b_: std_uniform_int_distribution_result_type<_IntType>,
}
pub type std_uniform_int_distribution_param_type_distribution_type<_IntType> =
    std_uniform_int_distribution<_IntType>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___set_intersection_result<_InIter1, _InIter2, _OutIter> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_InIter1>>,
    pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_InIter2>>,
    pub _phantom_2: ::std::marker::PhantomData<::std::cell::UnsafeCell<_OutIter>>,
    pub __in1_: _InIter1,
    pub __in2_: _InIter2,
    pub __out_: _OutIter,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___set_symmetric_difference_result<_InIter1, _InIter2, _OutIter> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_InIter1>>,
    pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_InIter2>>,
    pub _phantom_2: ::std::marker::PhantomData<::std::cell::UnsafeCell<_OutIter>>,
    pub __in1_: _InIter1,
    pub __in2_: _InIter2,
    pub __out_: _OutIter,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___set_union_result<_InIter1, _InIter2, _OutIter> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_InIter1>>,
    pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_InIter2>>,
    pub _phantom_2: ::std::marker::PhantomData<::std::cell::UnsafeCell<_OutIter>>,
    pub __in1_: _InIter1,
    pub __in2_: _InIter2,
    pub __out_: _OutIter,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___libcpp_debug_randomizer {
    pub __state_: ::std::os::raw::c_ulonglong,
    pub __inc_: ::std::os::raw::c_ulonglong,
}
pub type std___libcpp_debug_randomizer_result_type = ::std::os::raw::c_uint;
extern "C" {
    #[link_name = "\u{1}__ZNSt3__125__libcpp_debug_randomizer4_MinE"]
    pub static std___libcpp_debug_randomizer__Min: std___libcpp_debug_randomizer_result_type;
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__125__libcpp_debug_randomizer4_MaxE"]
    pub static std___libcpp_debug_randomizer__Max: std___libcpp_debug_randomizer_result_type;
}
const _: () = {
    ["Size of std___libcpp_debug_randomizer"]
        [::std::mem::size_of::<std___libcpp_debug_randomizer>() - 16usize];
    ["Alignment of std___libcpp_debug_randomizer"]
        [::std::mem::align_of::<std___libcpp_debug_randomizer>() - 8usize];
    ["Offset of field: std___libcpp_debug_randomizer::__state_"]
        [::std::mem::offset_of!(std___libcpp_debug_randomizer, __state_) - 0usize];
    ["Offset of field: std___libcpp_debug_randomizer::__inc_"]
        [::std::mem::offset_of!(std___libcpp_debug_randomizer, __inc_) - 8usize];
};
extern "C" {
    #[link_name = "\u{1}__ZNSt3__18__rs_getEv"]
    pub fn std___rs_get() -> std___rs_default;
}
#[repr(C)]
#[derive(Debug)]
pub struct std___rs_default {
    pub _address: u8,
}
pub type std___rs_default_result_type = ::std::os::raw::c_uint;
extern "C" {
    #[link_name = "\u{1}__ZNSt3__112__rs_default4__c_E"]
    pub static mut std___rs_default___c_: ::std::os::raw::c_uint;
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__112__rs_default4_MinE"]
    pub static std___rs_default__Min: std___rs_default_result_type;
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__112__rs_default4_MaxE"]
    pub static std___rs_default__Max: std___rs_default_result_type;
}
const _: () = {
    ["Size of std___rs_default"][::std::mem::size_of::<std___rs_default>() - 1usize];
    ["Alignment of std___rs_default"][::std::mem::align_of::<std___rs_default>() - 1usize];
};
extern "C" {
    #[link_name = "\u{1}__ZNSt3__112__rs_defaultC1ERKS0_"]
    pub fn std___rs_default___rs_default(
        this: *mut std___rs_default,
        arg1: *const std___rs_default,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__112__rs_defaultD1Ev"]
    pub fn std___rs_default___rs_default_destructor(this: *mut std___rs_default);
}
impl std___rs_default {
    #[inline]
    pub unsafe fn new(arg1: *const std___rs_default) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std___rs_default___rs_default(__bindgen_tmp.as_mut_ptr(), arg1);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        std___rs_default___rs_default_destructor(self)
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___unique_copy_tags___reread_from_input_tag {
    pub _address: u8,
}
const _: () = {
    ["Size of std___unique_copy_tags___reread_from_input_tag"]
        [::std::mem::size_of::<std___unique_copy_tags___reread_from_input_tag>() - 1usize];
    ["Alignment of std___unique_copy_tags___reread_from_input_tag"]
        [::std::mem::align_of::<std___unique_copy_tags___reread_from_input_tag>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___unique_copy_tags___reread_from_output_tag {
    pub _address: u8,
}
const _: () = {
    ["Size of std___unique_copy_tags___reread_from_output_tag"]
        [::std::mem::size_of::<std___unique_copy_tags___reread_from_output_tag>() - 1usize];
    ["Alignment of std___unique_copy_tags___reread_from_output_tag"]
        [::std::mem::align_of::<std___unique_copy_tags___reread_from_output_tag>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___unique_copy_tags___read_from_tmp_value_tag {
    pub _address: u8,
}
const _: () = {
    ["Size of std___unique_copy_tags___read_from_tmp_value_tag"]
        [::std::mem::size_of::<std___unique_copy_tags___read_from_tmp_value_tag>() - 1usize];
    ["Alignment of std___unique_copy_tags___read_from_tmp_value_tag"]
        [::std::mem::align_of::<std___unique_copy_tags___read_from_tmp_value_tag>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_back_insert_iterator<_Container> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Container>>,
    pub container: *mut _Container,
}
pub type std_back_insert_iterator_iterator_category = std_output_iterator_tag;
pub type std_back_insert_iterator_value_type = ::std::os::raw::c_void;
pub type std_back_insert_iterator_difference_type = ::std::os::raw::c_void;
pub type std_back_insert_iterator_pointer = ::std::os::raw::c_void;
pub type std_back_insert_iterator_reference = ::std::os::raw::c_void;
pub type std_back_insert_iterator_container_type<_Container> = _Container;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___bounded_iter<_Iterator> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Iterator>>,
    pub __current_: _Iterator,
    pub __begin_: _Iterator,
    pub __end_: _Iterator,
}
pub type std___bounded_iter_value_type = std_iterator_traits;
pub type std___bounded_iter_difference_type = std_iterator_traits;
pub type std___bounded_iter_pointer = std_iterator_traits;
pub type std___bounded_iter_reference = std_iterator_traits;
pub type std___bounded_iter_iterator_category = std_iterator_traits;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_front_insert_iterator<_Container> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Container>>,
    pub container: *mut _Container,
}
pub type std_front_insert_iterator_iterator_category = std_output_iterator_tag;
pub type std_front_insert_iterator_value_type = ::std::os::raw::c_void;
pub type std_front_insert_iterator_difference_type = ::std::os::raw::c_void;
pub type std_front_insert_iterator_pointer = ::std::os::raw::c_void;
pub type std_front_insert_iterator_reference = ::std::os::raw::c_void;
pub type std_front_insert_iterator_container_type<_Container> = _Container;
pub type std___insert_iterator_iter_t = [u8; 0usize];
#[repr(C)]
pub struct std_insert_iterator<_Container> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Container>>,
    pub container: *mut _Container,
    pub iter: std___insert_iterator_iter_t,
}
pub type std_insert_iterator_iterator_category = std_output_iterator_tag;
pub type std_insert_iterator_value_type = ::std::os::raw::c_void;
pub type std_insert_iterator_difference_type = ::std::os::raw::c_void;
pub type std_insert_iterator_pointer = ::std::os::raw::c_void;
pub type std_insert_iterator_reference = ::std::os::raw::c_void;
pub type std_insert_iterator_container_type<_Container> = _Container;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_istream_iterator<_Tp> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Tp>>,
    pub __in_stream_: *mut std_istream_iterator_istream_type,
    pub __value_: _Tp,
}
pub type std_istream_iterator_iterator_category = std_input_iterator_tag;
pub type std_istream_iterator_value_type<_Tp> = _Tp;
pub type std_istream_iterator_difference_type<_Distance> = _Distance;
pub type std_istream_iterator_pointer<_Tp> = *const _Tp;
pub type std_istream_iterator_reference<_Tp> = *const _Tp;
pub type std_istream_iterator_char_type<_CharT> = _CharT;
pub type std_istream_iterator_traits_type<_Traits> = _Traits;
pub type std_istream_iterator_istream_type = std_basic_istream;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_istreambuf_iterator<_CharT> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
    pub __sbuf_: *mut std_istreambuf_iterator_streambuf_type<_CharT>,
}
pub type std_istreambuf_iterator_iterator_category = std_input_iterator_tag;
pub type std_istreambuf_iterator_value_type<_CharT> = _CharT;
pub type std_istreambuf_iterator_difference_type = [u8; 0usize];
pub type std_istreambuf_iterator_pointer<_CharT> = *mut _CharT;
pub type std_istreambuf_iterator_reference<_CharT> = _CharT;
pub type std_istreambuf_iterator_char_type<_CharT> = _CharT;
pub type std_istreambuf_iterator_traits_type<_Traits> = _Traits;
pub type std_istreambuf_iterator_int_type = [u8; 0usize];
pub type std_istreambuf_iterator_streambuf_type<_CharT> = std_basic_streambuf<_CharT>;
pub type std_istreambuf_iterator_istream_type = std_basic_istream;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_istreambuf_iterator___proxy<_CharT> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
    pub __keep_: std_istreambuf_iterator_char_type<_CharT>,
    pub __sbuf_: *mut std_istreambuf_iterator_streambuf_type<_CharT>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_ostream_iterator<_CharT> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
    pub __out_stream_: *mut std_ostream_iterator_ostream_type,
    pub __delim_: *const std_ostream_iterator_char_type<_CharT>,
}
pub type std_ostream_iterator_iterator_category = std_output_iterator_tag;
pub type std_ostream_iterator_value_type = ::std::os::raw::c_void;
pub type std_ostream_iterator_difference_type = ::std::os::raw::c_void;
pub type std_ostream_iterator_pointer = ::std::os::raw::c_void;
pub type std_ostream_iterator_reference = ::std::os::raw::c_void;
pub type std_ostream_iterator_char_type<_CharT> = _CharT;
pub type std_ostream_iterator_traits_type<_Traits> = _Traits;
pub type std_ostream_iterator_ostream_type = std_basic_ostream;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_ostreambuf_iterator<_CharT> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
    pub __sbuf_: *mut std_ostreambuf_iterator_streambuf_type<_CharT>,
}
pub type std_ostreambuf_iterator_iterator_category = std_output_iterator_tag;
pub type std_ostreambuf_iterator_value_type = ::std::os::raw::c_void;
pub type std_ostreambuf_iterator_difference_type = ::std::os::raw::c_void;
pub type std_ostreambuf_iterator_pointer = ::std::os::raw::c_void;
pub type std_ostreambuf_iterator_reference = ::std::os::raw::c_void;
pub type std_ostreambuf_iterator_char_type<_CharT> = _CharT;
pub type std_ostreambuf_iterator_traits_type<_Traits> = _Traits;
pub type std_ostreambuf_iterator_streambuf_type<_CharT> = std_basic_streambuf<_CharT>;
pub type std_ostreambuf_iterator_ostream_type = std_basic_ostream;
extern "C" {
    #[link_name = "\u{1}__ZNSt3__15alignEmmRPvRm"]
    pub fn std_align(
        __align: ::std::os::raw::c_ulong,
        __sz: ::std::os::raw::c_ulong,
        __ptr: *mut *mut ::std::os::raw::c_void,
        __space: *mut ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_raw_storage_iterator<_OutputIterator> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_OutputIterator>>,
    pub __x_: _OutputIterator,
}
pub type std_raw_storage_iterator_iterator_category = std_output_iterator_tag;
pub type std_raw_storage_iterator_value_type = ::std::os::raw::c_void;
pub type std_raw_storage_iterator_difference_type = ::std::os::raw::c_void;
pub type std_raw_storage_iterator_pointer = ::std::os::raw::c_void;
pub type std_raw_storage_iterator_reference = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_transparent {
    pub _base: std_false_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_hash_value_type_imp {
    pub _base: std_false_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_hash_value_type {
    pub _base: std_false_type,
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__112__next_primeEm"]
    pub fn std___next_prime(__n: ::std::os::raw::c_ulong) -> ::std::os::raw::c_ulong;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___hash_node_base {
    pub __next_: std___hash_node_base___next_pointer,
}
pub type std___hash_node_base___node_type = std_pointer_traits;
pub type std___hash_node_base___first_node = std___hash_node_base;
pub type std___hash_node_base___node_base_pointer = std___rebind_pointer_t;
pub type std___hash_node_base___node_pointer<_NodePtr> = _NodePtr;
pub type std___hash_node_base___next_pointer = std___conditional_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___hash_node<_Tp> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Tp>>,
    pub _base: std___hash_node_base,
    pub __hash_: ::std::os::raw::c_ulong,
    pub __value_: std___hash_node___node_value_type<_Tp>,
}
pub type std___hash_node___node_value_type<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___hash_key_value_types {
    pub _address: u8,
}
pub type std___hash_key_value_types_key_type<_Tp> = _Tp;
pub type std___hash_key_value_types___node_value_type<_Tp> = _Tp;
pub type std___hash_key_value_types___container_value_type<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___hash_node_types {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___hash_node_types_from_iterator {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___make_hash_node_types {
    pub _address: u8,
}
pub type std___make_hash_node_types__NodeTp<_NodeValueTp> = std___hash_node<_NodeValueTp>;
pub type std___make_hash_node_types__NodePtr = std___rebind_pointer_t;
pub type std___make_hash_node_types_type = std___hash_node_types;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___hash_iterator {
    pub __node_: std___hash_iterator___next_pointer,
}
pub type std___hash_iterator__NodeTypes = std___hash_node_types;
pub type std___hash_iterator___node_pointer<_NodePtr> = _NodePtr;
pub type std___hash_iterator___next_pointer = std___hash_iterator__NodeTypes;
pub type std___hash_iterator_iterator_category = std_forward_iterator_tag;
pub type std___hash_iterator_value_type = std___hash_iterator__NodeTypes;
pub type std___hash_iterator_difference_type = std___hash_iterator__NodeTypes;
pub type std___hash_iterator_reference = *mut std___hash_iterator_value_type;
pub type std___hash_iterator_pointer = std___hash_iterator__NodeTypes;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___hash_const_iterator {
    pub __node_: std___hash_const_iterator___next_pointer,
}
pub type std___hash_const_iterator__NodeTypes = std___hash_node_types;
pub type std___hash_const_iterator___node_pointer<_NodePtr> = _NodePtr;
pub type std___hash_const_iterator___next_pointer = std___hash_const_iterator__NodeTypes;
pub type std___hash_const_iterator___non_const_iterator = std___hash_iterator;
pub type std___hash_const_iterator_iterator_category = std_forward_iterator_tag;
pub type std___hash_const_iterator_value_type = std___hash_const_iterator__NodeTypes;
pub type std___hash_const_iterator_difference_type = std___hash_const_iterator__NodeTypes;
pub type std___hash_const_iterator_reference = *const std___hash_const_iterator_value_type;
pub type std___hash_const_iterator_pointer = std___hash_const_iterator__NodeTypes;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___hash_local_iterator {
    pub __node_: std___hash_local_iterator___next_pointer,
    pub __bucket_: ::std::os::raw::c_ulong,
    pub __bucket_count_: ::std::os::raw::c_ulong,
}
pub type std___hash_local_iterator__NodeTypes = std___hash_node_types;
pub type std___hash_local_iterator___node_pointer<_NodePtr> = _NodePtr;
pub type std___hash_local_iterator___next_pointer = std___hash_local_iterator__NodeTypes;
pub type std___hash_local_iterator_iterator_category = std_forward_iterator_tag;
pub type std___hash_local_iterator_value_type = std___hash_local_iterator__NodeTypes;
pub type std___hash_local_iterator_difference_type = std___hash_local_iterator__NodeTypes;
pub type std___hash_local_iterator_reference = *mut std___hash_local_iterator_value_type;
pub type std___hash_local_iterator_pointer = std___hash_local_iterator__NodeTypes;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___hash_const_local_iterator {
    pub __node_: std___hash_const_local_iterator___next_pointer,
    pub __bucket_: ::std::os::raw::c_ulong,
    pub __bucket_count_: ::std::os::raw::c_ulong,
}
pub type std___hash_const_local_iterator__NodeTypes = std___hash_node_types;
pub type std___hash_const_local_iterator___node_pointer<_ConstNodePtr> = _ConstNodePtr;
pub type std___hash_const_local_iterator___next_pointer =
    std___hash_const_local_iterator__NodeTypes;
pub type std___hash_const_local_iterator___pointer_traits = std_pointer_traits;
pub type std___hash_const_local_iterator___node = std___hash_const_local_iterator___pointer_traits;
pub type std___hash_const_local_iterator___non_const_node =
    std___remove_const_t<std___hash_const_local_iterator___node>;
pub type std___hash_const_local_iterator___non_const_node_pointer = std___rebind_pointer_t;
pub type std___hash_const_local_iterator___non_const_iterator = std___hash_local_iterator;
pub type std___hash_const_local_iterator_iterator_category = std_forward_iterator_tag;
pub type std___hash_const_local_iterator_value_type = std___hash_const_local_iterator__NodeTypes;
pub type std___hash_const_local_iterator_difference_type =
    std___hash_const_local_iterator__NodeTypes;
pub type std___hash_const_local_iterator_reference =
    *const std___hash_const_local_iterator_value_type;
pub type std___hash_const_local_iterator_pointer = std___hash_const_local_iterator__NodeTypes;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___bucket_list_deallocator {
    pub __data_: std___compressed_pair,
}
pub type std___bucket_list_deallocator_allocator_type<_Alloc> = _Alloc;
pub type std___bucket_list_deallocator___alloc_traits = std_allocator_traits;
pub type std___bucket_list_deallocator_size_type = std___bucket_list_deallocator___alloc_traits;
pub type std___bucket_list_deallocator_pointer = std___bucket_list_deallocator___alloc_traits;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___hash_node_destructor<_Alloc> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Alloc>>,
    pub __na_: *mut std___hash_node_destructor_allocator_type<_Alloc>,
    pub __value_constructed: bool,
}
pub type std___hash_node_destructor_allocator_type<_Alloc> = _Alloc;
pub type std___hash_node_destructor___alloc_traits = std_allocator_traits;
pub type std___hash_node_destructor_pointer = std___hash_node_destructor___alloc_traits;
pub type std___hash_node_destructor__NodeTypes = std___hash_node_types;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___enforce_unordered_container_requirements {
    pub _address: u8,
}
pub type std___enforce_unordered_container_requirements_type = ::std::os::raw::c_int;
#[repr(C)]
pub struct std___hash_table {
    pub __bucket_list_: std___hash_table___bucket_list,
    pub __p1_: std___compressed_pair,
    pub __p2_: std___compressed_pair,
    pub __p3_: std___compressed_pair,
}
pub type std___hash_table_value_type<_Tp> = _Tp;
pub type std___hash_table_hasher<_Hash> = _Hash;
pub type std___hash_table_key_equal<_Equal> = _Equal;
pub type std___hash_table_allocator_type<_Alloc> = _Alloc;
pub type std___hash_table___alloc_traits = std_allocator_traits;
pub type std___hash_table__NodeTypes = std___make_hash_node_types;
pub type std___hash_table___node_value_type = std___hash_table__NodeTypes;
pub type std___hash_table___container_value_type = std___hash_table__NodeTypes;
pub type std___hash_table_key_type = std___hash_table__NodeTypes;
pub type std___hash_table_reference<_Tp> = *mut std___hash_table_value_type<_Tp>;
pub type std___hash_table_const_reference<_Tp> = *const std___hash_table_value_type<_Tp>;
pub type std___hash_table_pointer = std___hash_table___alloc_traits;
pub type std___hash_table_const_pointer = std___hash_table___alloc_traits;
pub type std___hash_table_size_type = std___hash_table___alloc_traits;
pub type std___hash_table_difference_type = std___hash_table__NodeTypes;
pub type std___hash_table___node = std___hash_table__NodeTypes;
pub type std___hash_table___node_allocator = std___rebind_alloc;
pub type std___hash_table___node_traits = std_allocator_traits;
pub type std___hash_table___void_pointer = std___hash_table__NodeTypes;
pub type std___hash_table___node_pointer = std___hash_table__NodeTypes;
pub type std___hash_table___node_const_pointer = std___hash_table__NodeTypes;
pub type std___hash_table___first_node = std___hash_table__NodeTypes;
pub type std___hash_table___node_base_pointer = std___hash_table__NodeTypes;
pub type std___hash_table___next_pointer = std___hash_table__NodeTypes;
pub type std___hash_table___node_base_allocator = std___rebind_alloc;
pub type std___hash_table___node_base_traits = std_allocator_traits;
pub type std___hash_table___pointer_allocator = std___rebind_alloc;
pub type std___hash_table___bucket_list_deleter = std___bucket_list_deallocator;
pub type std___hash_table___bucket_list = std_unique_ptr;
pub type std___hash_table___pointer_alloc_traits = std_allocator_traits;
pub type std___hash_table___node_pointer_pointer = std___hash_table___bucket_list_deleter;
pub type std___hash_table_iterator = std___hash_iterator;
pub type std___hash_table_const_iterator = std___hash_const_iterator;
pub type std___hash_table_local_iterator = std___hash_local_iterator;
pub type std___hash_table_const_local_iterator = std___hash_const_local_iterator;
pub type std___hash_table__Dp = std___hash_node_destructor<std___hash_table___node_allocator>;
pub type std___hash_table___node_holder = std_unique_ptr;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___is_allocator {
    pub _base: std_false_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___hash_map_node_destructor<_Alloc> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Alloc>>,
    pub __na_: *mut std___hash_map_node_destructor_allocator_type<_Alloc>,
    pub __first_constructed: bool,
    pub __second_constructed: bool,
}
pub type std___hash_map_node_destructor_allocator_type<_Alloc> = _Alloc;
pub type std___hash_map_node_destructor___alloc_traits = std_allocator_traits;
pub type std___hash_map_node_destructor_pointer = std___hash_map_node_destructor___alloc_traits;
#[repr(C)]
#[derive(Debug)]
pub struct std___hash_value_type<_Key, _Tp> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Key>>,
    pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Tp>>,
    pub __cc_: std___hash_value_type_value_type<_Key, _Tp>,
}
pub type std___hash_value_type_key_type<_Key> = _Key;
pub type std___hash_value_type_mapped_type<_Tp> = _Tp;
pub type std___hash_value_type_value_type<_Key, _Tp> =
    std_pair<std___hash_value_type_key_type<_Key>, std___hash_value_type_mapped_type<_Tp>>;
pub type std___hash_value_type___nc_ref_pair_type<_Key, _Tp> =
    std_pair<std___hash_value_type_key_type<_Key>, std___hash_value_type_mapped_type<_Tp>>;
pub type std___hash_value_type___nc_rref_pair_type<_Key, _Tp> =
    std_pair<std___hash_value_type_key_type<_Key>, std___hash_value_type_mapped_type<_Tp>>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___hash_map_iterator<_HashIterator> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_HashIterator>>,
    pub __i_: _HashIterator,
}
pub type std___hash_map_iterator__NodeTypes = std___hash_node_types_from_iterator;
pub type std___hash_map_iterator_iterator_category = std_forward_iterator_tag;
pub type std___hash_map_iterator_value_type = std___hash_map_iterator__NodeTypes;
pub type std___hash_map_iterator_difference_type = std___hash_map_iterator__NodeTypes;
pub type std___hash_map_iterator_reference = *mut std___hash_map_iterator_value_type;
pub type std___hash_map_iterator_pointer = std___hash_map_iterator__NodeTypes;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___hash_map_const_iterator<_HashIterator> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_HashIterator>>,
    pub __i_: _HashIterator,
}
pub type std___hash_map_const_iterator__NodeTypes = std___hash_node_types_from_iterator;
pub type std___hash_map_const_iterator_iterator_category = std_forward_iterator_tag;
pub type std___hash_map_const_iterator_value_type = std___hash_map_const_iterator__NodeTypes;
pub type std___hash_map_const_iterator_difference_type = std___hash_map_const_iterator__NodeTypes;
pub type std___hash_map_const_iterator_reference = *const std___hash_map_const_iterator_value_type;
pub type std___hash_map_const_iterator_pointer = std___hash_map_const_iterator__NodeTypes;
#[repr(C)]
pub struct std_unordered_map {
    pub __table_: std_unordered_map___table,
}
pub type std_unordered_map_key_type<_Key> = _Key;
pub type std_unordered_map_mapped_type<_Tp> = _Tp;
pub type std_unordered_map_hasher = std___type_identity_t;
pub type std_unordered_map_key_equal = std___type_identity_t;
pub type std_unordered_map_allocator_type = std___type_identity_t;
pub type std_unordered_map_value_type<_Key, _Tp> =
    std_pair<std_unordered_map_key_type<_Key>, std_unordered_map_mapped_type<_Tp>>;
pub type std_unordered_map_reference<_Key, _Tp> = *mut std_unordered_map_value_type<_Key, _Tp>;
pub type std_unordered_map_const_reference<_Key, _Tp> =
    *const std_unordered_map_value_type<_Key, _Tp>;
pub type std_unordered_map___value_type<_Key, _Tp> =
    std___hash_value_type<std_unordered_map_key_type<_Key>, std_unordered_map_mapped_type<_Tp>>;
pub type std_unordered_map___hasher = u8;
pub type std_unordered_map___key_equal = u8;
pub type std_unordered_map___allocator_type = std___rebind_alloc;
pub type std_unordered_map___table = std___hash_table;
pub type std_unordered_map__NodeTypes = std_unordered_map___table;
pub type std_unordered_map___node_pointer = std_unordered_map___table;
pub type std_unordered_map___node_const_pointer = std_unordered_map___table;
pub type std_unordered_map___node_traits = std_unordered_map___table;
pub type std_unordered_map___node_allocator = std_unordered_map___table;
pub type std_unordered_map___node = std_unordered_map___table;
pub type std_unordered_map__Dp = std___hash_map_node_destructor<std_unordered_map___node_allocator>;
pub type std_unordered_map___node_holder = std_unique_ptr;
pub type std_unordered_map___alloc_traits = std_allocator_traits;
pub type std_unordered_map_pointer = std_unordered_map___alloc_traits;
pub type std_unordered_map_const_pointer = std_unordered_map___alloc_traits;
pub type std_unordered_map_size_type = std_unordered_map___table;
pub type std_unordered_map_difference_type = std_unordered_map___table;
pub type std_unordered_map_iterator = std___hash_map_iterator<std_unordered_map___table>;
pub type std_unordered_map_const_iterator =
    std___hash_map_const_iterator<std_unordered_map___table>;
pub type std_unordered_map_local_iterator = std___hash_map_iterator<std_unordered_map___table>;
pub type std_unordered_map_const_local_iterator =
    std___hash_map_const_iterator<std_unordered_map___table>;
#[repr(C)]
pub struct std_unordered_multimap {
    pub __table_: std_unordered_multimap___table,
}
pub type std_unordered_multimap_key_type<_Key> = _Key;
pub type std_unordered_multimap_mapped_type<_Tp> = _Tp;
pub type std_unordered_multimap_hasher = std___type_identity_t;
pub type std_unordered_multimap_key_equal = std___type_identity_t;
pub type std_unordered_multimap_allocator_type = std___type_identity_t;
pub type std_unordered_multimap_value_type<_Key, _Tp> =
    std_pair<std_unordered_multimap_key_type<_Key>, std_unordered_multimap_mapped_type<_Tp>>;
pub type std_unordered_multimap_reference<_Key, _Tp> =
    *mut std_unordered_multimap_value_type<_Key, _Tp>;
pub type std_unordered_multimap_const_reference<_Key, _Tp> =
    *const std_unordered_multimap_value_type<_Key, _Tp>;
pub type std_unordered_multimap___value_type<_Key, _Tp> = std___hash_value_type<
    std_unordered_multimap_key_type<_Key>,
    std_unordered_multimap_mapped_type<_Tp>,
>;
pub type std_unordered_multimap___hasher = u8;
pub type std_unordered_multimap___key_equal = u8;
pub type std_unordered_multimap___allocator_type = std___rebind_alloc;
pub type std_unordered_multimap___table = std___hash_table;
pub type std_unordered_multimap__NodeTypes = std_unordered_multimap___table;
pub type std_unordered_multimap___node_traits = std_unordered_multimap___table;
pub type std_unordered_multimap___node_allocator = std_unordered_multimap___table;
pub type std_unordered_multimap___node = std_unordered_multimap___table;
pub type std_unordered_multimap__Dp =
    std___hash_map_node_destructor<std_unordered_multimap___node_allocator>;
pub type std_unordered_multimap___node_holder = std_unique_ptr;
pub type std_unordered_multimap___alloc_traits = std_allocator_traits;
pub type std_unordered_multimap_pointer = std_unordered_multimap___alloc_traits;
pub type std_unordered_multimap_const_pointer = std_unordered_multimap___alloc_traits;
pub type std_unordered_multimap_size_type = std_unordered_multimap___table;
pub type std_unordered_multimap_difference_type = std_unordered_multimap___table;
pub type std_unordered_multimap_iterator = std___hash_map_iterator<std_unordered_multimap___table>;
pub type std_unordered_multimap_const_iterator =
    std___hash_map_const_iterator<std_unordered_multimap___table>;
pub type std_unordered_multimap_local_iterator =
    std___hash_map_iterator<std_unordered_multimap___table>;
pub type std_unordered_multimap_const_local_iterator =
    std___hash_map_const_iterator<std_unordered_multimap___table>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___has_storage_type {
    pub _address: u8,
}
pub type std___bit_reference___storage_type = [u8; 0usize];
pub type std___bit_reference___storage_pointer = [u8; 0usize];
pub type std___bit_reference___container = [u8; 0usize];
#[repr(C)]
pub struct std___bit_const_reference {
    pub __seg_: std___bit_const_reference___storage_pointer,
    pub __mask_: std___bit_const_reference___storage_type,
}
pub type std___bit_const_reference___storage_type = [u8; 0usize];
pub type std___bit_const_reference___storage_pointer = [u8; 0usize];
pub type std___bit_const_reference___container = [u8; 0usize];
#[repr(C)]
pub struct std___bit_array {
    pub __size_: std___bit_array_difference_type,
    pub __word_: [std___bit_array___storage_type; 4usize],
}
pub type std___bit_array_difference_type = [u8; 0usize];
pub type std___bit_array___storage_type = [u8; 0usize];
pub type std___bit_array___storage_pointer = [u8; 0usize];
pub type std___bit_array_iterator = [u8; 0usize];
pub type std___bit_iterator_difference_type = [u8; 0usize];
pub type std___bit_iterator_value_type = bool;
pub type std___bit_iterator_pointer = u8;
pub type std___bit_iterator_reference = std___conditional_t;
pub type std___bit_iterator_iterator_category = std_random_access_iterator_tag;
pub type std___bit_iterator___storage_type = [u8; 0usize];
pub type std___bit_iterator___storage_pointer = std___conditional_t;
pub type std_string_view = std_basic_string_view<::std::os::raw::c_char>;
pub type std_u16string_view = std_basic_string_view<u16>;
pub type std_u32string_view = std_basic_string_view<u32>;
pub type std_wstring_view = std_basic_string_view<u32>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_char_traits {
    pub _address: u8,
}
pub type std_char_traits_char_type<_CharT> = _CharT;
pub type std_char_traits_int_type = ::std::os::raw::c_int;
pub type std_char_traits_off_type = std_streamoff;
pub type std_char_traits_pos_type = std_streampos;
pub type std_char_traits_state_type = __mbstate_t;
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char16_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char16_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char32_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char32_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_basic_string_view<_CharT> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
    pub __data_: *const std_basic_string_view_value_type<_CharT>,
    pub __size_: std_basic_string_view_size_type,
}
pub type std_basic_string_view_traits_type<_Traits> = _Traits;
pub type std_basic_string_view_value_type<_CharT> = _CharT;
pub type std_basic_string_view_pointer<_CharT> = *mut _CharT;
pub type std_basic_string_view_const_pointer<_CharT> = *const _CharT;
pub type std_basic_string_view_reference<_CharT> = *mut _CharT;
pub type std_basic_string_view_const_reference<_CharT> = *const _CharT;
pub type std_basic_string_view_const_iterator<_CharT> = std_basic_string_view_const_pointer<_CharT>;
pub type std_basic_string_view_iterator<_CharT> = std_basic_string_view_const_iterator<_CharT>;
pub type std_basic_string_view_const_reverse_iterator<_CharT> =
    std_reverse_iterator<std_basic_string_view_const_iterator<_CharT>>;
pub type std_basic_string_view_reverse_iterator<_CharT> =
    std_basic_string_view_const_reverse_iterator<_CharT>;
pub type std_basic_string_view_size_type = ::std::os::raw::c_ulong;
pub type std_basic_string_view_difference_type = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___string_view_hash {
    pub _address: u8,
}
const _: () = {
    ["Size of template specialization: std_hash_open0_std_basic_string_view_open1_char_std_char_traits_open2_char_close2_close1_close0"] [:: std :: mem :: size_of :: < std_hash > () - 1usize] ;
    ["Align of template specialization: std_hash_open0_std_basic_string_view_open1_char_std_char_traits_open2_char_close2_close1_close0"] [:: std :: mem :: align_of :: < std_hash > () - 1usize] ;
};
const _: () = {
    ["Size of template specialization: std_hash_open0_std_basic_string_view_open1_char16_t_std_char_traits_open2_char16_t_close2_close1_close0"] [:: std :: mem :: size_of :: < std_hash > () - 1usize] ;
    ["Align of template specialization: std_hash_open0_std_basic_string_view_open1_char16_t_std_char_traits_open2_char16_t_close2_close1_close0"] [:: std :: mem :: align_of :: < std_hash > () - 1usize] ;
};
const _: () = {
    ["Size of template specialization: std_hash_open0_std_basic_string_view_open1_char32_t_std_char_traits_open2_char32_t_close2_close1_close0"] [:: std :: mem :: size_of :: < std_hash > () - 1usize] ;
    ["Align of template specialization: std_hash_open0_std_basic_string_view_open1_char32_t_std_char_traits_open2_char32_t_close2_close1_close0"] [:: std :: mem :: align_of :: < std_hash > () - 1usize] ;
};
const _: () = {
    ["Size of template specialization: std_hash_open0_std_basic_string_view_open1_wchar_t_std_char_traits_open2_wchar_t_close2_close1_close0"] [:: std :: mem :: size_of :: < std_hash > () - 1usize] ;
    ["Align of template specialization: std_hash_open0_std_basic_string_view_open1_wchar_t_std_char_traits_open2_wchar_t_close2_close1_close0"] [:: std :: mem :: align_of :: < std_hash > () - 1usize] ;
};
pub const std_errc_address_family_not_supported: std_errc = 47;
pub const std_errc_address_in_use: std_errc = 48;
pub const std_errc_address_not_available: std_errc = 49;
pub const std_errc_already_connected: std_errc = 56;
pub const std_errc_argument_list_too_long: std_errc = 7;
pub const std_errc_argument_out_of_domain: std_errc = 33;
pub const std_errc_bad_address: std_errc = 14;
pub const std_errc_bad_file_descriptor: std_errc = 9;
pub const std_errc_bad_message: std_errc = 94;
pub const std_errc_broken_pipe: std_errc = 32;
pub const std_errc_connection_aborted: std_errc = 53;
pub const std_errc_connection_already_in_progress: std_errc = 37;
pub const std_errc_connection_refused: std_errc = 61;
pub const std_errc_connection_reset: std_errc = 54;
pub const std_errc_cross_device_link: std_errc = 18;
pub const std_errc_destination_address_required: std_errc = 39;
pub const std_errc_device_or_resource_busy: std_errc = 16;
pub const std_errc_directory_not_empty: std_errc = 66;
pub const std_errc_executable_format_error: std_errc = 8;
pub const std_errc_file_exists: std_errc = 17;
pub const std_errc_file_too_large: std_errc = 27;
pub const std_errc_filename_too_long: std_errc = 63;
pub const std_errc_function_not_supported: std_errc = 78;
pub const std_errc_host_unreachable: std_errc = 65;
pub const std_errc_identifier_removed: std_errc = 90;
pub const std_errc_illegal_byte_sequence: std_errc = 92;
pub const std_errc_inappropriate_io_control_operation: std_errc = 25;
pub const std_errc_interrupted: std_errc = 4;
pub const std_errc_invalid_argument: std_errc = 22;
pub const std_errc_invalid_seek: std_errc = 29;
pub const std_errc_io_error: std_errc = 5;
pub const std_errc_is_a_directory: std_errc = 21;
pub const std_errc_message_size: std_errc = 40;
pub const std_errc_network_down: std_errc = 50;
pub const std_errc_network_reset: std_errc = 52;
pub const std_errc_network_unreachable: std_errc = 51;
pub const std_errc_no_buffer_space: std_errc = 55;
pub const std_errc_no_child_process: std_errc = 10;
pub const std_errc_no_link: std_errc = 97;
pub const std_errc_no_lock_available: std_errc = 77;
pub const std_errc_no_message_available: std_errc = 96;
pub const std_errc_no_message: std_errc = 91;
pub const std_errc_no_protocol_option: std_errc = 42;
pub const std_errc_no_space_on_device: std_errc = 28;
pub const std_errc_no_stream_resources: std_errc = 98;
pub const std_errc_no_such_device_or_address: std_errc = 6;
pub const std_errc_no_such_device: std_errc = 19;
pub const std_errc_no_such_file_or_directory: std_errc = 2;
pub const std_errc_no_such_process: std_errc = 3;
pub const std_errc_not_a_directory: std_errc = 20;
pub const std_errc_not_a_socket: std_errc = 38;
pub const std_errc_not_a_stream: std_errc = 99;
pub const std_errc_not_connected: std_errc = 57;
pub const std_errc_not_enough_memory: std_errc = 12;
pub const std_errc_not_supported: std_errc = 45;
pub const std_errc_operation_canceled: std_errc = 89;
pub const std_errc_operation_in_progress: std_errc = 36;
pub const std_errc_operation_not_permitted: std_errc = 1;
pub const std_errc_operation_not_supported: std_errc = 102;
pub const std_errc_operation_would_block: std_errc = 35;
pub const std_errc_owner_dead: std_errc = 105;
pub const std_errc_permission_denied: std_errc = 13;
pub const std_errc_protocol_error: std_errc = 100;
pub const std_errc_protocol_not_supported: std_errc = 43;
pub const std_errc_read_only_file_system: std_errc = 30;
pub const std_errc_resource_deadlock_would_occur: std_errc = 11;
pub const std_errc_resource_unavailable_try_again: std_errc = 35;
pub const std_errc_result_out_of_range: std_errc = 34;
pub const std_errc_state_not_recoverable: std_errc = 104;
pub const std_errc_stream_timeout: std_errc = 101;
pub const std_errc_text_file_busy: std_errc = 26;
pub const std_errc_timed_out: std_errc = 60;
pub const std_errc_too_many_files_open_in_system: std_errc = 23;
pub const std_errc_too_many_files_open: std_errc = 24;
pub const std_errc_too_many_links: std_errc = 31;
pub const std_errc_too_many_symbolic_link_levels: std_errc = 62;
pub const std_errc_value_too_large: std_errc = 84;
pub const std_errc_wrong_protocol_type: std_errc = 41;
pub type std_errc = ::std::os::raw::c_int;
pub type std___make_32_64_or_128_bit_t = std___copy_unsigned_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_fpos<_StateT> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_StateT>>,
    pub __st_: _StateT,
    pub __off_: std_streamoff,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___noexcept_move_assign_container {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___string_is_trivial_iterator {
    pub _base: std_false_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___can_be_converted_to_string_view {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___uninitialized_size_tag {
    pub _address: u8,
}
const _: () = {
    ["Size of std___uninitialized_size_tag"]
        [::std::mem::size_of::<std___uninitialized_size_tag>() - 1usize];
    ["Alignment of std___uninitialized_size_tag"]
        [::std::mem::align_of::<std___uninitialized_size_tag>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___init_with_sentinel_tag {
    pub _address: u8,
}
const _: () = {
    ["Size of std___init_with_sentinel_tag"]
        [::std::mem::size_of::<std___init_with_sentinel_tag>() - 1usize];
    ["Alignment of std___init_with_sentinel_tag"]
        [::std::mem::align_of::<std___init_with_sentinel_tag>() - 1usize];
};
#[repr(C)]
pub struct std_basic_string {
    pub __r_: std___compressed_pair,
}
pub type std_basic_string___self = std_basic_string;
pub type std_basic_string___self_view<_CharT> = std_basic_string_view<_CharT>;
pub type std_basic_string_traits_type<_Traits> = _Traits;
pub type std_basic_string_value_type<_CharT> = _CharT;
pub type std_basic_string_allocator_type<_Allocator> = _Allocator;
pub type std_basic_string___alloc_traits = std_allocator_traits;
pub type std_basic_string_size_type = std_basic_string___alloc_traits;
pub type std_basic_string_difference_type = std_basic_string___alloc_traits;
pub type std_basic_string_reference<_CharT> = *mut std_basic_string_value_type<_CharT>;
pub type std_basic_string_const_reference<_CharT> = *const std_basic_string_value_type<_CharT>;
pub type std_basic_string_pointer = std_basic_string___alloc_traits;
pub type std_basic_string_const_pointer = std_basic_string___alloc_traits;
pub type std_basic_string_iterator = std___wrap_iter<std_basic_string_pointer>;
pub type std_basic_string_const_iterator = std___wrap_iter<std_basic_string_const_pointer>;
pub type std_basic_string_reverse_iterator = std_reverse_iterator<std_basic_string_iterator>;
pub type std_basic_string_const_reverse_iterator =
    std_reverse_iterator<std_basic_string_const_iterator>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_basic_string___long {
    pub _address: u8,
}
pub const std_basic_string___min_cap: std_basic_string__bindgen_ty_1 = 0;
pub type std_basic_string__bindgen_ty_1 = i32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_basic_string___short<_CharT> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
    pub __data_: *mut std_basic_string_value_type<_CharT>,
    pub __padding_: *mut ::std::os::raw::c_uchar,
    pub _bitfield_align_1: [u8; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
}
impl<_CharT> std_basic_string___short<_CharT> {
    #[inline]
    pub fn __size_(&self) -> ::std::os::raw::c_uchar {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 7u8) as u8) }
    }
    #[inline]
    pub fn set___size_(&mut self, val: ::std::os::raw::c_uchar) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub fn __is_long_(&self) -> ::std::os::raw::c_uchar {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u8) }
    }
    #[inline]
    pub fn set___is_long_(&mut self, val: ::std::os::raw::c_uchar) {
        unsafe {
            let val: u8 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        __size_: ::std::os::raw::c_uchar,
        __is_long_: ::std::os::raw::c_uchar,
    ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 7u8, {
            let __size_: u8 = unsafe { ::std::mem::transmute(__size_) };
            __size_ as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let __is_long_: u8 = unsafe { ::std::mem::transmute(__is_long_) };
            __is_long_ as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[repr(align(1))]
pub struct std_basic_string___ulx<_CharT> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
    pub __lx: __BindgenUnionField<u8>,
    pub __lxx: __BindgenUnionField<std_basic_string___short<_CharT>>,
    pub bindgen_union_field: [u8; 0usize],
}
pub const std_basic_string___n_words: std_basic_string__bindgen_ty_2 = 0;
pub type std_basic_string__bindgen_ty_2 = i32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_basic_string___raw {
    pub __words: *mut std_basic_string_size_type,
}
#[repr(C)]
pub struct std_basic_string___rep<_CharT> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
    pub __bindgen_anon_1: std_basic_string___rep__bindgen_ty_1<_CharT>,
}
#[repr(C)]
#[repr(align(1))]
pub struct std_basic_string___rep__bindgen_ty_1<_CharT> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
    pub __l: __BindgenUnionField<u8>,
    pub __s: __BindgenUnionField<std_basic_string___short<_CharT>>,
    pub __r: __BindgenUnionField<std_basic_string___raw>,
    pub bindgen_union_field: [u8; 0usize],
}
pub const std_basic_string___alignment: std_basic_string__bindgen_ty_3 = 0;
pub type std_basic_string__bindgen_ty_3 = i32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___traits_eq {
    pub _address: u8,
}
pub type std___traits_eq_char_type = [u8; 0usize];
extern "C" {
    #[link_name = "\u{1}__ZNSt3__14stoiERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPmi"]
    pub fn std_stoi(
        __str: *const std_string,
        __idx: *mut ::std::os::raw::c_ulong,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__14stolERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPmi"]
    pub fn std_stol(
        __str: *const std_string,
        __idx: *mut ::std::os::raw::c_ulong,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__15stoulERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPmi"]
    pub fn std_stoul(
        __str: *const std_string,
        __idx: *mut ::std::os::raw::c_ulong,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__15stollERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPmi"]
    pub fn std_stoll(
        __str: *const std_string,
        __idx: *mut ::std::os::raw::c_ulong,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__16stoullERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPmi"]
    pub fn std_stoull(
        __str: *const std_string,
        __idx: *mut ::std::os::raw::c_ulong,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__14stofERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPm"]
    pub fn std_stof(__str: *const std_string, __idx: *mut ::std::os::raw::c_ulong) -> f32;
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__14stodERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPm"]
    pub fn std_stod(__str: *const std_string, __idx: *mut ::std::os::raw::c_ulong) -> f64;
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__15stoldERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPm"]
    pub fn std_stold(__str: *const std_string, __idx: *mut ::std::os::raw::c_ulong) -> f64;
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__19to_stringEi"]
    pub fn std_to_string(__val: ::std::os::raw::c_int) -> std_string;
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__19to_stringEj"]
    pub fn std_to_string1(__val: ::std::os::raw::c_uint) -> std_string;
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__19to_stringEl"]
    pub fn std_to_string2(__val: ::std::os::raw::c_long) -> std_string;
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__19to_stringEm"]
    pub fn std_to_string3(__val: ::std::os::raw::c_ulong) -> std_string;
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__19to_stringEx"]
    pub fn std_to_string4(__val: ::std::os::raw::c_longlong) -> std_string;
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__19to_stringEy"]
    pub fn std_to_string5(__val: ::std::os::raw::c_ulonglong) -> std_string;
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__19to_stringEf"]
    pub fn std_to_string6(__val: f32) -> std_string;
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__19to_stringEd"]
    pub fn std_to_string7(__val: f64) -> std_string;
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__19to_stringEe"]
    pub fn std_to_string8(__val: f64) -> std_string;
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__14stoiERKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEPmi"]
    pub fn std_stoi1(
        __str: *const std_wstring,
        __idx: *mut ::std::os::raw::c_ulong,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__14stolERKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEPmi"]
    pub fn std_stol1(
        __str: *const std_wstring,
        __idx: *mut ::std::os::raw::c_ulong,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__15stoulERKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEPmi"]
    pub fn std_stoul1(
        __str: *const std_wstring,
        __idx: *mut ::std::os::raw::c_ulong,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__15stollERKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEPmi"]
    pub fn std_stoll1(
        __str: *const std_wstring,
        __idx: *mut ::std::os::raw::c_ulong,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__16stoullERKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEPmi"]
    pub fn std_stoull1(
        __str: *const std_wstring,
        __idx: *mut ::std::os::raw::c_ulong,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__14stofERKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEPm"]
    pub fn std_stof1(__str: *const std_wstring, __idx: *mut ::std::os::raw::c_ulong) -> f32;
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__14stodERKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEPm"]
    pub fn std_stod1(__str: *const std_wstring, __idx: *mut ::std::os::raw::c_ulong) -> f64;
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__15stoldERKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEEPm"]
    pub fn std_stold1(__str: *const std_wstring, __idx: *mut ::std::os::raw::c_ulong) -> f64;
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__110to_wstringEi"]
    pub fn std_to_wstring(__val: ::std::os::raw::c_int) -> std_wstring;
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__110to_wstringEj"]
    pub fn std_to_wstring1(__val: ::std::os::raw::c_uint) -> std_wstring;
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__110to_wstringEl"]
    pub fn std_to_wstring2(__val: ::std::os::raw::c_long) -> std_wstring;
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__110to_wstringEm"]
    pub fn std_to_wstring3(__val: ::std::os::raw::c_ulong) -> std_wstring;
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__110to_wstringEx"]
    pub fn std_to_wstring4(__val: ::std::os::raw::c_longlong) -> std_wstring;
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__110to_wstringEy"]
    pub fn std_to_wstring5(__val: ::std::os::raw::c_ulonglong) -> std_wstring;
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__110to_wstringEf"]
    pub fn std_to_wstring6(__val: f32) -> std_wstring;
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__110to_wstringEd"]
    pub fn std_to_wstring7(__val: f64) -> std_wstring;
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__110to_wstringEe"]
    pub fn std_to_wstring8(__val: f64) -> std_wstring;
}
extern "C" {
    #[link_name = "\u{1}npos"]
    pub static std_npos: std_basic_string_size_type;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___string_hash {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug)]
pub struct std_mutex {
    pub __m_: std___libcpp_mutex_t,
}
pub type std_mutex_native_handle_type = *mut std___libcpp_mutex_t;
const _: () = {
    ["Size of std_mutex"][::std::mem::size_of::<std_mutex>() - 64usize];
    ["Alignment of std_mutex"][::std::mem::align_of::<std_mutex>() - 8usize];
    ["Offset of field: std_mutex::__m_"][::std::mem::offset_of!(std_mutex, __m_) - 0usize];
};
extern "C" {
    #[link_name = "\u{1}__ZNSt3__15mutex4lockEv"]
    pub fn std_mutex_lock(this: *mut std_mutex);
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__15mutex8try_lockEv"]
    pub fn std_mutex_try_lock(this: *mut std_mutex) -> bool;
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__15mutex6unlockEv"]
    pub fn std_mutex_unlock(this: *mut std_mutex);
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__15mutexD1Ev"]
    pub fn std_mutex_mutex_destructor(this: *mut std_mutex);
}
impl std_mutex {
    #[inline]
    pub unsafe fn lock(&mut self) {
        std_mutex_lock(self)
    }
    #[inline]
    pub unsafe fn try_lock(&mut self) -> bool {
        std_mutex_try_lock(self)
    }
    #[inline]
    pub unsafe fn unlock(&mut self) {
        std_mutex_unlock(self)
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        std_mutex_mutex_destructor(self)
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_defer_lock_t {
    pub _address: u8,
}
const _: () = {
    ["Size of std_defer_lock_t"][::std::mem::size_of::<std_defer_lock_t>() - 1usize];
    ["Alignment of std_defer_lock_t"][::std::mem::align_of::<std_defer_lock_t>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_try_to_lock_t {
    pub _address: u8,
}
const _: () = {
    ["Size of std_try_to_lock_t"][::std::mem::size_of::<std_try_to_lock_t>() - 1usize];
    ["Alignment of std_try_to_lock_t"][::std::mem::align_of::<std_try_to_lock_t>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_adopt_lock_t {
    pub _address: u8,
}
const _: () = {
    ["Size of std_adopt_lock_t"][::std::mem::size_of::<std_adopt_lock_t>() - 1usize];
    ["Alignment of std_adopt_lock_t"][::std::mem::align_of::<std_adopt_lock_t>() - 1usize];
};
extern "C" {
    #[link_name = "\u{1}__ZNSt3__1L10defer_lockE"]
    pub static std_defer_lock: std_defer_lock_t;
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__1L11try_to_lockE"]
    pub static std_try_to_lock: std_try_to_lock_t;
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__1L10adopt_lockE"]
    pub static std_adopt_lock: std_adopt_lock_t;
}
#[repr(C)]
pub struct std_error_category__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct std_error_category {
    pub vtable_: *const std_error_category__bindgen_vtable,
}
const _: () = {
    ["Size of std_error_category"][::std::mem::size_of::<std_error_category>() - 8usize];
    ["Alignment of std_error_category"][::std::mem::align_of::<std_error_category>() - 8usize];
};
extern "C" {
    #[link_name = "\u{1}__ZNSt3__114error_categoryD1Ev"]
    pub fn std_error_category_error_category_destructor(this: *mut std_error_category);
}
extern "C" {
    #[link_name = "\u{1}__ZNKSt3__114error_category23default_error_conditionEi"]
    pub fn std_error_category_default_error_condition(
        this: *mut ::std::os::raw::c_void,
        __ev: ::std::os::raw::c_int,
    ) -> std_error_condition;
}
extern "C" {
    #[link_name = "\u{1}__ZNKSt3__114error_category10equivalentEiRKNS_15error_conditionE"]
    pub fn std_error_category_equivalent(
        this: *mut ::std::os::raw::c_void,
        __code: ::std::os::raw::c_int,
        __condition: *const std_error_condition,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}__ZNKSt3__114error_category10equivalentERKNS_10error_codeEi"]
    pub fn std_error_category_equivalent1(
        this: *mut ::std::os::raw::c_void,
        __code: *const std_error_code,
        __condition: ::std::os::raw::c_int,
    ) -> bool;
}
#[repr(C)]
#[derive(Debug)]
pub struct std___do_message {
    pub _base: std_error_category,
}
const _: () = {
    ["Size of std___do_message"][::std::mem::size_of::<std___do_message>() - 8usize];
    ["Alignment of std___do_message"][::std::mem::align_of::<std___do_message>() - 8usize];
};
extern "C" {
    #[link_name = "\u{1}__ZNSt3__116generic_categoryEv"]
    pub fn std_generic_category() -> *const std_error_category;
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__115system_categoryEv"]
    pub fn std_system_category() -> *const std_error_category;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_error_condition_enum {
    pub _base: std_false_type,
}
const _: () = {
    ["Size of template specialization: std_is_error_condition_enum_open0_std_errc_close0"]
        [::std::mem::size_of::<std_is_error_condition_enum>() - 1usize];
    ["Align of template specialization: std_is_error_condition_enum_open0_std_errc_close0"]
        [::std::mem::align_of::<std_is_error_condition_enum>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_error_condition {
    pub __val_: ::std::os::raw::c_int,
    pub __cat_: *const std_error_category,
}
const _: () = {
    ["Size of std_error_condition"][::std::mem::size_of::<std_error_condition>() - 16usize];
    ["Alignment of std_error_condition"][::std::mem::align_of::<std_error_condition>() - 8usize];
    ["Offset of field: std_error_condition::__val_"]
        [::std::mem::offset_of!(std_error_condition, __val_) - 0usize];
    ["Offset of field: std_error_condition::__cat_"]
        [::std::mem::offset_of!(std_error_condition, __cat_) - 8usize];
};
extern "C" {
    #[link_name = "\u{1}__ZNKSt3__115error_condition7messageEv"]
    pub fn std_error_condition_message(this: *const std_error_condition) -> std_string;
}
impl std_error_condition {
    #[inline]
    pub unsafe fn message(&self) -> std_string {
        std_error_condition_message(self)
    }
}
const _: () = {
    ["Size of template specialization: std_hash_open0_std_error_condition_close0"]
        [::std::mem::size_of::<std_hash>() - 1usize];
    ["Align of template specialization: std_hash_open0_std_error_condition_close0"]
        [::std::mem::align_of::<std_hash>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_is_error_code_enum {
    pub _base: std_false_type,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_error_code {
    pub __val_: ::std::os::raw::c_int,
    pub __cat_: *const std_error_category,
}
const _: () = {
    ["Size of std_error_code"][::std::mem::size_of::<std_error_code>() - 16usize];
    ["Alignment of std_error_code"][::std::mem::align_of::<std_error_code>() - 8usize];
    ["Offset of field: std_error_code::__val_"]
        [::std::mem::offset_of!(std_error_code, __val_) - 0usize];
    ["Offset of field: std_error_code::__cat_"]
        [::std::mem::offset_of!(std_error_code, __cat_) - 8usize];
};
extern "C" {
    #[link_name = "\u{1}__ZNKSt3__110error_code7messageEv"]
    pub fn std_error_code_message(this: *const std_error_code) -> std_string;
}
impl std_error_code {
    #[inline]
    pub unsafe fn message(&self) -> std_string {
        std_error_code_message(self)
    }
}
const _: () = {
    ["Size of template specialization: std_hash_open0_std_error_code_close0"]
        [::std::mem::size_of::<std_hash>() - 1usize];
    ["Align of template specialization: std_hash_open0_std_error_code_close0"]
        [::std::mem::align_of::<std_hash>() - 1usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct std_system_error {
    pub _base: std_runtime_error,
    pub __ec_: std_error_code,
}
const _: () = {
    ["Size of std_system_error"][::std::mem::size_of::<std_system_error>() - 32usize];
    ["Alignment of std_system_error"][::std::mem::align_of::<std_system_error>() - 8usize];
    ["Offset of field: std_system_error::__ec_"]
        [::std::mem::offset_of!(std_system_error, __ec_) - 16usize];
};
extern "C" {
    #[link_name = "\u{1}__ZNSt3__112system_errorC1ENS_10error_codeERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE"]
    pub fn std_system_error_system_error(
        this: *mut std_system_error,
        __ec: std_error_code,
        __what_arg: *const std_string,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__112system_errorC1ENS_10error_codeEPKc"]
    pub fn std_system_error_system_error1(
        this: *mut std_system_error,
        __ec: std_error_code,
        __what_arg: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__112system_errorC1ENS_10error_codeE"]
    pub fn std_system_error_system_error2(this: *mut std_system_error, __ec: std_error_code);
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__112system_errorC1EiRKNS_14error_categoryERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE"]
    pub fn std_system_error_system_error3(
        this: *mut std_system_error,
        __ev: ::std::os::raw::c_int,
        __ecat: *const std_error_category,
        __what_arg: *const std_string,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__112system_errorC1EiRKNS_14error_categoryEPKc"]
    pub fn std_system_error_system_error4(
        this: *mut std_system_error,
        __ev: ::std::os::raw::c_int,
        __ecat: *const std_error_category,
        __what_arg: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__112system_errorC1EiRKNS_14error_categoryE"]
    pub fn std_system_error_system_error5(
        this: *mut std_system_error,
        __ev: ::std::os::raw::c_int,
        __ecat: *const std_error_category,
    );
}
impl std_system_error {
    #[inline]
    pub unsafe fn new(__ec: std_error_code, __what_arg: *const std_string) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std_system_error_system_error(__bindgen_tmp.as_mut_ptr(), __ec, __what_arg);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(__ec: std_error_code, __what_arg: *const ::std::os::raw::c_char) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std_system_error_system_error1(__bindgen_tmp.as_mut_ptr(), __ec, __what_arg);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new2(__ec: std_error_code) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std_system_error_system_error2(__bindgen_tmp.as_mut_ptr(), __ec);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new3(
        __ev: ::std::os::raw::c_int,
        __ecat: *const std_error_category,
        __what_arg: *const std_string,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std_system_error_system_error3(__bindgen_tmp.as_mut_ptr(), __ev, __ecat, __what_arg);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new4(
        __ev: ::std::os::raw::c_int,
        __ecat: *const std_error_category,
        __what_arg: *const ::std::os::raw::c_char,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std_system_error_system_error4(__bindgen_tmp.as_mut_ptr(), __ev, __ecat, __what_arg);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new5(__ev: ::std::os::raw::c_int, __ecat: *const std_error_category) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std_system_error_system_error5(__bindgen_tmp.as_mut_ptr(), __ev, __ecat);
        __bindgen_tmp.assume_init()
    }
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__112system_errorD1Ev"]
    pub fn std_system_error_system_error_destructor(this: *mut std_system_error);
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__120__throw_system_errorEiPKc"]
    pub fn std___throw_system_error(
        __ev: ::std::os::raw::c_int,
        __what_arg: *const ::std::os::raw::c_char,
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct std_unique_lock<_Mutex> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Mutex>>,
    pub __m_: *mut std_unique_lock_mutex_type<_Mutex>,
    pub __owns_: bool,
}
pub type std_unique_lock_mutex_type<_Mutex> = _Mutex;
pub const std_cv_status_no_timeout: std_cv_status = 0;
pub const std_cv_status_timeout: std_cv_status = 1;
pub type std_cv_status = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug)]
pub struct std_condition_variable {
    pub __cv_: std___libcpp_condvar_t,
}
pub type std_condition_variable_native_handle_type = *mut std___libcpp_condvar_t;
const _: () = {
    ["Size of std_condition_variable"][::std::mem::size_of::<std_condition_variable>() - 48usize];
    ["Alignment of std_condition_variable"]
        [::std::mem::align_of::<std_condition_variable>() - 8usize];
    ["Offset of field: std_condition_variable::__cv_"]
        [::std::mem::offset_of!(std_condition_variable, __cv_) - 0usize];
};
extern "C" {
    #[link_name = "\u{1}__ZNSt3__118condition_variable10notify_oneEv"]
    pub fn std_condition_variable_notify_one(this: *mut std_condition_variable);
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__118condition_variable10notify_allEv"]
    pub fn std_condition_variable_notify_all(this: *mut std_condition_variable);
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__118condition_variable4waitERNS_11unique_lockINS_5mutexEEE"]
    pub fn std_condition_variable_wait(
        this: *mut std_condition_variable,
        __lk: *mut std_unique_lock<std_mutex>,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__118condition_variableD1Ev"]
    pub fn std_condition_variable_condition_variable_destructor(this: *mut std_condition_variable);
}
impl std_condition_variable {
    #[inline]
    pub unsafe fn notify_one(&mut self) {
        std_condition_variable_notify_one(self)
    }
    #[inline]
    pub unsafe fn notify_all(&mut self) {
        std_condition_variable_notify_all(self)
    }
    #[inline]
    pub unsafe fn wait(&mut self, __lk: *mut std_unique_lock<std_mutex>) {
        std_condition_variable_wait(self, __lk)
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        std_condition_variable_condition_variable_destructor(self)
    }
}
#[repr(C)]
#[derive(Debug)]
pub struct std_lock_guard<_Mutex> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Mutex>>,
    pub __m_: *mut std_lock_guard_mutex_type<_Mutex>,
}
pub type std_lock_guard_mutex_type<_Mutex> = _Mutex;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___thread_id {
    pub __id_: std___libcpp_thread_id,
}
const _: () = {
    ["Size of std___thread_id"][::std::mem::size_of::<std___thread_id>() - 8usize];
    ["Alignment of std___thread_id"][::std::mem::align_of::<std___thread_id>() - 8usize];
    ["Offset of field: std___thread_id::__id_"]
        [::std::mem::offset_of!(std___thread_id, __id_) - 0usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct std_recursive_mutex {
    pub __m_: std___libcpp_recursive_mutex_t,
}
pub type std_recursive_mutex_native_handle_type = *mut std___libcpp_recursive_mutex_t;
const _: () = {
    ["Size of std_recursive_mutex"][::std::mem::size_of::<std_recursive_mutex>() - 64usize];
    ["Alignment of std_recursive_mutex"][::std::mem::align_of::<std_recursive_mutex>() - 8usize];
    ["Offset of field: std_recursive_mutex::__m_"]
        [::std::mem::offset_of!(std_recursive_mutex, __m_) - 0usize];
};
extern "C" {
    #[link_name = "\u{1}__ZNSt3__115recursive_mutex4lockEv"]
    pub fn std_recursive_mutex_lock(this: *mut std_recursive_mutex);
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__115recursive_mutex8try_lockEv"]
    pub fn std_recursive_mutex_try_lock(this: *mut std_recursive_mutex) -> bool;
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__115recursive_mutex6unlockEv"]
    pub fn std_recursive_mutex_unlock(this: *mut std_recursive_mutex);
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__115recursive_mutexC1Ev"]
    pub fn std_recursive_mutex_recursive_mutex(this: *mut std_recursive_mutex);
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__115recursive_mutexD1Ev"]
    pub fn std_recursive_mutex_recursive_mutex_destructor(this: *mut std_recursive_mutex);
}
impl std_recursive_mutex {
    #[inline]
    pub unsafe fn lock(&mut self) {
        std_recursive_mutex_lock(self)
    }
    #[inline]
    pub unsafe fn try_lock(&mut self) -> bool {
        std_recursive_mutex_try_lock(self)
    }
    #[inline]
    pub unsafe fn unlock(&mut self) {
        std_recursive_mutex_unlock(self)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std_recursive_mutex_recursive_mutex(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        std_recursive_mutex_recursive_mutex_destructor(self)
    }
}
#[repr(C)]
#[derive(Debug)]
pub struct std_timed_mutex {
    pub __m_: std_mutex,
    pub __cv_: std_condition_variable,
    pub __locked_: bool,
}
const _: () = {
    ["Size of std_timed_mutex"][::std::mem::size_of::<std_timed_mutex>() - 120usize];
    ["Alignment of std_timed_mutex"][::std::mem::align_of::<std_timed_mutex>() - 8usize];
    ["Offset of field: std_timed_mutex::__m_"]
        [::std::mem::offset_of!(std_timed_mutex, __m_) - 0usize];
    ["Offset of field: std_timed_mutex::__cv_"]
        [::std::mem::offset_of!(std_timed_mutex, __cv_) - 64usize];
    ["Offset of field: std_timed_mutex::__locked_"]
        [::std::mem::offset_of!(std_timed_mutex, __locked_) - 112usize];
};
extern "C" {
    #[link_name = "\u{1}__ZNSt3__111timed_mutex4lockEv"]
    pub fn std_timed_mutex_lock(this: *mut std_timed_mutex);
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__111timed_mutex8try_lockEv"]
    pub fn std_timed_mutex_try_lock(this: *mut std_timed_mutex) -> bool;
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__111timed_mutex6unlockEv"]
    pub fn std_timed_mutex_unlock(this: *mut std_timed_mutex);
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__111timed_mutexC1Ev"]
    pub fn std_timed_mutex_timed_mutex(this: *mut std_timed_mutex);
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__111timed_mutexD1Ev"]
    pub fn std_timed_mutex_timed_mutex_destructor(this: *mut std_timed_mutex);
}
impl std_timed_mutex {
    #[inline]
    pub unsafe fn lock(&mut self) {
        std_timed_mutex_lock(self)
    }
    #[inline]
    pub unsafe fn try_lock(&mut self) -> bool {
        std_timed_mutex_try_lock(self)
    }
    #[inline]
    pub unsafe fn unlock(&mut self) {
        std_timed_mutex_unlock(self)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std_timed_mutex_timed_mutex(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        std_timed_mutex_timed_mutex_destructor(self)
    }
}
#[repr(C)]
#[derive(Debug)]
pub struct std_recursive_timed_mutex {
    pub __m_: std_mutex,
    pub __cv_: std_condition_variable,
    pub __count_: ::std::os::raw::c_ulong,
    pub __id_: std___thread_id,
}
const _: () = {
    ["Size of std_recursive_timed_mutex"]
        [::std::mem::size_of::<std_recursive_timed_mutex>() - 128usize];
    ["Alignment of std_recursive_timed_mutex"]
        [::std::mem::align_of::<std_recursive_timed_mutex>() - 8usize];
    ["Offset of field: std_recursive_timed_mutex::__m_"]
        [::std::mem::offset_of!(std_recursive_timed_mutex, __m_) - 0usize];
    ["Offset of field: std_recursive_timed_mutex::__cv_"]
        [::std::mem::offset_of!(std_recursive_timed_mutex, __cv_) - 64usize];
    ["Offset of field: std_recursive_timed_mutex::__count_"]
        [::std::mem::offset_of!(std_recursive_timed_mutex, __count_) - 112usize];
    ["Offset of field: std_recursive_timed_mutex::__id_"]
        [::std::mem::offset_of!(std_recursive_timed_mutex, __id_) - 120usize];
};
extern "C" {
    #[link_name = "\u{1}__ZNSt3__121recursive_timed_mutex4lockEv"]
    pub fn std_recursive_timed_mutex_lock(this: *mut std_recursive_timed_mutex);
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__121recursive_timed_mutex8try_lockEv"]
    pub fn std_recursive_timed_mutex_try_lock(this: *mut std_recursive_timed_mutex) -> bool;
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__121recursive_timed_mutex6unlockEv"]
    pub fn std_recursive_timed_mutex_unlock(this: *mut std_recursive_timed_mutex);
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__121recursive_timed_mutexC1Ev"]
    pub fn std_recursive_timed_mutex_recursive_timed_mutex(this: *mut std_recursive_timed_mutex);
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__121recursive_timed_mutexD1Ev"]
    pub fn std_recursive_timed_mutex_recursive_timed_mutex_destructor(
        this: *mut std_recursive_timed_mutex,
    );
}
impl std_recursive_timed_mutex {
    #[inline]
    pub unsafe fn lock(&mut self) {
        std_recursive_timed_mutex_lock(self)
    }
    #[inline]
    pub unsafe fn try_lock(&mut self) -> bool {
        std_recursive_timed_mutex_try_lock(self)
    }
    #[inline]
    pub unsafe fn unlock(&mut self) {
        std_recursive_timed_mutex_unlock(self)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std_recursive_timed_mutex_recursive_timed_mutex(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        std_recursive_timed_mutex_recursive_timed_mutex_destructor(self)
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_once_flag {
    pub __state_: std_once_flag__State_type,
}
pub type std_once_flag__State_type = ::std::os::raw::c_ulong;
const _: () = {
    ["Size of std_once_flag"][::std::mem::size_of::<std_once_flag>() - 8usize];
    ["Alignment of std_once_flag"][::std::mem::align_of::<std_once_flag>() - 8usize];
    ["Offset of field: std_once_flag::__state_"]
        [::std::mem::offset_of!(std_once_flag, __state_) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___call_once_param<_Fp> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Fp>>,
    pub __f_: *mut _Fp,
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__111__call_onceERVmPvPFvS2_E"]
    pub fn std___call_once(
        arg1: *mut std_once_flag__State_type,
        arg2: *mut ::std::os::raw::c_void,
        arg3: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    );
}
#[repr(C)]
#[derive(Debug)]
pub struct std_locale {
    pub __locale_: *mut std_locale___imp,
}
pub type std_locale_category = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_locale___imp {
    _unused: [u8; 0],
}
pub const std_locale_none: std_locale_category = 0;
pub const std_locale_collate: std_locale_category = 1;
pub const std_locale_ctype: std_locale_category = 2;
pub const std_locale_monetary: std_locale_category = 8;
pub const std_locale_numeric: std_locale_category = 16;
pub const std_locale_time: std_locale_category = 32;
pub const std_locale_messages: std_locale_category = 4;
pub const std_locale_all: std_locale_category = 63;
const _: () = {
    ["Size of std_locale"][::std::mem::size_of::<std_locale>() - 8usize];
    ["Alignment of std_locale"][::std::mem::align_of::<std_locale>() - 8usize];
    ["Offset of field: std_locale::__locale_"]
        [::std::mem::offset_of!(std_locale, __locale_) - 0usize];
};
extern "C" {
    #[link_name = "\u{1}__ZNKSt3__16locale4nameEv"]
    pub fn std_locale_name(this: *const std_locale) -> std_string;
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__16locale6globalERKS0_"]
    pub fn std_locale_global(arg1: *const std_locale) -> std_locale;
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__16locale7classicEv"]
    pub fn std_locale_classic() -> *const std_locale;
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__16localeC1Ev"]
    pub fn std_locale_locale(this: *mut std_locale);
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__16localeC1ERKS0_"]
    pub fn std_locale_locale1(this: *mut std_locale, arg1: *const std_locale);
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__16localeC1EPKc"]
    pub fn std_locale_locale2(this: *mut std_locale, arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__16localeC1ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE"]
    pub fn std_locale_locale3(this: *mut std_locale, arg1: *const std_string);
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__16localeC1ERKS0_PKci"]
    pub fn std_locale_locale4(
        this: *mut std_locale,
        arg1: *const std_locale,
        arg2: *const ::std::os::raw::c_char,
        arg3: std_locale_category,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__16localeC1ERKS0_RKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEi"]
    pub fn std_locale_locale5(
        this: *mut std_locale,
        arg1: *const std_locale,
        arg2: *const std_string,
        arg3: std_locale_category,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__16localeC1ERKS0_S2_i"]
    pub fn std_locale_locale6(
        this: *mut std_locale,
        arg1: *const std_locale,
        arg2: *const std_locale,
        arg3: std_locale_category,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__16localeD1Ev"]
    pub fn std_locale_locale_destructor(this: *mut std_locale);
}
impl std_locale {
    #[inline]
    pub unsafe fn name(&self) -> std_string {
        std_locale_name(self)
    }
    #[inline]
    pub unsafe fn global(arg1: *const std_locale) -> std_locale {
        std_locale_global(arg1)
    }
    #[inline]
    pub unsafe fn classic() -> *const std_locale {
        std_locale_classic()
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std_locale_locale(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(arg1: *const std_locale) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std_locale_locale1(__bindgen_tmp.as_mut_ptr(), arg1);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new2(arg1: *const ::std::os::raw::c_char) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std_locale_locale2(__bindgen_tmp.as_mut_ptr(), arg1);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new3(arg1: *const std_string) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std_locale_locale3(__bindgen_tmp.as_mut_ptr(), arg1);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new4(
        arg1: *const std_locale,
        arg2: *const ::std::os::raw::c_char,
        arg3: std_locale_category,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std_locale_locale4(__bindgen_tmp.as_mut_ptr(), arg1, arg2, arg3);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new5(
        arg1: *const std_locale,
        arg2: *const std_string,
        arg3: std_locale_category,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std_locale_locale5(__bindgen_tmp.as_mut_ptr(), arg1, arg2, arg3);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new6(
        arg1: *const std_locale,
        arg2: *const std_locale,
        arg3: std_locale_category,
    ) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std_locale_locale6(__bindgen_tmp.as_mut_ptr(), arg1, arg2, arg3);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        std_locale_locale_destructor(self)
    }
}
#[repr(C)]
#[derive(Debug)]
pub struct std_locale_facet {
    pub _base: std___shared_count,
}
const _: () = {
    ["Size of std_locale_facet"][::std::mem::size_of::<std_locale_facet>() - 16usize];
    ["Alignment of std_locale_facet"][::std::mem::align_of::<std_locale_facet>() - 8usize];
};
extern "C" {
    #[link_name = "\u{1}__ZNSt3__16locale5facetD1Ev"]
    pub fn std_locale_facet_facet_destructor(this: *mut std_locale_facet);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_locale_id {
    pub __flag_: std_once_flag,
    pub __id_: ::std::os::raw::c_int,
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__16locale2id9__next_idE"]
    pub static mut std_locale_id___next_id: ::std::os::raw::c_int;
}
const _: () = {
    ["Size of std_locale_id"][::std::mem::size_of::<std_locale_id>() - 16usize];
    ["Alignment of std_locale_id"][::std::mem::align_of::<std_locale_id>() - 8usize];
    ["Offset of field: std_locale_id::__flag_"]
        [::std::mem::offset_of!(std_locale_id, __flag_) - 0usize];
    ["Offset of field: std_locale_id::__id_"]
        [::std::mem::offset_of!(std_locale_id, __id_) - 8usize];
};
extern "C" {
    #[link_name = "\u{1}__ZNSt3__16locale2id5__getEv"]
    pub fn std_locale_id___get(this: *mut std_locale_id) -> ::std::os::raw::c_long;
}
impl std_locale_id {
    #[inline]
    pub unsafe fn __get(&mut self) -> ::std::os::raw::c_long {
        std_locale_id___get(self)
    }
}
#[repr(C)]
#[derive(Debug)]
pub struct std_collate {
    pub _base: std_locale_facet,
}
pub type std_collate_char_type<_CharT> = _CharT;
pub type std_collate_string_type = std_basic_string;
extern "C" {
    #[link_name = "\u{1}id"]
    pub static mut std_id: std_locale_id;
}
const _: () = {
    ["Size of template specialization: std_collate_open0_char_close0"]
        [::std::mem::size_of::<std_collate>() - 16usize];
    ["Align of template specialization: std_collate_open0_char_close0"]
        [::std::mem::align_of::<std_collate>() - 8usize];
};
const _: () = {
    ["Size of template specialization: std_collate_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_collate>() - 16usize];
    ["Align of template specialization: std_collate_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_collate>() - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_collate_byname {
    pub _address: u8,
}
const _: () = {
    ["Size of template specialization: std_collate_byname_open0_char_close0"]
        [::std::mem::size_of::<std_collate_byname>() - 24usize];
    ["Align of template specialization: std_collate_byname_open0_char_close0"]
        [::std::mem::align_of::<std_collate_byname>() - 8usize];
};
const _: () = {
    ["Size of template specialization: std_collate_byname_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_collate_byname>() - 24usize];
    ["Align of template specialization: std_collate_byname_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_collate_byname>() - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_ctype_base {
    pub _address: u8,
}
pub type std_ctype_base_mask = __uint32_t;
pub const std_ctype_base_space: std_ctype_base_mask = 16384;
pub const std_ctype_base_print: std_ctype_base_mask = 262144;
pub const std_ctype_base_cntrl: std_ctype_base_mask = 512;
pub const std_ctype_base_upper: std_ctype_base_mask = 32768;
pub const std_ctype_base_lower: std_ctype_base_mask = 4096;
pub const std_ctype_base_alpha: std_ctype_base_mask = 256;
pub const std_ctype_base_digit: std_ctype_base_mask = 1024;
pub const std_ctype_base_punct: std_ctype_base_mask = 8192;
pub const std_ctype_base_xdigit: std_ctype_base_mask = 65536;
pub const std_ctype_base_blank: std_ctype_base_mask = 131072;
pub const std_ctype_base___regex_word: std_ctype_base_mask = 128;
pub const std_ctype_base_alnum: std_ctype_base_mask = 1280;
pub const std_ctype_base_graph: std_ctype_base_mask = 9472;
const _: () = {
    ["Size of std_ctype_base"][::std::mem::size_of::<std_ctype_base>() - 1usize];
    ["Alignment of std_ctype_base"][::std::mem::align_of::<std_ctype_base>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_ctype {
    pub _address: u8,
}
const _: () = {
    ["Size of template specialization: std_ctype_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_ctype>() - 16usize];
    ["Align of template specialization: std_ctype_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_ctype>() - 8usize];
};
const _: () = {
    ["Size of template specialization: std_ctype_open0_char_close0"]
        [::std::mem::size_of::<std_ctype>() - 32usize];
    ["Align of template specialization: std_ctype_open0_char_close0"]
        [::std::mem::align_of::<std_ctype>() - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_ctype_byname {
    pub _address: u8,
}
const _: () = {
    ["Size of template specialization: std_ctype_byname_open0_char_close0"]
        [::std::mem::size_of::<std_ctype_byname>() - 40usize];
    ["Align of template specialization: std_ctype_byname_open0_char_close0"]
        [::std::mem::align_of::<std_ctype_byname>() - 8usize];
};
const _: () = {
    ["Size of template specialization: std_ctype_byname_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_ctype_byname>() - 24usize];
    ["Align of template specialization: std_ctype_byname_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_ctype_byname>() - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_codecvt_base {
    pub _address: u8,
}
pub const std_codecvt_base_result_ok: std_codecvt_base_result = 0;
pub const std_codecvt_base_result_partial: std_codecvt_base_result = 1;
pub const std_codecvt_base_result_error: std_codecvt_base_result = 2;
pub const std_codecvt_base_result_noconv: std_codecvt_base_result = 3;
pub type std_codecvt_base_result = ::std::os::raw::c_uint;
const _: () = {
    ["Size of std_codecvt_base"][::std::mem::size_of::<std_codecvt_base>() - 1usize];
    ["Alignment of std_codecvt_base"][::std::mem::align_of::<std_codecvt_base>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_codecvt {
    pub _address: u8,
}
const _: () = {
    ["Size of template specialization: std_codecvt_open0_char_char___mbstate_t_close0"]
        [::std::mem::size_of::<std_codecvt>() - 16usize];
    ["Align of template specialization: std_codecvt_open0_char_char___mbstate_t_close0"]
        [::std::mem::align_of::<std_codecvt>() - 8usize];
};
const _: () = {
    ["Size of template specialization: std_codecvt_open0_wchar_t_char___mbstate_t_close0"]
        [::std::mem::size_of::<std_codecvt>() - 24usize];
    ["Align of template specialization: std_codecvt_open0_wchar_t_char___mbstate_t_close0"]
        [::std::mem::align_of::<std_codecvt>() - 8usize];
};
const _: () = {
    ["Size of template specialization: std_codecvt_open0_char16_t_char___mbstate_t_close0"]
        [::std::mem::size_of::<std_codecvt>() - 16usize];
    ["Align of template specialization: std_codecvt_open0_char16_t_char___mbstate_t_close0"]
        [::std::mem::align_of::<std_codecvt>() - 8usize];
};
const _: () = {
    ["Size of template specialization: std_codecvt_open0_char32_t_char___mbstate_t_close0"]
        [::std::mem::size_of::<std_codecvt>() - 16usize];
    ["Align of template specialization: std_codecvt_open0_char32_t_char___mbstate_t_close0"]
        [::std::mem::align_of::<std_codecvt>() - 8usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct std_codecvt_byname {
    pub _address: u8,
}
const _: () = {
    ["Size of template specialization: std_codecvt_byname_open0_char_char___mbstate_t_close0"]
        [::std::mem::size_of::<std_codecvt_byname>() - 16usize];
    ["Align of template specialization: std_codecvt_byname_open0_char_char___mbstate_t_close0"]
        [::std::mem::align_of::<std_codecvt_byname>() - 8usize];
};
const _: () = {
    ["Size of template specialization: std_codecvt_byname_open0_wchar_t_char___mbstate_t_close0"]
        [::std::mem::size_of::<std_codecvt_byname>() - 24usize];
    ["Align of template specialization: std_codecvt_byname_open0_wchar_t_char___mbstate_t_close0"] [:: std :: mem :: align_of :: < std_codecvt_byname > () - 8usize] ;
};
const _: () = {
    ["Size of template specialization: std_codecvt_byname_open0_char16_t_char___mbstate_t_close0"] [:: std :: mem :: size_of :: < std_codecvt_byname > () - 16usize] ;
    ["Align of template specialization: std_codecvt_byname_open0_char16_t_char___mbstate_t_close0"] [:: std :: mem :: align_of :: < std_codecvt_byname > () - 8usize] ;
};
const _: () = {
    ["Size of template specialization: std_codecvt_byname_open0_char32_t_char___mbstate_t_close0"] [:: std :: mem :: size_of :: < std_codecvt_byname > () - 16usize] ;
    ["Align of template specialization: std_codecvt_byname_open0_char32_t_char___mbstate_t_close0"] [:: std :: mem :: align_of :: < std_codecvt_byname > () - 8usize] ;
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_numpunct {
    pub _address: u8,
}
const _: () = {
    ["Size of template specialization: std_numpunct_open0_char_close0"]
        [::std::mem::size_of::<std_numpunct>() - 48usize];
    ["Align of template specialization: std_numpunct_open0_char_close0"]
        [::std::mem::align_of::<std_numpunct>() - 8usize];
};
const _: () = {
    ["Size of template specialization: std_numpunct_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_numpunct>() - 48usize];
    ["Align of template specialization: std_numpunct_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_numpunct>() - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_numpunct_byname {
    pub _address: u8,
}
const _: () = {
    ["Size of template specialization: std_numpunct_byname_open0_char_close0"]
        [::std::mem::size_of::<std_numpunct_byname>() - 48usize];
    ["Align of template specialization: std_numpunct_byname_open0_char_close0"]
        [::std::mem::align_of::<std_numpunct_byname>() - 8usize];
};
const _: () = {
    ["Size of template specialization: std_numpunct_byname_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_numpunct_byname>() - 48usize];
    ["Align of template specialization: std_numpunct_byname_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_numpunct_byname>() - 8usize];
};
pub type std_streamsize = ::std::os::raw::c_long;
#[repr(C)]
pub struct std_ios_base__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct std_ios_base {
    pub vtable_: *const std_ios_base__bindgen_vtable,
    pub __fmtflags_: std_ios_base_fmtflags,
    pub __precision_: std_streamsize,
    pub __width_: std_streamsize,
    pub __rdstate_: std_ios_base_iostate,
    pub __exceptions_: std_ios_base_iostate,
    pub __rdbuf_: *mut ::std::os::raw::c_void,
    pub __loc_: *mut ::std::os::raw::c_void,
    pub __fn_: *mut std_ios_base_event_callback,
    pub __index_: *mut ::std::os::raw::c_int,
    pub __event_size_: ::std::os::raw::c_ulong,
    pub __event_cap_: ::std::os::raw::c_ulong,
    pub __iarray_: *mut ::std::os::raw::c_long,
    pub __iarray_size_: ::std::os::raw::c_ulong,
    pub __iarray_cap_: ::std::os::raw::c_ulong,
    pub __parray_: *mut *mut ::std::os::raw::c_void,
    pub __parray_size_: ::std::os::raw::c_ulong,
    pub __parray_cap_: ::std::os::raw::c_ulong,
}
pub type std_ios_base_fmtflags = ::std::os::raw::c_uint;
pub type std_ios_base_iostate = ::std::os::raw::c_uint;
pub type std_ios_base_openmode = ::std::os::raw::c_uint;
pub const std_ios_base_seekdir_beg: std_ios_base_seekdir = 0;
pub const std_ios_base_seekdir_cur: std_ios_base_seekdir = 1;
pub const std_ios_base_seekdir_end: std_ios_base_seekdir = 2;
pub type std_ios_base_seekdir = ::std::os::raw::c_uint;
pub type std_ios_base_io_state = std_ios_base_iostate;
pub type std_ios_base_open_mode = std_ios_base_openmode;
pub use self::std_ios_base_seekdir as std_ios_base_seek_dir;
pub type std_ios_base_streamoff = std_streamoff;
pub type std_ios_base_streampos = std_streampos;
pub const std_ios_base_event_erase_event: std_ios_base_event = 0;
pub const std_ios_base_event_imbue_event: std_ios_base_event = 1;
pub const std_ios_base_event_copyfmt_event: std_ios_base_event = 2;
pub type std_ios_base_event = ::std::os::raw::c_uint;
pub type std_ios_base_event_callback = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: std_ios_base_event,
        arg2: *mut std_ios_base,
        __index: ::std::os::raw::c_int,
    ),
>;
pub const std_ios_base_boolalpha: std_ios_base_fmtflags = 1;
pub const std_ios_base_dec: std_ios_base_fmtflags = 2;
pub const std_ios_base_fixed: std_ios_base_fmtflags = 4;
pub const std_ios_base_hex: std_ios_base_fmtflags = 8;
pub const std_ios_base_internal: std_ios_base_fmtflags = 16;
pub const std_ios_base_left: std_ios_base_fmtflags = 32;
pub const std_ios_base_oct: std_ios_base_fmtflags = 64;
pub const std_ios_base_right: std_ios_base_fmtflags = 128;
pub const std_ios_base_scientific: std_ios_base_fmtflags = 256;
pub const std_ios_base_showbase: std_ios_base_fmtflags = 512;
pub const std_ios_base_showpoint: std_ios_base_fmtflags = 1024;
pub const std_ios_base_showpos: std_ios_base_fmtflags = 2048;
pub const std_ios_base_skipws: std_ios_base_fmtflags = 4096;
pub const std_ios_base_unitbuf: std_ios_base_fmtflags = 8192;
pub const std_ios_base_uppercase: std_ios_base_fmtflags = 16384;
pub const std_ios_base_adjustfield: std_ios_base_fmtflags = 176;
pub const std_ios_base_basefield: std_ios_base_fmtflags = 74;
pub const std_ios_base_floatfield: std_ios_base_fmtflags = 260;
pub const std_ios_base_badbit: std_ios_base_iostate = 1;
pub const std_ios_base_eofbit: std_ios_base_iostate = 2;
pub const std_ios_base_failbit: std_ios_base_iostate = 4;
pub const std_ios_base_goodbit: std_ios_base_iostate = 0;
pub const std_ios_base_app: std_ios_base_openmode = 1;
pub const std_ios_base_ate: std_ios_base_openmode = 2;
pub const std_ios_base_binary: std_ios_base_openmode = 4;
pub const std_ios_base_in: std_ios_base_openmode = 8;
pub const std_ios_base_out: std_ios_base_openmode = 16;
pub const std_ios_base_trunc: std_ios_base_openmode = 32;
extern "C" {
    #[link_name = "\u{1}__ZNSt3__18ios_base9__xindex_E"]
    pub static mut std_ios_base___xindex_: std_atomic;
}
const _: () = {
    ["Size of std_ios_base"][::std::mem::size_of::<std_ios_base>() - 136usize];
    ["Alignment of std_ios_base"][::std::mem::align_of::<std_ios_base>() - 8usize];
    ["Offset of field: std_ios_base::__fmtflags_"]
        [::std::mem::offset_of!(std_ios_base, __fmtflags_) - 8usize];
    ["Offset of field: std_ios_base::__precision_"]
        [::std::mem::offset_of!(std_ios_base, __precision_) - 16usize];
    ["Offset of field: std_ios_base::__width_"]
        [::std::mem::offset_of!(std_ios_base, __width_) - 24usize];
    ["Offset of field: std_ios_base::__rdstate_"]
        [::std::mem::offset_of!(std_ios_base, __rdstate_) - 32usize];
    ["Offset of field: std_ios_base::__exceptions_"]
        [::std::mem::offset_of!(std_ios_base, __exceptions_) - 36usize];
    ["Offset of field: std_ios_base::__rdbuf_"]
        [::std::mem::offset_of!(std_ios_base, __rdbuf_) - 40usize];
    ["Offset of field: std_ios_base::__loc_"]
        [::std::mem::offset_of!(std_ios_base, __loc_) - 48usize];
    ["Offset of field: std_ios_base::__fn_"][::std::mem::offset_of!(std_ios_base, __fn_) - 56usize];
    ["Offset of field: std_ios_base::__index_"]
        [::std::mem::offset_of!(std_ios_base, __index_) - 64usize];
    ["Offset of field: std_ios_base::__event_size_"]
        [::std::mem::offset_of!(std_ios_base, __event_size_) - 72usize];
    ["Offset of field: std_ios_base::__event_cap_"]
        [::std::mem::offset_of!(std_ios_base, __event_cap_) - 80usize];
    ["Offset of field: std_ios_base::__iarray_"]
        [::std::mem::offset_of!(std_ios_base, __iarray_) - 88usize];
    ["Offset of field: std_ios_base::__iarray_size_"]
        [::std::mem::offset_of!(std_ios_base, __iarray_size_) - 96usize];
    ["Offset of field: std_ios_base::__iarray_cap_"]
        [::std::mem::offset_of!(std_ios_base, __iarray_cap_) - 104usize];
    ["Offset of field: std_ios_base::__parray_"]
        [::std::mem::offset_of!(std_ios_base, __parray_) - 112usize];
    ["Offset of field: std_ios_base::__parray_size_"]
        [::std::mem::offset_of!(std_ios_base, __parray_size_) - 120usize];
    ["Offset of field: std_ios_base::__parray_cap_"]
        [::std::mem::offset_of!(std_ios_base, __parray_cap_) - 128usize];
};
extern "C" {
    #[link_name = "\u{1}__ZNSt3__18ios_base5imbueERKNS_6localeE"]
    pub fn std_ios_base_imbue(this: *mut std_ios_base, __loc: *const std_locale) -> std_locale;
}
extern "C" {
    #[link_name = "\u{1}__ZNKSt3__18ios_base6getlocEv"]
    pub fn std_ios_base_getloc(this: *const std_ios_base) -> std_locale;
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__18ios_base6xallocEv"]
    pub fn std_ios_base_xalloc() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__18ios_base5iwordEi"]
    pub fn std_ios_base_iword(
        this: *mut std_ios_base,
        __index: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_long;
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__18ios_base5pwordEi"]
    pub fn std_ios_base_pword(
        this: *mut std_ios_base,
        __index: ::std::os::raw::c_int,
    ) -> *mut *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__18ios_base17register_callbackEPFvNS0_5eventERS0_iEi"]
    pub fn std_ios_base_register_callback(
        this: *mut std_ios_base,
        __fn: std_ios_base_event_callback,
        __index: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__18ios_base15sync_with_stdioEb"]
    pub fn std_ios_base_sync_with_stdio(__sync: bool) -> bool;
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__18ios_base5clearEj"]
    pub fn std_ios_base_clear(this: *mut std_ios_base, __state: std_ios_base_iostate);
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__18ios_base33__set_badbit_and_consider_rethrowEv"]
    pub fn std_ios_base___set_badbit_and_consider_rethrow(this: *mut std_ios_base);
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__18ios_base34__set_failbit_and_consider_rethrowEv"]
    pub fn std_ios_base___set_failbit_and_consider_rethrow(this: *mut std_ios_base);
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__18ios_base4initEPv"]
    pub fn std_ios_base_init(this: *mut std_ios_base, __sb: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__18ios_base16__call_callbacksENS0_5eventE"]
    pub fn std_ios_base___call_callbacks(this: *mut std_ios_base, arg1: std_ios_base_event);
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__18ios_base7copyfmtERKS0_"]
    pub fn std_ios_base_copyfmt(this: *mut std_ios_base, arg1: *const std_ios_base);
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__18ios_base4moveERS0_"]
    pub fn std_ios_base_move(this: *mut std_ios_base, arg1: *mut std_ios_base);
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__18ios_base4swapERS0_"]
    pub fn std_ios_base_swap(this: *mut std_ios_base, arg1: *mut std_ios_base);
}
impl std_ios_base {
    #[inline]
    pub unsafe fn imbue(&mut self, __loc: *const std_locale) -> std_locale {
        std_ios_base_imbue(self, __loc)
    }
    #[inline]
    pub unsafe fn getloc(&self) -> std_locale {
        std_ios_base_getloc(self)
    }
    #[inline]
    pub unsafe fn xalloc() -> ::std::os::raw::c_int {
        std_ios_base_xalloc()
    }
    #[inline]
    pub unsafe fn iword(&mut self, __index: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_long {
        std_ios_base_iword(self, __index)
    }
    #[inline]
    pub unsafe fn pword(
        &mut self,
        __index: ::std::os::raw::c_int,
    ) -> *mut *mut ::std::os::raw::c_void {
        std_ios_base_pword(self, __index)
    }
    #[inline]
    pub unsafe fn register_callback(
        &mut self,
        __fn: std_ios_base_event_callback,
        __index: ::std::os::raw::c_int,
    ) {
        std_ios_base_register_callback(self, __fn, __index)
    }
    #[inline]
    pub unsafe fn sync_with_stdio(__sync: bool) -> bool {
        std_ios_base_sync_with_stdio(__sync)
    }
    #[inline]
    pub unsafe fn clear(&mut self, __state: std_ios_base_iostate) {
        std_ios_base_clear(self, __state)
    }
    #[inline]
    pub unsafe fn __set_badbit_and_consider_rethrow(&mut self) {
        std_ios_base___set_badbit_and_consider_rethrow(self)
    }
    #[inline]
    pub unsafe fn __set_failbit_and_consider_rethrow(&mut self) {
        std_ios_base___set_failbit_and_consider_rethrow(self)
    }
    #[inline]
    pub unsafe fn init(&mut self, __sb: *mut ::std::os::raw::c_void) {
        std_ios_base_init(self, __sb)
    }
    #[inline]
    pub unsafe fn __call_callbacks(&mut self, arg1: std_ios_base_event) {
        std_ios_base___call_callbacks(self, arg1)
    }
    #[inline]
    pub unsafe fn copyfmt(&mut self, arg1: *const std_ios_base) {
        std_ios_base_copyfmt(self, arg1)
    }
    #[inline]
    pub unsafe fn move_(&mut self, arg1: *mut std_ios_base) {
        std_ios_base_move(self, arg1)
    }
    #[inline]
    pub unsafe fn swap(&mut self, arg1: *mut std_ios_base) {
        std_ios_base_swap(self, arg1)
    }
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__18ios_baseD1Ev"]
    pub fn std_ios_base_ios_base_destructor(this: *mut std_ios_base);
}
pub const std_io_errc_stream: std_io_errc = 1;
pub type std_io_errc = ::std::os::raw::c_int;
const _: () = {
    ["Size of template specialization: std_is_error_code_enum_open0_std_io_errc_close0"]
        [::std::mem::size_of::<std_is_error_code_enum>() - 1usize];
    ["Align of template specialization: std_is_error_code_enum_open0_std_io_errc_close0"]
        [::std::mem::align_of::<std_is_error_code_enum>() - 1usize];
};
extern "C" {
    #[link_name = "\u{1}__ZNSt3__117iostream_categoryEv"]
    pub fn std_iostream_category() -> *const std_error_category;
}
#[repr(C)]
#[derive(Debug)]
pub struct std_ios_base_failure {
    pub _base: std_system_error,
}
const _: () = {
    ["Size of std_ios_base_failure"][::std::mem::size_of::<std_ios_base_failure>() - 32usize];
    ["Alignment of std_ios_base_failure"][::std::mem::align_of::<std_ios_base_failure>() - 8usize];
};
extern "C" {
    #[link_name = "\u{1}__ZNSt3__18ios_base7failureC1ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_10error_codeE"]
    pub fn std_ios_base_failure_failure(
        this: *mut std_ios_base_failure,
        __msg: *const std_string,
        __ec: *const std_error_code,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__18ios_base7failureC1EPKcRKNS_10error_codeE"]
    pub fn std_ios_base_failure_failure1(
        this: *mut std_ios_base_failure,
        __msg: *const ::std::os::raw::c_char,
        __ec: *const std_error_code,
    );
}
impl std_ios_base_failure {
    #[inline]
    pub unsafe fn new(__msg: *const std_string, __ec: *const std_error_code) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std_ios_base_failure_failure(__bindgen_tmp.as_mut_ptr(), __msg, __ec);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(__msg: *const ::std::os::raw::c_char, __ec: *const std_error_code) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std_ios_base_failure_failure1(__bindgen_tmp.as_mut_ptr(), __msg, __ec);
        __bindgen_tmp.assume_init()
    }
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__18ios_base7failureD1Ev"]
    pub fn std_ios_base_failure_failure_destructor(this: *mut std_ios_base_failure);
}
#[repr(C)]
#[derive(Debug)]
pub struct std_ios_base_Init {
    pub _address: u8,
}
const _: () = {
    ["Size of std_ios_base_Init"][::std::mem::size_of::<std_ios_base_Init>() - 1usize];
    ["Alignment of std_ios_base_Init"][::std::mem::align_of::<std_ios_base_Init>() - 1usize];
};
extern "C" {
    #[link_name = "\u{1}__ZNSt3__18ios_base4InitC1Ev"]
    pub fn std_ios_base_Init_Init(this: *mut std_ios_base_Init);
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__18ios_base4InitD1Ev"]
    pub fn std_ios_base_Init_Init_destructor(this: *mut std_ios_base_Init);
}
impl std_ios_base_Init {
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std_ios_base_Init_Init(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        std_ios_base_Init_Init_destructor(self)
    }
}
#[repr(C)]
pub struct std_basic_ios {
    pub _base: std_ios_base,
    pub __tie_: *mut std_basic_ostream,
    pub __fill_: std_basic_ios_int_type,
}
pub type std_basic_ios_char_type<_CharT> = _CharT;
pub type std_basic_ios_traits_type<_Traits> = _Traits;
pub type std_basic_ios_int_type = [u8; 0usize];
pub type std_basic_ios_pos_type = [u8; 0usize];
pub type std_basic_ios_off_type = [u8; 0usize];
const _: () = {
    ["Size of template specialization: std_basic_ios_open0_char_std_char_traits_open1_char_close1_close0"] [:: std :: mem :: size_of :: < std_basic_ios > () - 152usize] ;
    ["Align of template specialization: std_basic_ios_open0_char_std_char_traits_open1_char_close1_close0"] [:: std :: mem :: align_of :: < std_basic_ios > () - 8usize] ;
};
const _: () = {
    ["Size of template specialization: std_basic_ios_open0_wchar_t_std_char_traits_open1_wchar_t_close1_close0"] [:: std :: mem :: size_of :: < std_basic_ios > () - 152usize] ;
    ["Align of template specialization: std_basic_ios_open0_wchar_t_std_char_traits_open1_wchar_t_close1_close0"] [:: std :: mem :: align_of :: < std_basic_ios > () - 8usize] ;
};
#[repr(C)]
pub struct std_basic_streambuf__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct std_basic_streambuf<_CharT> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_CharT>>,
    pub vtable_: *const std_basic_streambuf__bindgen_vtable,
    pub __loc_: std_locale,
    pub __binp_: *mut std_basic_streambuf_char_type<_CharT>,
    pub __ninp_: *mut std_basic_streambuf_char_type<_CharT>,
    pub __einp_: *mut std_basic_streambuf_char_type<_CharT>,
    pub __bout_: *mut std_basic_streambuf_char_type<_CharT>,
    pub __nout_: *mut std_basic_streambuf_char_type<_CharT>,
    pub __eout_: *mut std_basic_streambuf_char_type<_CharT>,
}
pub type std_basic_streambuf_char_type<_CharT> = _CharT;
pub type std_basic_streambuf_traits_type<_Traits> = _Traits;
pub type std_basic_streambuf_int_type = [u8; 0usize];
pub type std_basic_streambuf_pos_type = [u8; 0usize];
pub type std_basic_streambuf_off_type = [u8; 0usize];
const _: () = {
    ["Size of template specialization: std_basic_streambuf_open0_char_std_char_traits_open1_char_close1_close0"] [:: std :: mem :: size_of :: < std_basic_streambuf < :: std :: os :: raw :: c_char > > () - 64usize] ;
    ["Align of template specialization: std_basic_streambuf_open0_char_std_char_traits_open1_char_close1_close0"] [:: std :: mem :: align_of :: < std_basic_streambuf < :: std :: os :: raw :: c_char > > () - 8usize] ;
};
const _: () = {
    ["Size of template specialization: std_basic_streambuf_open0_wchar_t_std_char_traits_open1_wchar_t_close1_close0"] [:: std :: mem :: size_of :: < std_basic_streambuf < u32 > > () - 64usize] ;
    ["Align of template specialization: std_basic_streambuf_open0_wchar_t_std_char_traits_open1_wchar_t_close1_close0"] [:: std :: mem :: align_of :: < std_basic_streambuf < u32 > > () - 8usize] ;
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___num_get_base {
    pub _address: u8,
}
pub const std___num_get_base___num_get_buf_sz: ::std::os::raw::c_int = 40;
extern "C" {
    #[link_name = "\u{1}__ZNSt3__114__num_get_base5__srcE"]
    pub static std___num_get_base___src: [::std::os::raw::c_char; 33usize];
}
const _: () = {
    ["Size of std___num_get_base"][::std::mem::size_of::<std___num_get_base>() - 1usize];
    ["Alignment of std___num_get_base"][::std::mem::align_of::<std___num_get_base>() - 1usize];
};
extern "C" {
    #[link_name = "\u{1}__ZNSt3__114__num_get_base10__get_baseERNS_8ios_baseE"]
    pub fn std___num_get_base___get_base(arg1: *mut std_ios_base) -> ::std::os::raw::c_int;
}
impl std___num_get_base {
    #[inline]
    pub unsafe fn __get_base(arg1: *mut std_ios_base) -> ::std::os::raw::c_int {
        std___num_get_base___get_base(arg1)
    }
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj"]
    pub fn std___check_grouping(
        __grouping: *const std_string,
        __g: *mut ::std::os::raw::c_uint,
        __g_end: *mut ::std::os::raw::c_uint,
        __err: *mut std_ios_base_iostate,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___num_get {
    pub _address: u8,
}
const _: () = {
    ["Size of template specialization: std___num_get_open0_char_close0"]
        [::std::mem::size_of::<std___num_get>() - 1usize];
    ["Align of template specialization: std___num_get_open0_char_close0"]
        [::std::mem::align_of::<std___num_get>() - 1usize];
};
const _: () = {
    ["Size of template specialization: std___num_get_open0_wchar_t_close0"]
        [::std::mem::size_of::<std___num_get>() - 1usize];
    ["Align of template specialization: std___num_get_open0_wchar_t_close0"]
        [::std::mem::align_of::<std___num_get>() - 1usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct std_num_get {
    pub _base: std_locale_facet,
}
pub type std_num_get_char_type<_CharT> = _CharT;
pub type std_num_get_iter_type<_InputIterator> = _InputIterator;
const _: () = {
    ["Size of template specialization: std_num_get_open0_char_std_istreambuf_iterator_open1_char_std_char_traits_open2_char_close2_close1_close0"] [:: std :: mem :: size_of :: < std_num_get > () - 16usize] ;
    ["Align of template specialization: std_num_get_open0_char_std_istreambuf_iterator_open1_char_std_char_traits_open2_char_close2_close1_close0"] [:: std :: mem :: align_of :: < std_num_get > () - 8usize] ;
};
const _: () = {
    ["Size of template specialization: std_num_get_open0_wchar_t_std_istreambuf_iterator_open1_wchar_t_std_char_traits_open2_wchar_t_close2_close1_close0"] [:: std :: mem :: size_of :: < std_num_get > () - 16usize] ;
    ["Align of template specialization: std_num_get_open0_wchar_t_std_istreambuf_iterator_open1_wchar_t_std_char_traits_open2_wchar_t_close2_close1_close0"] [:: std :: mem :: align_of :: < std_num_get > () - 8usize] ;
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___num_put_base {
    pub _address: u8,
}
const _: () = {
    ["Size of std___num_put_base"][::std::mem::size_of::<std___num_put_base>() - 1usize];
    ["Alignment of std___num_put_base"][::std::mem::align_of::<std___num_put_base>() - 1usize];
};
extern "C" {
    #[link_name = "\u{1}__ZNSt3__114__num_put_base12__format_intEPcPKcbj"]
    pub fn std___num_put_base___format_int(
        __fmt: *mut ::std::os::raw::c_char,
        __len: *const ::std::os::raw::c_char,
        __signd: bool,
        __flags: std_ios_base_fmtflags,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__114__num_put_base14__format_floatEPcPKcj"]
    pub fn std___num_put_base___format_float(
        __fmt: *mut ::std::os::raw::c_char,
        __len: *const ::std::os::raw::c_char,
        __flags: std_ios_base_fmtflags,
    ) -> bool;
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__114__num_put_base18__identify_paddingEPcS1_RKNS_8ios_baseE"]
    pub fn std___num_put_base___identify_padding(
        __nb: *mut ::std::os::raw::c_char,
        __ne: *mut ::std::os::raw::c_char,
        __iob: *const std_ios_base,
    ) -> *mut ::std::os::raw::c_char;
}
impl std___num_put_base {
    #[inline]
    pub unsafe fn __format_int(
        __fmt: *mut ::std::os::raw::c_char,
        __len: *const ::std::os::raw::c_char,
        __signd: bool,
        __flags: std_ios_base_fmtflags,
    ) {
        std___num_put_base___format_int(__fmt, __len, __signd, __flags)
    }
    #[inline]
    pub unsafe fn __format_float(
        __fmt: *mut ::std::os::raw::c_char,
        __len: *const ::std::os::raw::c_char,
        __flags: std_ios_base_fmtflags,
    ) -> bool {
        std___num_put_base___format_float(__fmt, __len, __flags)
    }
    #[inline]
    pub unsafe fn __identify_padding(
        __nb: *mut ::std::os::raw::c_char,
        __ne: *mut ::std::os::raw::c_char,
        __iob: *const std_ios_base,
    ) -> *mut ::std::os::raw::c_char {
        std___num_put_base___identify_padding(__nb, __ne, __iob)
    }
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___num_put {
    pub _address: u8,
}
const _: () = {
    ["Size of template specialization: std___num_put_open0_char_close0"]
        [::std::mem::size_of::<std___num_put>() - 1usize];
    ["Align of template specialization: std___num_put_open0_char_close0"]
        [::std::mem::align_of::<std___num_put>() - 1usize];
};
const _: () = {
    ["Size of template specialization: std___num_put_open0_wchar_t_close0"]
        [::std::mem::size_of::<std___num_put>() - 1usize];
    ["Align of template specialization: std___num_put_open0_wchar_t_close0"]
        [::std::mem::align_of::<std___num_put>() - 1usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct std_num_put {
    pub _base: std_locale_facet,
}
pub type std_num_put_char_type<_CharT> = _CharT;
pub type std_num_put_iter_type<_OutputIterator> = _OutputIterator;
const _: () = {
    ["Size of template specialization: std_num_put_open0_char_std_ostreambuf_iterator_open1_char_std_char_traits_open2_char_close2_close1_close0"] [:: std :: mem :: size_of :: < std_num_put > () - 16usize] ;
    ["Align of template specialization: std_num_put_open0_char_std_ostreambuf_iterator_open1_char_std_char_traits_open2_char_close2_close1_close0"] [:: std :: mem :: align_of :: < std_num_put > () - 8usize] ;
};
const _: () = {
    ["Size of template specialization: std_num_put_open0_wchar_t_std_ostreambuf_iterator_open1_wchar_t_std_char_traits_open2_wchar_t_close2_close1_close0"] [:: std :: mem :: size_of :: < std_num_put > () - 16usize] ;
    ["Align of template specialization: std_num_put_open0_wchar_t_std_ostreambuf_iterator_open1_wchar_t_std_char_traits_open2_wchar_t_close2_close1_close0"] [:: std :: mem :: align_of :: < std_num_put > () - 8usize] ;
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_time_base {
    pub _address: u8,
}
pub const std_time_base_dateorder_no_order: std_time_base_dateorder = 0;
pub const std_time_base_dateorder_dmy: std_time_base_dateorder = 1;
pub const std_time_base_dateorder_mdy: std_time_base_dateorder = 2;
pub const std_time_base_dateorder_ymd: std_time_base_dateorder = 3;
pub const std_time_base_dateorder_ydm: std_time_base_dateorder = 4;
pub type std_time_base_dateorder = ::std::os::raw::c_uint;
const _: () = {
    ["Size of std_time_base"][::std::mem::size_of::<std_time_base>() - 1usize];
    ["Alignment of std_time_base"][::std::mem::align_of::<std_time_base>() - 1usize];
};
#[repr(C)]
pub struct std___time_get_c_storage__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct std___time_get_c_storage {
    pub vtable_: *const std___time_get_c_storage__bindgen_vtable,
}
pub type std___time_get_c_storage_string_type = std_basic_string;
#[repr(C)]
#[derive(Debug)]
pub struct std_time_get {
    pub _base: std_locale_facet,
    pub _base_2: std___time_get_c_storage,
}
pub type std_time_get_char_type<_CharT> = _CharT;
pub type std_time_get_iter_type<_InputIterator> = _InputIterator;
pub use self::std_time_base_dateorder as std_time_get_dateorder;
pub type std_time_get_string_type = std_basic_string;
const _: () = {
    ["Size of template specialization: std_time_get_open0_char_std_istreambuf_iterator_open1_char_std_char_traits_open2_char_close2_close1_close0"] [:: std :: mem :: size_of :: < std_time_get > () - 24usize] ;
    ["Align of template specialization: std_time_get_open0_char_std_istreambuf_iterator_open1_char_std_char_traits_open2_char_close2_close1_close0"] [:: std :: mem :: align_of :: < std_time_get > () - 8usize] ;
};
const _: () = {
    ["Size of template specialization: std_time_get_open0_wchar_t_std_istreambuf_iterator_open1_wchar_t_std_char_traits_open2_wchar_t_close2_close1_close0"] [:: std :: mem :: size_of :: < std_time_get > () - 24usize] ;
    ["Align of template specialization: std_time_get_open0_wchar_t_std_istreambuf_iterator_open1_wchar_t_std_char_traits_open2_wchar_t_close2_close1_close0"] [:: std :: mem :: align_of :: < std_time_get > () - 8usize] ;
};
#[repr(C)]
#[derive(Debug)]
pub struct std___time_get {
    pub __loc_: locale_t,
}
const _: () = {
    ["Size of std___time_get"][::std::mem::size_of::<std___time_get>() - 8usize];
    ["Alignment of std___time_get"][::std::mem::align_of::<std___time_get>() - 8usize];
    ["Offset of field: std___time_get::__loc_"]
        [::std::mem::offset_of!(std___time_get, __loc_) - 0usize];
};
extern "C" {
    #[link_name = "\u{1}__ZNSt3__110__time_getC1EPKc"]
    pub fn std___time_get___time_get(
        this: *mut std___time_get,
        __nm: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__110__time_getC1ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE"]
    pub fn std___time_get___time_get1(this: *mut std___time_get, __nm: *const std_string);
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__110__time_getD1Ev"]
    pub fn std___time_get___time_get_destructor(this: *mut std___time_get);
}
impl std___time_get {
    #[inline]
    pub unsafe fn new(__nm: *const ::std::os::raw::c_char) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std___time_get___time_get(__bindgen_tmp.as_mut_ptr(), __nm);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(__nm: *const std_string) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std___time_get___time_get1(__bindgen_tmp.as_mut_ptr(), __nm);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        std___time_get___time_get_destructor(self)
    }
}
#[repr(C)]
pub struct std___time_get_storage {
    pub _base: std___time_get,
    pub __weeks_: [std___time_get_storage_string_type; 14usize],
    pub __months_: [std___time_get_storage_string_type; 24usize],
    pub __am_pm_: [std___time_get_storage_string_type; 2usize],
    pub __c_: std___time_get_storage_string_type,
    pub __r_: std___time_get_storage_string_type,
    pub __x_: std___time_get_storage_string_type,
    pub __X_: std___time_get_storage_string_type,
}
pub type std___time_get_storage_string_type = std_basic_string;
#[repr(C)]
pub struct std_time_get_byname {
    pub _base: std_time_get,
    pub _base_1: std___time_get_storage,
}
pub use self::std_time_base_dateorder as std_time_get_byname_dateorder;
pub type std_time_get_byname_iter_type<_InputIterator> = _InputIterator;
pub type std_time_get_byname_char_type<_CharT> = _CharT;
pub type std_time_get_byname_string_type = std_basic_string;
const _: () = {
    ["Size of template specialization: std_time_get_byname_open0_char_std_istreambuf_iterator_open1_char_std_char_traits_open2_char_close2_close1_close0"] [:: std :: mem :: size_of :: < std_time_get_byname > () - 1088usize] ;
    ["Align of template specialization: std_time_get_byname_open0_char_std_istreambuf_iterator_open1_char_std_char_traits_open2_char_close2_close1_close0"] [:: std :: mem :: align_of :: < std_time_get_byname > () - 8usize] ;
};
const _: () = {
    ["Size of template specialization: std_time_get_byname_open0_wchar_t_std_istreambuf_iterator_open1_wchar_t_std_char_traits_open2_wchar_t_close2_close1_close0"] [:: std :: mem :: size_of :: < std_time_get_byname > () - 1088usize] ;
    ["Align of template specialization: std_time_get_byname_open0_wchar_t_std_istreambuf_iterator_open1_wchar_t_std_char_traits_open2_wchar_t_close2_close1_close0"] [:: std :: mem :: align_of :: < std_time_get_byname > () - 8usize] ;
};
#[repr(C)]
#[derive(Debug)]
pub struct std___time_put {
    pub __loc_: locale_t,
}
const _: () = {
    ["Size of std___time_put"][::std::mem::size_of::<std___time_put>() - 8usize];
    ["Alignment of std___time_put"][::std::mem::align_of::<std___time_put>() - 8usize];
    ["Offset of field: std___time_put::__loc_"]
        [::std::mem::offset_of!(std___time_put, __loc_) - 0usize];
};
extern "C" {
    #[link_name = "\u{1}__ZNKSt3__110__time_put8__do_putEPcRS1_PK2tmcc"]
    pub fn std___time_put___do_put(
        this: *const std___time_put,
        __nb: *mut ::std::os::raw::c_char,
        __ne: *mut *mut ::std::os::raw::c_char,
        __tm: *mut tm,
        __fmt: ::std::os::raw::c_char,
        __mod: ::std::os::raw::c_char,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNKSt3__110__time_put8__do_putEPwRS1_PK2tmcc"]
    pub fn std___time_put___do_put1(
        this: *const std___time_put,
        __wb: *mut u32,
        __we: *mut *mut u32,
        __tm: *mut tm,
        __fmt: ::std::os::raw::c_char,
        __mod: ::std::os::raw::c_char,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__110__time_putC1EPKc"]
    pub fn std___time_put___time_put(
        this: *mut std___time_put,
        __nm: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__110__time_putC1ERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE"]
    pub fn std___time_put___time_put1(this: *mut std___time_put, __nm: *const std_string);
}
extern "C" {
    #[link_name = "\u{1}__ZNSt3__110__time_putD1Ev"]
    pub fn std___time_put___time_put_destructor(this: *mut std___time_put);
}
impl std___time_put {
    #[inline]
    pub unsafe fn __do_put(
        &self,
        __nb: *mut ::std::os::raw::c_char,
        __ne: *mut *mut ::std::os::raw::c_char,
        __tm: *mut tm,
        __fmt: ::std::os::raw::c_char,
        __mod: ::std::os::raw::c_char,
    ) {
        std___time_put___do_put(self, __nb, __ne, __tm, __fmt, __mod)
    }
    #[inline]
    pub unsafe fn __do_put1(
        &self,
        __wb: *mut u32,
        __we: *mut *mut u32,
        __tm: *mut tm,
        __fmt: ::std::os::raw::c_char,
        __mod: ::std::os::raw::c_char,
    ) {
        std___time_put___do_put1(self, __wb, __we, __tm, __fmt, __mod)
    }
    #[inline]
    pub unsafe fn new(__nm: *const ::std::os::raw::c_char) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std___time_put___time_put(__bindgen_tmp.as_mut_ptr(), __nm);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(__nm: *const std_string) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std___time_put___time_put1(__bindgen_tmp.as_mut_ptr(), __nm);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        std___time_put___time_put_destructor(self)
    }
}
#[repr(C)]
#[derive(Debug)]
pub struct std_time_put {
    pub _base: std_locale_facet,
    pub _base_1: std___time_put,
}
pub type std_time_put_char_type<_CharT> = _CharT;
pub type std_time_put_iter_type<_OutputIterator> = _OutputIterator;
const _: () = {
    ["Size of template specialization: std_time_put_open0_char_std_ostreambuf_iterator_open1_char_std_char_traits_open2_char_close2_close1_close0"] [:: std :: mem :: size_of :: < std_time_put > () - 24usize] ;
    ["Align of template specialization: std_time_put_open0_char_std_ostreambuf_iterator_open1_char_std_char_traits_open2_char_close2_close1_close0"] [:: std :: mem :: align_of :: < std_time_put > () - 8usize] ;
};
const _: () = {
    ["Size of template specialization: std_time_put_open0_wchar_t_std_ostreambuf_iterator_open1_wchar_t_std_char_traits_open2_wchar_t_close2_close1_close0"] [:: std :: mem :: size_of :: < std_time_put > () - 24usize] ;
    ["Align of template specialization: std_time_put_open0_wchar_t_std_ostreambuf_iterator_open1_wchar_t_std_char_traits_open2_wchar_t_close2_close1_close0"] [:: std :: mem :: align_of :: < std_time_put > () - 8usize] ;
};
#[repr(C)]
#[derive(Debug)]
pub struct std_time_put_byname {
    pub _base: std_time_put,
}
const _: () = {
    ["Size of template specialization: std_time_put_byname_open0_char_std_ostreambuf_iterator_open1_char_std_char_traits_open2_char_close2_close1_close0"] [:: std :: mem :: size_of :: < std_time_put_byname > () - 24usize] ;
    ["Align of template specialization: std_time_put_byname_open0_char_std_ostreambuf_iterator_open1_char_std_char_traits_open2_char_close2_close1_close0"] [:: std :: mem :: align_of :: < std_time_put_byname > () - 8usize] ;
};
const _: () = {
    ["Size of template specialization: std_time_put_byname_open0_wchar_t_std_ostreambuf_iterator_open1_wchar_t_std_char_traits_open2_wchar_t_close2_close1_close0"] [:: std :: mem :: size_of :: < std_time_put_byname > () - 24usize] ;
    ["Align of template specialization: std_time_put_byname_open0_wchar_t_std_ostreambuf_iterator_open1_wchar_t_std_char_traits_open2_wchar_t_close2_close1_close0"] [:: std :: mem :: align_of :: < std_time_put_byname > () - 8usize] ;
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_money_base {
    pub _address: u8,
}
pub const std_money_base_part_none: std_money_base_part = 0;
pub const std_money_base_part_space: std_money_base_part = 1;
pub const std_money_base_part_symbol: std_money_base_part = 2;
pub const std_money_base_part_sign: std_money_base_part = 3;
pub const std_money_base_part_value: std_money_base_part = 4;
pub type std_money_base_part = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_money_base_pattern {
    pub field: [::std::os::raw::c_char; 4usize],
}
const _: () = {
    ["Size of std_money_base_pattern"][::std::mem::size_of::<std_money_base_pattern>() - 4usize];
    ["Alignment of std_money_base_pattern"]
        [::std::mem::align_of::<std_money_base_pattern>() - 1usize];
    ["Offset of field: std_money_base_pattern::field"]
        [::std::mem::offset_of!(std_money_base_pattern, field) - 0usize];
};
const _: () = {
    ["Size of std_money_base"][::std::mem::size_of::<std_money_base>() - 1usize];
    ["Alignment of std_money_base"][::std::mem::align_of::<std_money_base>() - 1usize];
};
pub type std_moneypunct_char_type<_CharT> = _CharT;
pub type std_moneypunct_string_type = std_basic_string;
extern "C" {
    #[link_name = "\u{1}intl"]
    pub static std_intl: bool;
}
pub type std_moneypunct_byname_pattern = std_money_base_pattern;
pub type std_moneypunct_byname_char_type<_CharT> = _CharT;
pub type std_moneypunct_byname_string_type = std_basic_string;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___money_get {
    pub _address: u8,
}
pub type std___money_get_char_type<_CharT> = _CharT;
pub type std___money_get_string_type = std_basic_string;
const _: () = {
    ["Size of template specialization: std___money_get_open0_char_close0"]
        [::std::mem::size_of::<std___money_get>() - 1usize];
    ["Align of template specialization: std___money_get_open0_char_close0"]
        [::std::mem::align_of::<std___money_get>() - 1usize];
};
const _: () = {
    ["Size of template specialization: std___money_get_open0_wchar_t_close0"]
        [::std::mem::size_of::<std___money_get>() - 1usize];
    ["Align of template specialization: std___money_get_open0_wchar_t_close0"]
        [::std::mem::align_of::<std___money_get>() - 1usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct std_money_get {
    pub _base: std_locale_facet,
}
pub type std_money_get_char_type<_CharT> = _CharT;
pub type std_money_get_iter_type<_InputIterator> = _InputIterator;
pub type std_money_get_string_type = std_basic_string;
extern "C" {
    #[link_name = "\u{1}__ZNSt3__112__do_nothingEPv"]
    pub fn std___do_nothing(arg1: *mut ::std::os::raw::c_void);
}
const _: () = {
    ["Size of template specialization: std_money_get_open0_char_std_istreambuf_iterator_open1_char_std_char_traits_open2_char_close2_close1_close0"] [:: std :: mem :: size_of :: < std_money_get > () - 16usize] ;
    ["Align of template specialization: std_money_get_open0_char_std_istreambuf_iterator_open1_char_std_char_traits_open2_char_close2_close1_close0"] [:: std :: mem :: align_of :: < std_money_get > () - 8usize] ;
};
const _: () = {
    ["Size of template specialization: std_money_get_open0_wchar_t_std_istreambuf_iterator_open1_wchar_t_std_char_traits_open2_wchar_t_close2_close1_close0"] [:: std :: mem :: size_of :: < std_money_get > () - 16usize] ;
    ["Align of template specialization: std_money_get_open0_wchar_t_std_istreambuf_iterator_open1_wchar_t_std_char_traits_open2_wchar_t_close2_close1_close0"] [:: std :: mem :: align_of :: < std_money_get > () - 8usize] ;
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___money_put {
    pub _address: u8,
}
pub type std___money_put_char_type<_CharT> = _CharT;
pub type std___money_put_string_type = std_basic_string;
const _: () = {
    ["Size of template specialization: std___money_put_open0_char_close0"]
        [::std::mem::size_of::<std___money_put>() - 1usize];
    ["Align of template specialization: std___money_put_open0_char_close0"]
        [::std::mem::align_of::<std___money_put>() - 1usize];
};
const _: () = {
    ["Size of template specialization: std___money_put_open0_wchar_t_close0"]
        [::std::mem::size_of::<std___money_put>() - 1usize];
    ["Align of template specialization: std___money_put_open0_wchar_t_close0"]
        [::std::mem::align_of::<std___money_put>() - 1usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct std_money_put {
    pub _base: std_locale_facet,
}
pub type std_money_put_char_type<_CharT> = _CharT;
pub type std_money_put_iter_type<_OutputIterator> = _OutputIterator;
pub type std_money_put_string_type = std_basic_string;
const _: () = {
    ["Size of template specialization: std_money_put_open0_char_std_ostreambuf_iterator_open1_char_std_char_traits_open2_char_close2_close1_close0"] [:: std :: mem :: size_of :: < std_money_put > () - 16usize] ;
    ["Align of template specialization: std_money_put_open0_char_std_ostreambuf_iterator_open1_char_std_char_traits_open2_char_close2_close1_close0"] [:: std :: mem :: align_of :: < std_money_put > () - 8usize] ;
};
const _: () = {
    ["Size of template specialization: std_money_put_open0_wchar_t_std_ostreambuf_iterator_open1_wchar_t_std_char_traits_open2_wchar_t_close2_close1_close0"] [:: std :: mem :: size_of :: < std_money_put > () - 16usize] ;
    ["Align of template specialization: std_money_put_open0_wchar_t_std_ostreambuf_iterator_open1_wchar_t_std_char_traits_open2_wchar_t_close2_close1_close0"] [:: std :: mem :: align_of :: < std_money_put > () - 8usize] ;
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_messages_base {
    pub _address: u8,
}
pub type std_messages_base_catalog = ::std::os::raw::c_long;
const _: () = {
    ["Size of std_messages_base"][::std::mem::size_of::<std_messages_base>() - 1usize];
    ["Alignment of std_messages_base"][::std::mem::align_of::<std_messages_base>() - 1usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct std_messages {
    pub _base: std_locale_facet,
}
pub type std_messages_char_type<_CharT> = _CharT;
pub type std_messages_string_type = std_basic_string;
const _: () = {
    ["Size of template specialization: std_messages_open0_char_close0"]
        [::std::mem::size_of::<std_messages>() - 16usize];
    ["Align of template specialization: std_messages_open0_char_close0"]
        [::std::mem::align_of::<std_messages>() - 8usize];
};
const _: () = {
    ["Size of template specialization: std_messages_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_messages>() - 16usize];
    ["Align of template specialization: std_messages_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_messages>() - 8usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct std_messages_byname {
    pub _base: std_messages,
}
pub type std_messages_byname_catalog = std_messages_base_catalog;
pub type std_messages_byname_string_type = std_basic_string;
const _: () = {
    ["Size of template specialization: std_messages_byname_open0_char_close0"]
        [::std::mem::size_of::<std_messages_byname>() - 16usize];
    ["Align of template specialization: std_messages_byname_open0_char_close0"]
        [::std::mem::align_of::<std_messages_byname>() - 8usize];
};
const _: () = {
    ["Size of template specialization: std_messages_byname_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_messages_byname>() - 16usize];
    ["Align of template specialization: std_messages_byname_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_messages_byname>() - 8usize];
};
#[repr(C)]
pub struct std_wstring_convert<_Codecvt> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Codecvt>>,
    pub __byte_err_string_: std_wstring_convert_byte_string,
    pub __wide_err_string_: std_wstring_convert_wide_string,
    pub __cvtptr_: *mut _Codecvt,
    pub __cvtstate_: std_wstring_convert_state_type,
    pub __cvtcount_: ::std::os::raw::c_ulong,
}
pub type std_wstring_convert_byte_string = std_basic_string;
pub type std_wstring_convert_wide_string = std_basic_string;
pub type std_wstring_convert_state_type = [u8; 0usize];
pub type std_wstring_convert_int_type = std_wstring_convert_wide_string;
#[repr(C)]
pub struct std_wbuffer_convert<_Codecvt, _Elem> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Codecvt>>,
    pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Elem>>,
    pub _base: std_basic_streambuf<_Elem>,
    pub __extbuf_: *mut ::std::os::raw::c_char,
    pub __extbufnext_: *const ::std::os::raw::c_char,
    pub __extbufend_: *const ::std::os::raw::c_char,
    pub __extbuf_min_: [::std::os::raw::c_char; 8usize],
    pub __ebs_: ::std::os::raw::c_ulong,
    pub __intbuf_: *mut std_wbuffer_convert_char_type<_Elem>,
    pub __ibs_: ::std::os::raw::c_ulong,
    pub __bufptr_: *mut std_streambuf,
    pub __cv_: *mut _Codecvt,
    pub __st_: std_wbuffer_convert_state_type,
    pub __cm_: std_ios_base_openmode,
    pub __owns_eb_: bool,
    pub __owns_ib_: bool,
    pub __always_noconv_: bool,
}
pub type std_wbuffer_convert_char_type<_Elem> = _Elem;
pub type std_wbuffer_convert_traits_type<_Tr> = _Tr;
pub type std_wbuffer_convert_int_type = [u8; 0usize];
pub type std_wbuffer_convert_pos_type = [u8; 0usize];
pub type std_wbuffer_convert_off_type = [u8; 0usize];
pub type std_wbuffer_convert_state_type = [u8; 0usize];
#[repr(C)]
pub struct std___temp_value<_Tp, _Alloc> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Tp>>,
    pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Alloc>>,
    pub __bindgen_anon_1: std___temp_value__bindgen_ty_1<_Tp>,
    pub __a: *mut _Alloc,
}
pub type std___temp_value__Traits = std_allocator_traits;
#[repr(C)]
#[repr(align(1))]
pub struct std___temp_value__bindgen_ty_1<_Tp> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Tp>>,
    pub __v: __BindgenUnionField<_Tp>,
    pub bindgen_union_field: [u8; 0usize],
}
#[repr(C)]
#[derive(Debug)]
pub struct std___split_buffer {
    pub __first_: std___split_buffer_pointer,
    pub __begin_: std___split_buffer_pointer,
    pub __end_: std___split_buffer_pointer,
    pub __end_cap_: std___compressed_pair,
}
pub type std___split_buffer_value_type<_Tp> = _Tp;
pub type std___split_buffer_allocator_type<_Allocator> = _Allocator;
pub type std___split_buffer___alloc_rr<_Allocator> =
    std___libcpp_remove_reference_t<std___split_buffer_allocator_type<_Allocator>>;
pub type std___split_buffer___alloc_traits = std_allocator_traits;
pub type std___split_buffer_reference<_Tp> = *mut std___split_buffer_value_type<_Tp>;
pub type std___split_buffer_const_reference<_Tp> = *const std___split_buffer_value_type<_Tp>;
pub type std___split_buffer_size_type = std___split_buffer___alloc_traits;
pub type std___split_buffer_difference_type = std___split_buffer___alloc_traits;
pub type std___split_buffer_pointer = std___split_buffer___alloc_traits;
pub type std___split_buffer_const_pointer = std___split_buffer___alloc_traits;
pub type std___split_buffer_iterator = std___split_buffer_pointer;
pub type std___split_buffer_const_iterator = std___split_buffer_const_pointer;
pub type std___split_buffer___alloc_ref<_Allocator> =
    std___add_lvalue_reference_t<std___split_buffer_allocator_type<_Allocator>>;
pub type std___split_buffer___alloc_const_ref<_Allocator> =
    std___add_lvalue_reference_t<std___split_buffer_allocator_type<_Allocator>>;
#[repr(C)]
#[derive(Debug)]
pub struct std___split_buffer__ConstructTransaction {
    pub __pos_: std___split_buffer_pointer,
    pub __end_: std___split_buffer_pointer,
    pub __dest_: *mut std___split_buffer_pointer,
}
#[repr(C)]
#[derive(Debug)]
pub struct std_vector {
    pub __begin_: std_vector_pointer,
    pub __end_: std_vector_pointer,
    pub __end_cap_: std___compressed_pair,
}
pub type std_vector___default_allocator_type = std_allocator;
pub type std_vector___self = std_vector;
pub type std_vector_value_type<_Tp> = _Tp;
pub type std_vector_allocator_type<_Allocator> = _Allocator;
pub type std_vector___alloc_traits = std_allocator_traits;
pub type std_vector_reference<_Tp> = *mut std_vector_value_type<_Tp>;
pub type std_vector_const_reference<_Tp> = *const std_vector_value_type<_Tp>;
pub type std_vector_size_type = std_vector___alloc_traits;
pub type std_vector_difference_type = std_vector___alloc_traits;
pub type std_vector_pointer = std_vector___alloc_traits;
pub type std_vector_const_pointer = std_vector___alloc_traits;
pub type std_vector_iterator = std___wrap_iter<std_vector_pointer>;
pub type std_vector_const_iterator = std___wrap_iter<std_vector_const_pointer>;
pub type std_vector_reverse_iterator = std_reverse_iterator<std_vector_iterator>;
pub type std_vector_const_reverse_iterator = std_reverse_iterator<std_vector_const_iterator>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_vector___destroy_vector {
    pub __vec_: *mut std_vector,
}
#[repr(C)]
#[derive(Debug)]
pub struct std_vector__ConstructTransaction {
    pub __v_: *mut std_vector,
    pub __pos_: std_vector_pointer,
    pub __new_end_: std_vector_const_pointer,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___builtin_new_allocator {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___builtin_new_allocator___builtin_new_deleter {
    pub __size_: ::std::os::raw::c_ulong,
    pub __align_: ::std::os::raw::c_ulong,
}
pub type std___builtin_new_allocator___builtin_new_deleter_pointer_type =
    *mut ::std::os::raw::c_void;
const _: () = {
    ["Size of std___builtin_new_allocator___builtin_new_deleter"]
        [::std::mem::size_of::<std___builtin_new_allocator___builtin_new_deleter>() - 16usize];
    ["Alignment of std___builtin_new_allocator___builtin_new_deleter"]
        [::std::mem::align_of::<std___builtin_new_allocator___builtin_new_deleter>() - 8usize];
    ["Offset of field: std___builtin_new_allocator___builtin_new_deleter::__size_"][::std::mem::offset_of!(
        std___builtin_new_allocator___builtin_new_deleter,
        __size_
    ) - 0usize];
    ["Offset of field: std___builtin_new_allocator___builtin_new_deleter::__align_"][::std::mem::offset_of!(
        std___builtin_new_allocator___builtin_new_deleter,
        __align_
    ) - 8usize];
};
pub type std___builtin_new_allocator___holder_t = std_unique_ptr;
const _: () = {
    ["Size of std___builtin_new_allocator"]
        [::std::mem::size_of::<std___builtin_new_allocator>() - 1usize];
    ["Alignment of std___builtin_new_allocator"]
        [::std::mem::align_of::<std___builtin_new_allocator>() - 1usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct std_bad_function_call {
    pub _base: std_exception,
}
const _: () = {
    ["Size of std_bad_function_call"][::std::mem::size_of::<std_bad_function_call>() - 8usize];
    ["Alignment of std_bad_function_call"]
        [::std::mem::align_of::<std_bad_function_call>() - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_function {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___function___maybe_derive_from_unary_function {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___function___maybe_derive_from_binary_function {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___function___alloc_func {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___function___default_alloc_func {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___function___base {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___function___func {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___function___value_func {
    pub _address: u8,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union std___function___policy_storage {
    pub __small: [::std::os::raw::c_char; 16usize],
    pub __large: *mut ::std::os::raw::c_void,
}
const _: () = {
    ["Size of std___function___policy_storage"]
        [::std::mem::size_of::<std___function___policy_storage>() - 16usize];
    ["Alignment of std___function___policy_storage"]
        [::std::mem::align_of::<std___function___policy_storage>() - 8usize];
    ["Offset of field: std___function___policy_storage::__small"]
        [::std::mem::offset_of!(std___function___policy_storage, __small) - 0usize];
    ["Offset of field: std___function___policy_storage::__large"]
        [::std::mem::offset_of!(std___function___policy_storage, __large) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___function___use_small_storage {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___function___policy {
    pub __clone: ::std::option::Option<
        unsafe extern "C" fn(arg1: *const ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void,
    >,
    pub __destroy: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub __is_null: bool,
    pub __type_info: *const std_type_info,
}
const _: () = {
    ["Size of std___function___policy"][::std::mem::size_of::<std___function___policy>() - 32usize];
    ["Alignment of std___function___policy"]
        [::std::mem::align_of::<std___function___policy>() - 8usize];
    ["Offset of field: std___function___policy::__clone"]
        [::std::mem::offset_of!(std___function___policy, __clone) - 0usize];
    ["Offset of field: std___function___policy::__destroy"]
        [::std::mem::offset_of!(std___function___policy, __destroy) - 8usize];
    ["Offset of field: std___function___policy::__is_null"]
        [::std::mem::offset_of!(std___function___policy, __is_null) - 16usize];
    ["Offset of field: std___function___policy::__type_info"]
        [::std::mem::offset_of!(std___function___policy, __type_info) - 24usize];
};
pub type std___function___fast_forward = std___conditional_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___function___policy_invoker {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___function___policy_func {
    pub _address: u8,
}
extern "C" {
    #[link_name = "\u{1}__Block_copy"]
    pub fn std___function__Block_copy(
        arg1: *const ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}__Block_release"]
    pub fn std___function__Block_release(arg1: *const ::std::os::raw::c_void);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___mem_fn<_Tp> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Tp>>,
    pub __f_: std___mem_fn_type<_Tp>,
}
pub type std___mem_fn_type<_Tp> = _Tp;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_mem_fun_t<_Sp> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Sp>>,
    pub __p_: ::std::option::Option<unsafe extern "C" fn() -> _Sp>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_mem_fun1_t<_Sp, _Ap> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Sp>>,
    pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Ap>>,
    pub __p_: ::std::option::Option<unsafe extern "C" fn(arg1: _Ap) -> _Sp>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_mem_fun_ref_t<_Sp> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Sp>>,
    pub __p_: ::std::option::Option<unsafe extern "C" fn() -> _Sp>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_mem_fun1_ref_t<_Sp, _Ap> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Sp>>,
    pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Ap>>,
    pub __p_: ::std::option::Option<unsafe extern "C" fn(arg1: _Ap) -> _Sp>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_const_mem_fun_t<_Sp> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Sp>>,
    pub __p_: ::std::option::Option<unsafe extern "C" fn() -> _Sp>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_const_mem_fun1_t<_Sp, _Ap> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Sp>>,
    pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Ap>>,
    pub __p_: ::std::option::Option<unsafe extern "C" fn(arg1: _Ap) -> _Sp>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_const_mem_fun_ref_t<_Sp> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Sp>>,
    pub __p_: ::std::option::Option<unsafe extern "C" fn() -> _Sp>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_const_mem_fun1_ref_t<_Sp, _Ap> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Sp>>,
    pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Ap>>,
    pub __p_: ::std::option::Option<unsafe extern "C" fn(arg1: _Ap) -> _Sp>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_pointer_to_binary_function<_Arg1, _Arg2, _Result> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Arg1>>,
    pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Arg2>>,
    pub _phantom_2: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Result>>,
    pub __f_: ::std::option::Option<unsafe extern "C" fn(arg1: _Arg1, arg2: _Arg2) -> _Result>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_pointer_to_unary_function<_Arg, _Result> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Arg>>,
    pub _phantom_1: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Result>>,
    pub __f_: ::std::option::Option<unsafe extern "C" fn(arg1: _Arg) -> _Result>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_unary_negate<_Predicate> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Predicate>>,
    pub __pred_: _Predicate,
}
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char16_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char16_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char32_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char32_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
#[repr(C)]
pub struct std_exception__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct std_exception {
    pub vtable_: *const std_exception__bindgen_vtable,
}
const _: () = {
    ["Size of std_exception"][::std::mem::size_of::<std_exception>() - 8usize];
    ["Alignment of std_exception"][::std::mem::align_of::<std_exception>() - 8usize];
};
extern "C" {
    #[link_name = "\u{1}__ZNSt9exceptionD1Ev"]
    pub fn std_exception_exception_destructor(this: *mut std_exception);
}
extern "C" {
    #[link_name = "\u{1}__ZNKSt9exception4whatEv"]
    pub fn std_exception_what(this: *mut ::std::os::raw::c_void) -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug)]
pub struct std_bad_exception {
    pub _base: std_exception,
}
const _: () = {
    ["Size of std_bad_exception"][::std::mem::size_of::<std_bad_exception>() - 8usize];
    ["Alignment of std_bad_exception"][::std::mem::align_of::<std_bad_exception>() - 8usize];
};
extern "C" {
    #[link_name = "\u{1}__ZNSt13bad_exceptionD1Ev"]
    pub fn std_bad_exception_bad_exception_destructor(this: *mut std_bad_exception);
}
extern "C" {
    #[link_name = "\u{1}__ZNKSt13bad_exception4whatEv"]
    pub fn std_bad_exception_what(
        this: *mut ::std::os::raw::c_void,
    ) -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_nothrow_t {
    pub _address: u8,
}
const _: () = {
    ["Size of std_nothrow_t"][::std::mem::size_of::<std_nothrow_t>() - 1usize];
    ["Alignment of std_nothrow_t"][::std::mem::align_of::<std_nothrow_t>() - 1usize];
};
extern "C" {
    #[link_name = "\u{1}__ZSt7nothrow"]
    pub static std_nothrow: std_nothrow_t;
}
#[repr(C)]
#[derive(Debug)]
pub struct std_bad_alloc {
    pub _base: std_exception,
}
const _: () = {
    ["Size of std_bad_alloc"][::std::mem::size_of::<std_bad_alloc>() - 8usize];
    ["Alignment of std_bad_alloc"][::std::mem::align_of::<std_bad_alloc>() - 8usize];
};
extern "C" {
    #[link_name = "\u{1}__ZNSt9bad_allocC1Ev"]
    pub fn std_bad_alloc_bad_alloc(this: *mut std_bad_alloc);
}
impl std_bad_alloc {
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std_bad_alloc_bad_alloc(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
}
extern "C" {
    #[link_name = "\u{1}__ZNSt9bad_allocD1Ev"]
    pub fn std_bad_alloc_bad_alloc_destructor(this: *mut std_bad_alloc);
}
extern "C" {
    #[link_name = "\u{1}__ZNKSt9bad_alloc4whatEv"]
    pub fn std_bad_alloc_what(this: *mut ::std::os::raw::c_void) -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug)]
pub struct std_bad_array_new_length {
    pub _base: std_bad_alloc,
}
const _: () = {
    ["Size of std_bad_array_new_length"]
        [::std::mem::size_of::<std_bad_array_new_length>() - 8usize];
    ["Alignment of std_bad_array_new_length"]
        [::std::mem::align_of::<std_bad_array_new_length>() - 8usize];
};
extern "C" {
    #[link_name = "\u{1}__ZNSt20bad_array_new_lengthC1Ev"]
    pub fn std_bad_array_new_length_bad_array_new_length(this: *mut std_bad_array_new_length);
}
impl std_bad_array_new_length {
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std_bad_array_new_length_bad_array_new_length(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
}
extern "C" {
    #[link_name = "\u{1}__ZNSt20bad_array_new_lengthD1Ev"]
    pub fn std_bad_array_new_length_bad_array_new_length_destructor(
        this: *mut std_bad_array_new_length,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNKSt20bad_array_new_length4whatEv"]
    pub fn std_bad_array_new_length_what(
        this: *mut ::std::os::raw::c_void,
    ) -> *const ::std::os::raw::c_char;
}
pub type std_new_handler = ::std::option::Option<unsafe extern "C" fn()>;
extern "C" {
    #[link_name = "\u{1}__ZSt15set_new_handlerPFvvE"]
    pub fn std_set_new_handler(arg1: std_new_handler) -> std_new_handler;
}
extern "C" {
    #[link_name = "\u{1}__ZSt15get_new_handlerv"]
    pub fn std_get_new_handler() -> std_new_handler;
}
extern "C" {
    #[link_name = "\u{1}__ZSt17__throw_bad_allocv"]
    pub fn std___throw_bad_alloc();
}
pub type std_align_val_t = ::std::os::raw::c_ulong;
pub type std_unexpected_handler = ::std::option::Option<unsafe extern "C" fn()>;
extern "C" {
    #[link_name = "\u{1}__ZSt14set_unexpectedPFvvE"]
    pub fn std_set_unexpected(arg1: std_unexpected_handler) -> std_unexpected_handler;
}
extern "C" {
    #[link_name = "\u{1}__ZSt14get_unexpectedv"]
    pub fn std_get_unexpected() -> std_unexpected_handler;
}
extern "C" {
    #[link_name = "\u{1}__ZSt10unexpectedv"]
    pub fn std_unexpected();
}
pub type std_terminate_handler = ::std::option::Option<unsafe extern "C" fn()>;
extern "C" {
    #[link_name = "\u{1}__ZSt13set_terminatePFvvE"]
    pub fn std_set_terminate(arg1: std_terminate_handler) -> std_terminate_handler;
}
extern "C" {
    #[link_name = "\u{1}__ZSt13get_terminatev"]
    pub fn std_get_terminate() -> std_terminate_handler;
}
extern "C" {
    #[link_name = "\u{1}__ZSt18uncaught_exceptionv"]
    pub fn std_uncaught_exception() -> bool;
}
extern "C" {
    #[link_name = "\u{1}__ZSt19uncaught_exceptionsv"]
    pub fn std_uncaught_exceptions() -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}__ZSt17current_exceptionv"]
    pub fn std_current_exception() -> std_exception_ptr;
}
extern "C" {
    #[link_name = "\u{1}__ZSt17rethrow_exceptionSt13exception_ptr"]
    pub fn std_rethrow_exception(arg1: std_exception_ptr);
}
#[repr(C)]
#[derive(Debug)]
pub struct std_exception_ptr {
    pub __ptr_: *mut ::std::os::raw::c_void,
}
const _: () = {
    ["Size of std_exception_ptr"][::std::mem::size_of::<std_exception_ptr>() - 8usize];
    ["Alignment of std_exception_ptr"][::std::mem::align_of::<std_exception_ptr>() - 8usize];
    ["Offset of field: std_exception_ptr::__ptr_"]
        [::std::mem::offset_of!(std_exception_ptr, __ptr_) - 0usize];
};
extern "C" {
    #[link_name = "\u{1}__ZNSt13exception_ptrC1ERKS_"]
    pub fn std_exception_ptr_exception_ptr(
        this: *mut std_exception_ptr,
        arg1: *const std_exception_ptr,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNSt13exception_ptrD1Ev"]
    pub fn std_exception_ptr_exception_ptr_destructor(this: *mut std_exception_ptr);
}
impl std_exception_ptr {
    #[inline]
    pub unsafe fn new(arg1: *const std_exception_ptr) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std_exception_ptr_exception_ptr(__bindgen_tmp.as_mut_ptr(), arg1);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        std_exception_ptr_exception_ptr_destructor(self)
    }
}
#[repr(C)]
pub struct std_nested_exception__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct std_nested_exception {
    pub vtable_: *const std_nested_exception__bindgen_vtable,
    pub __ptr_: std_exception_ptr,
}
const _: () = {
    ["Size of std_nested_exception"][::std::mem::size_of::<std_nested_exception>() - 16usize];
    ["Alignment of std_nested_exception"][::std::mem::align_of::<std_nested_exception>() - 8usize];
    ["Offset of field: std_nested_exception::__ptr_"]
        [::std::mem::offset_of!(std_nested_exception, __ptr_) - 8usize];
};
extern "C" {
    #[link_name = "\u{1}__ZNKSt16nested_exception14rethrow_nestedEv"]
    pub fn std_nested_exception_rethrow_nested(this: *const std_nested_exception);
}
extern "C" {
    #[link_name = "\u{1}__ZNSt16nested_exceptionC1Ev"]
    pub fn std_nested_exception_nested_exception(this: *mut std_nested_exception);
}
impl std_nested_exception {
    #[inline]
    pub unsafe fn rethrow_nested(&self) {
        std_nested_exception_rethrow_nested(self)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std_nested_exception_nested_exception(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
}
extern "C" {
    #[link_name = "\u{1}__ZNSt16nested_exceptionD1Ev"]
    pub fn std_nested_exception_nested_exception_destructor(this: *mut std_nested_exception);
}
#[repr(C)]
#[derive(Debug)]
pub struct std___nested<_Tp> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Tp>>,
    pub _base: _Tp,
    pub _base_1: std_nested_exception,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___can_dynamic_cast {
    pub _address: u8,
}
extern "C" {
    #[link_name = "\u{1}__ZSt9terminatev"]
    pub fn std_terminate();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std_initializer_list<_Ep> {
    pub _phantom_0: ::std::marker::PhantomData<::std::cell::UnsafeCell<_Ep>>,
    pub __begin_: *const _Ep,
    pub __size_: ::std::os::raw::c_ulong,
}
pub type std_initializer_list_value_type<_Ep> = _Ep;
pub type std_initializer_list_reference<_Ep> = *const _Ep;
pub type std_initializer_list_const_reference<_Ep> = *const _Ep;
pub type std_initializer_list_size_type = ::std::os::raw::c_ulong;
pub type std_initializer_list_iterator<_Ep> = *const _Ep;
pub type std_initializer_list_const_iterator<_Ep> = *const _Ep;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___type_info_implementations {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___type_info_implementations___string_impl_base {
    pub _address: u8,
}
pub type std___type_info_implementations___string_impl_base___type_name_t =
    *const ::std::os::raw::c_char;
const _: () = {
    ["Size of std___type_info_implementations___string_impl_base"]
        [::std::mem::size_of::<std___type_info_implementations___string_impl_base>() - 1usize];
    ["Alignment of std___type_info_implementations___string_impl_base"]
        [::std::mem::align_of::<std___type_info_implementations___string_impl_base>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___type_info_implementations___unique_impl {
    pub _address: u8,
}
const _: () = {
    ["Size of std___type_info_implementations___unique_impl"]
        [::std::mem::size_of::<std___type_info_implementations___unique_impl>() - 1usize];
    ["Alignment of std___type_info_implementations___unique_impl"]
        [::std::mem::align_of::<std___type_info_implementations___unique_impl>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___type_info_implementations___non_unique_impl {
    pub _address: u8,
}
const _: () = {
    ["Size of std___type_info_implementations___non_unique_impl"]
        [::std::mem::size_of::<std___type_info_implementations___non_unique_impl>() - 1usize];
    ["Alignment of std___type_info_implementations___non_unique_impl"]
        [::std::mem::align_of::<std___type_info_implementations___non_unique_impl>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct std___type_info_implementations___non_unique_arm_rtti_bit_impl {
    pub _address: u8,
}
pub type std___type_info_implementations___non_unique_arm_rtti_bit_impl___type_name_t =
    ::std::os::raw::c_ulong;
pub type std___type_info_implementations___non_unique_arm_rtti_bit_impl___non_unique_rtti_bit = u8;
const _: () = {
    ["Size of std___type_info_implementations___non_unique_arm_rtti_bit_impl"][::std::mem::size_of::<
        std___type_info_implementations___non_unique_arm_rtti_bit_impl,
    >() - 1usize];
    ["Alignment of std___type_info_implementations___non_unique_arm_rtti_bit_impl"]
        [::std::mem::align_of::<std___type_info_implementations___non_unique_arm_rtti_bit_impl>()
            - 1usize];
};
pub type std___type_info_implementations___impl =
    std___type_info_implementations___non_unique_arm_rtti_bit_impl;
const _: () = {
    ["Size of std___type_info_implementations"]
        [::std::mem::size_of::<std___type_info_implementations>() - 1usize];
    ["Alignment of std___type_info_implementations"]
        [::std::mem::align_of::<std___type_info_implementations>() - 1usize];
};
#[repr(C)]
pub struct std_type_info__bindgen_vtable(::std::os::raw::c_void);
#[repr(C)]
#[derive(Debug)]
pub struct std_type_info {
    pub vtable_: *const std_type_info__bindgen_vtable,
    pub __type_name: std___type_info_implementations___non_unique_arm_rtti_bit_impl___type_name_t,
}
pub type std_type_info___impl = std___type_info_implementations___impl;
const _: () = {
    ["Size of std_type_info"][::std::mem::size_of::<std_type_info>() - 16usize];
    ["Alignment of std_type_info"][::std::mem::align_of::<std_type_info>() - 8usize];
    ["Offset of field: std_type_info::__type_name"]
        [::std::mem::offset_of!(std_type_info, __type_name) - 8usize];
};
extern "C" {
    #[link_name = "\u{1}__ZNSt9type_infoD1Ev"]
    pub fn std_type_info_type_info_destructor(this: *mut std_type_info);
}
#[repr(C)]
#[derive(Debug)]
pub struct std_bad_cast {
    pub _base: std_exception,
}
const _: () = {
    ["Size of std_bad_cast"][::std::mem::size_of::<std_bad_cast>() - 8usize];
    ["Alignment of std_bad_cast"][::std::mem::align_of::<std_bad_cast>() - 8usize];
};
extern "C" {
    #[link_name = "\u{1}__ZNSt8bad_castC1Ev"]
    pub fn std_bad_cast_bad_cast(this: *mut std_bad_cast);
}
impl std_bad_cast {
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std_bad_cast_bad_cast(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
}
extern "C" {
    #[link_name = "\u{1}__ZNSt8bad_castD1Ev"]
    pub fn std_bad_cast_bad_cast_destructor(this: *mut std_bad_cast);
}
extern "C" {
    #[link_name = "\u{1}__ZNKSt8bad_cast4whatEv"]
    pub fn std_bad_cast_what(this: *mut ::std::os::raw::c_void) -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug)]
pub struct std_bad_typeid {
    pub _base: std_exception,
}
const _: () = {
    ["Size of std_bad_typeid"][::std::mem::size_of::<std_bad_typeid>() - 8usize];
    ["Alignment of std_bad_typeid"][::std::mem::align_of::<std_bad_typeid>() - 8usize];
};
extern "C" {
    #[link_name = "\u{1}__ZNSt10bad_typeidC1Ev"]
    pub fn std_bad_typeid_bad_typeid(this: *mut std_bad_typeid);
}
impl std_bad_typeid {
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std_bad_typeid_bad_typeid(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
}
extern "C" {
    #[link_name = "\u{1}__ZNSt10bad_typeidD1Ev"]
    pub fn std_bad_typeid_bad_typeid_destructor(this: *mut std_bad_typeid);
}
extern "C" {
    #[link_name = "\u{1}__ZNKSt10bad_typeid4whatEv"]
    pub fn std_bad_typeid_what(this: *mut ::std::os::raw::c_void) -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug)]
pub struct std_logic_error {
    pub _base: std_exception,
    pub __imp_: std___libcpp_refstring,
}
const _: () = {
    ["Size of std_logic_error"][::std::mem::size_of::<std_logic_error>() - 16usize];
    ["Alignment of std_logic_error"][::std::mem::align_of::<std_logic_error>() - 8usize];
    ["Offset of field: std_logic_error::__imp_"]
        [::std::mem::offset_of!(std_logic_error, __imp_) - 8usize];
};
extern "C" {
    #[link_name = "\u{1}__ZNSt11logic_errorC1ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE"]
    pub fn std_logic_error_logic_error(this: *mut std_logic_error, arg1: *const std_string);
}
extern "C" {
    #[link_name = "\u{1}__ZNSt11logic_errorC1EPKc"]
    pub fn std_logic_error_logic_error1(
        this: *mut std_logic_error,
        arg1: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNSt11logic_errorC1ERKS_"]
    pub fn std_logic_error_logic_error2(this: *mut std_logic_error, arg1: *const std_logic_error);
}
impl std_logic_error {
    #[inline]
    pub unsafe fn new(arg1: *const std_string) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std_logic_error_logic_error(__bindgen_tmp.as_mut_ptr(), arg1);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(arg1: *const ::std::os::raw::c_char) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std_logic_error_logic_error1(__bindgen_tmp.as_mut_ptr(), arg1);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new2(arg1: *const std_logic_error) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std_logic_error_logic_error2(__bindgen_tmp.as_mut_ptr(), arg1);
        __bindgen_tmp.assume_init()
    }
}
extern "C" {
    #[link_name = "\u{1}__ZNSt11logic_errorD1Ev"]
    pub fn std_logic_error_logic_error_destructor(this: *mut std_logic_error);
}
extern "C" {
    #[link_name = "\u{1}__ZNKSt11logic_error4whatEv"]
    pub fn std_logic_error_what(this: *mut ::std::os::raw::c_void)
        -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug)]
pub struct std_runtime_error {
    pub _base: std_exception,
    pub __imp_: std___libcpp_refstring,
}
const _: () = {
    ["Size of std_runtime_error"][::std::mem::size_of::<std_runtime_error>() - 16usize];
    ["Alignment of std_runtime_error"][::std::mem::align_of::<std_runtime_error>() - 8usize];
    ["Offset of field: std_runtime_error::__imp_"]
        [::std::mem::offset_of!(std_runtime_error, __imp_) - 8usize];
};
extern "C" {
    #[link_name = "\u{1}__ZNSt13runtime_errorC1ERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEE"]
    pub fn std_runtime_error_runtime_error(this: *mut std_runtime_error, arg1: *const std_string);
}
extern "C" {
    #[link_name = "\u{1}__ZNSt13runtime_errorC1EPKc"]
    pub fn std_runtime_error_runtime_error1(
        this: *mut std_runtime_error,
        arg1: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNSt13runtime_errorC1ERKS_"]
    pub fn std_runtime_error_runtime_error2(
        this: *mut std_runtime_error,
        arg1: *const std_runtime_error,
    );
}
impl std_runtime_error {
    #[inline]
    pub unsafe fn new(arg1: *const std_string) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std_runtime_error_runtime_error(__bindgen_tmp.as_mut_ptr(), arg1);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new1(arg1: *const ::std::os::raw::c_char) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std_runtime_error_runtime_error1(__bindgen_tmp.as_mut_ptr(), arg1);
        __bindgen_tmp.assume_init()
    }
    #[inline]
    pub unsafe fn new2(arg1: *const std_runtime_error) -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        std_runtime_error_runtime_error2(__bindgen_tmp.as_mut_ptr(), arg1);
        __bindgen_tmp.assume_init()
    }
}
extern "C" {
    #[link_name = "\u{1}__ZNSt13runtime_errorD1Ev"]
    pub fn std_runtime_error_runtime_error_destructor(this: *mut std_runtime_error);
}
extern "C" {
    #[link_name = "\u{1}__ZNKSt13runtime_error4whatEv"]
    pub fn std_runtime_error_what(
        this: *mut ::std::os::raw::c_void,
    ) -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug)]
pub struct std_domain_error {
    pub _base: std_logic_error,
}
const _: () = {
    ["Size of std_domain_error"][::std::mem::size_of::<std_domain_error>() - 16usize];
    ["Alignment of std_domain_error"][::std::mem::align_of::<std_domain_error>() - 8usize];
};
extern "C" {
    #[link_name = "\u{1}__ZNSt12domain_errorD1Ev"]
    pub fn std_domain_error_domain_error_destructor(this: *mut std_domain_error);
}
#[repr(C)]
#[derive(Debug)]
pub struct std_invalid_argument {
    pub _base: std_logic_error,
}
const _: () = {
    ["Size of std_invalid_argument"][::std::mem::size_of::<std_invalid_argument>() - 16usize];
    ["Alignment of std_invalid_argument"][::std::mem::align_of::<std_invalid_argument>() - 8usize];
};
extern "C" {
    #[link_name = "\u{1}__ZNSt16invalid_argumentD1Ev"]
    pub fn std_invalid_argument_invalid_argument_destructor(this: *mut std_invalid_argument);
}
#[repr(C)]
#[derive(Debug)]
pub struct std_length_error {
    pub _base: std_logic_error,
}
const _: () = {
    ["Size of std_length_error"][::std::mem::size_of::<std_length_error>() - 16usize];
    ["Alignment of std_length_error"][::std::mem::align_of::<std_length_error>() - 8usize];
};
extern "C" {
    #[link_name = "\u{1}__ZNSt12length_errorD1Ev"]
    pub fn std_length_error_length_error_destructor(this: *mut std_length_error);
}
#[repr(C)]
#[derive(Debug)]
pub struct std_out_of_range {
    pub _base: std_logic_error,
}
const _: () = {
    ["Size of std_out_of_range"][::std::mem::size_of::<std_out_of_range>() - 16usize];
    ["Alignment of std_out_of_range"][::std::mem::align_of::<std_out_of_range>() - 8usize];
};
extern "C" {
    #[link_name = "\u{1}__ZNSt12out_of_rangeD1Ev"]
    pub fn std_out_of_range_out_of_range_destructor(this: *mut std_out_of_range);
}
#[repr(C)]
#[derive(Debug)]
pub struct std_range_error {
    pub _base: std_runtime_error,
}
const _: () = {
    ["Size of std_range_error"][::std::mem::size_of::<std_range_error>() - 16usize];
    ["Alignment of std_range_error"][::std::mem::align_of::<std_range_error>() - 8usize];
};
extern "C" {
    #[link_name = "\u{1}__ZNSt11range_errorD1Ev"]
    pub fn std_range_error_range_error_destructor(this: *mut std_range_error);
}
#[repr(C)]
#[derive(Debug)]
pub struct std_overflow_error {
    pub _base: std_runtime_error,
}
const _: () = {
    ["Size of std_overflow_error"][::std::mem::size_of::<std_overflow_error>() - 16usize];
    ["Alignment of std_overflow_error"][::std::mem::align_of::<std_overflow_error>() - 8usize];
};
extern "C" {
    #[link_name = "\u{1}__ZNSt14overflow_errorD1Ev"]
    pub fn std_overflow_error_overflow_error_destructor(this: *mut std_overflow_error);
}
#[repr(C)]
#[derive(Debug)]
pub struct std_underflow_error {
    pub _base: std_runtime_error,
}
const _: () = {
    ["Size of std_underflow_error"][::std::mem::size_of::<std_underflow_error>() - 16usize];
    ["Alignment of std_underflow_error"][::std::mem::align_of::<std_underflow_error>() - 8usize];
};
extern "C" {
    #[link_name = "\u{1}__ZNSt15underflow_errorD1Ev"]
    pub fn std_underflow_error_underflow_error_destructor(this: *mut std_underflow_error);
}
#[repr(C)]
#[derive(Debug)]
pub struct std_bad_variant_access {
    pub _base: std_exception,
}
const _: () = {
    ["Size of std_bad_variant_access"][::std::mem::size_of::<std_bad_variant_access>() - 8usize];
    ["Alignment of std_bad_variant_access"]
        [::std::mem::align_of::<std_bad_variant_access>() - 8usize];
};
extern "C" {
    #[link_name = "\u{1}__ZNKSt18bad_variant_access4whatEv"]
    pub fn std_bad_variant_access_what(
        this: *mut ::std::os::raw::c_void,
    ) -> *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug)]
pub struct std_bad_optional_access {
    pub _base: std_exception,
}
const _: () = {
    ["Size of std_bad_optional_access"][::std::mem::size_of::<std_bad_optional_access>() - 8usize];
    ["Alignment of std_bad_optional_access"]
        [::std::mem::align_of::<std_bad_optional_access>() - 8usize];
};
extern "C" {
    #[link_name = "\u{1}__ZNSt19bad_optional_accessD1Ev"]
    pub fn std_bad_optional_access_bad_optional_access_destructor(
        this: *mut std_bad_optional_access,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZNKSt19bad_optional_access4whatEv"]
    pub fn std_bad_optional_access_what(
        this: *mut ::std::os::raw::c_void,
    ) -> *const ::std::os::raw::c_char;
}
pub type max_align_t = f64;
pub type int_least8_t = i8;
pub type int_least16_t = i16;
pub type int_least32_t = i32;
pub type int_least64_t = i64;
pub type uint_least8_t = u8;
pub type uint_least16_t = u16;
pub type uint_least32_t = u32;
pub type uint_least64_t = u64;
pub type int_fast8_t = i8;
pub type int_fast16_t = i16;
pub type int_fast32_t = i32;
pub type int_fast64_t = i64;
pub type uint_fast8_t = u8;
pub type uint_fast16_t = u16;
pub type uint_fast32_t = u32;
pub type uint_fast64_t = u64;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_longlong;
pub type __uint64_t = ::std::os::raw::c_ulonglong;
pub type __darwin_intptr_t = ::std::os::raw::c_long;
pub type __darwin_natural_t = ::std::os::raw::c_uint;
pub type __darwin_ct_rune_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t {
    pub __mbstate8: [::std::os::raw::c_char; 128usize],
    pub _mbstateL: ::std::os::raw::c_longlong,
}
const _: () = {
    ["Size of __mbstate_t"][::std::mem::size_of::<__mbstate_t>() - 128usize];
    ["Alignment of __mbstate_t"][::std::mem::align_of::<__mbstate_t>() - 8usize];
    ["Offset of field: __mbstate_t::__mbstate8"]
        [::std::mem::offset_of!(__mbstate_t, __mbstate8) - 0usize];
    ["Offset of field: __mbstate_t::_mbstateL"]
        [::std::mem::offset_of!(__mbstate_t, _mbstateL) - 0usize];
};
pub type __darwin_mbstate_t = __mbstate_t;
pub type __darwin_ptrdiff_t = ::std::os::raw::c_long;
pub type __darwin_size_t = ::std::os::raw::c_ulong;
pub type __darwin_va_list = __builtin_va_list;
pub type __darwin_wchar_t = ::std::os::raw::c_int;
pub type __darwin_rune_t = __darwin_wchar_t;
pub type __darwin_wint_t = ::std::os::raw::c_int;
pub type __darwin_clock_t = ::std::os::raw::c_ulong;
pub type __darwin_socklen_t = __uint32_t;
pub type __darwin_ssize_t = ::std::os::raw::c_long;
pub type __darwin_time_t = ::std::os::raw::c_long;
pub type __darwin_blkcnt_t = __int64_t;
pub type __darwin_blksize_t = __int32_t;
pub type __darwin_dev_t = __int32_t;
pub type __darwin_fsblkcnt_t = ::std::os::raw::c_uint;
pub type __darwin_fsfilcnt_t = ::std::os::raw::c_uint;
pub type __darwin_gid_t = __uint32_t;
pub type __darwin_id_t = __uint32_t;
pub type __darwin_ino64_t = __uint64_t;
pub type __darwin_ino_t = __darwin_ino64_t;
pub type __darwin_mach_port_name_t = __darwin_natural_t;
pub type __darwin_mach_port_t = __darwin_mach_port_name_t;
pub type __darwin_mode_t = __uint16_t;
pub type __darwin_off_t = __int64_t;
pub type __darwin_pid_t = __int32_t;
pub type __darwin_sigset_t = __uint32_t;
pub type __darwin_suseconds_t = __int32_t;
pub type __darwin_uid_t = __uint32_t;
pub type __darwin_useconds_t = __uint32_t;
pub type __darwin_uuid_t = [::std::os::raw::c_uchar; 16usize];
pub type __darwin_uuid_string_t = [::std::os::raw::c_char; 37usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_pthread_handler_rec {
    pub __routine: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    pub __arg: *mut ::std::os::raw::c_void,
    pub __next: *mut __darwin_pthread_handler_rec,
}
const _: () = {
    ["Size of __darwin_pthread_handler_rec"]
        [::std::mem::size_of::<__darwin_pthread_handler_rec>() - 24usize];
    ["Alignment of __darwin_pthread_handler_rec"]
        [::std::mem::align_of::<__darwin_pthread_handler_rec>() - 8usize];
    ["Offset of field: __darwin_pthread_handler_rec::__routine"]
        [::std::mem::offset_of!(__darwin_pthread_handler_rec, __routine) - 0usize];
    ["Offset of field: __darwin_pthread_handler_rec::__arg"]
        [::std::mem::offset_of!(__darwin_pthread_handler_rec, __arg) - 8usize];
    ["Offset of field: __darwin_pthread_handler_rec::__next"]
        [::std::mem::offset_of!(__darwin_pthread_handler_rec, __next) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_attr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
const _: () = {
    ["Size of _opaque_pthread_attr_t"][::std::mem::size_of::<_opaque_pthread_attr_t>() - 64usize];
    ["Alignment of _opaque_pthread_attr_t"]
        [::std::mem::align_of::<_opaque_pthread_attr_t>() - 8usize];
    ["Offset of field: _opaque_pthread_attr_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_attr_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_attr_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_attr_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_cond_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 40usize],
}
const _: () = {
    ["Size of _opaque_pthread_cond_t"][::std::mem::size_of::<_opaque_pthread_cond_t>() - 48usize];
    ["Alignment of _opaque_pthread_cond_t"]
        [::std::mem::align_of::<_opaque_pthread_cond_t>() - 8usize];
    ["Offset of field: _opaque_pthread_cond_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_cond_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_cond_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_cond_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_condattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
const _: () = {
    ["Size of _opaque_pthread_condattr_t"]
        [::std::mem::size_of::<_opaque_pthread_condattr_t>() - 16usize];
    ["Alignment of _opaque_pthread_condattr_t"]
        [::std::mem::align_of::<_opaque_pthread_condattr_t>() - 8usize];
    ["Offset of field: _opaque_pthread_condattr_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_condattr_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_condattr_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_condattr_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_mutex_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 56usize],
}
const _: () = {
    ["Size of _opaque_pthread_mutex_t"][::std::mem::size_of::<_opaque_pthread_mutex_t>() - 64usize];
    ["Alignment of _opaque_pthread_mutex_t"]
        [::std::mem::align_of::<_opaque_pthread_mutex_t>() - 8usize];
    ["Offset of field: _opaque_pthread_mutex_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_mutex_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_mutex_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_mutex_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_mutexattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
const _: () = {
    ["Size of _opaque_pthread_mutexattr_t"]
        [::std::mem::size_of::<_opaque_pthread_mutexattr_t>() - 16usize];
    ["Alignment of _opaque_pthread_mutexattr_t"]
        [::std::mem::align_of::<_opaque_pthread_mutexattr_t>() - 8usize];
    ["Offset of field: _opaque_pthread_mutexattr_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_mutexattr_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_mutexattr_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_mutexattr_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_once_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 8usize],
}
const _: () = {
    ["Size of _opaque_pthread_once_t"][::std::mem::size_of::<_opaque_pthread_once_t>() - 16usize];
    ["Alignment of _opaque_pthread_once_t"]
        [::std::mem::align_of::<_opaque_pthread_once_t>() - 8usize];
    ["Offset of field: _opaque_pthread_once_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_once_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_once_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_once_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_rwlock_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 192usize],
}
const _: () = {
    ["Size of _opaque_pthread_rwlock_t"]
        [::std::mem::size_of::<_opaque_pthread_rwlock_t>() - 200usize];
    ["Alignment of _opaque_pthread_rwlock_t"]
        [::std::mem::align_of::<_opaque_pthread_rwlock_t>() - 8usize];
    ["Offset of field: _opaque_pthread_rwlock_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_rwlock_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_rwlock_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_rwlock_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_rwlockattr_t {
    pub __sig: ::std::os::raw::c_long,
    pub __opaque: [::std::os::raw::c_char; 16usize],
}
const _: () = {
    ["Size of _opaque_pthread_rwlockattr_t"]
        [::std::mem::size_of::<_opaque_pthread_rwlockattr_t>() - 24usize];
    ["Alignment of _opaque_pthread_rwlockattr_t"]
        [::std::mem::align_of::<_opaque_pthread_rwlockattr_t>() - 8usize];
    ["Offset of field: _opaque_pthread_rwlockattr_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_rwlockattr_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_rwlockattr_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_rwlockattr_t, __opaque) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _opaque_pthread_t {
    pub __sig: ::std::os::raw::c_long,
    pub __cleanup_stack: *mut __darwin_pthread_handler_rec,
    pub __opaque: [::std::os::raw::c_char; 8176usize],
}
const _: () = {
    ["Size of _opaque_pthread_t"][::std::mem::size_of::<_opaque_pthread_t>() - 8192usize];
    ["Alignment of _opaque_pthread_t"][::std::mem::align_of::<_opaque_pthread_t>() - 8usize];
    ["Offset of field: _opaque_pthread_t::__sig"]
        [::std::mem::offset_of!(_opaque_pthread_t, __sig) - 0usize];
    ["Offset of field: _opaque_pthread_t::__cleanup_stack"]
        [::std::mem::offset_of!(_opaque_pthread_t, __cleanup_stack) - 8usize];
    ["Offset of field: _opaque_pthread_t::__opaque"]
        [::std::mem::offset_of!(_opaque_pthread_t, __opaque) - 16usize];
};
pub type __darwin_pthread_attr_t = _opaque_pthread_attr_t;
pub type __darwin_pthread_cond_t = _opaque_pthread_cond_t;
pub type __darwin_pthread_condattr_t = _opaque_pthread_condattr_t;
pub type __darwin_pthread_key_t = ::std::os::raw::c_ulong;
pub type __darwin_pthread_mutex_t = _opaque_pthread_mutex_t;
pub type __darwin_pthread_mutexattr_t = _opaque_pthread_mutexattr_t;
pub type __darwin_pthread_once_t = _opaque_pthread_once_t;
pub type __darwin_pthread_rwlock_t = _opaque_pthread_rwlock_t;
pub type __darwin_pthread_rwlockattr_t = _opaque_pthread_rwlockattr_t;
pub type __darwin_pthread_t = *mut _opaque_pthread_t;
pub type u_int8_t = ::std::os::raw::c_uchar;
pub type u_int16_t = ::std::os::raw::c_ushort;
pub type u_int32_t = ::std::os::raw::c_uint;
pub type u_int64_t = ::std::os::raw::c_ulonglong;
pub type register_t = i64;
pub type user_addr_t = u_int64_t;
pub type user_size_t = u_int64_t;
pub type user_ssize_t = i64;
pub type user_long_t = i64;
pub type user_ulong_t = u_int64_t;
pub type user_time_t = i64;
pub type user_off_t = i64;
pub type syscall_arg_t = u_int64_t;
pub type intmax_t = ::std::os::raw::c_long;
pub type uintmax_t = ::std::os::raw::c_ulong;
pub type __darwin_nl_item = ::std::os::raw::c_int;
pub type __darwin_wctrans_t = ::std::os::raw::c_int;
pub type __darwin_wctype_t = __uint32_t;
pub const idtype_t_P_ALL: idtype_t = 0;
pub const idtype_t_P_PID: idtype_t = 1;
pub const idtype_t_P_PGID: idtype_t = 2;
pub type idtype_t = ::std::os::raw::c_uint;
pub type pid_t = __darwin_pid_t;
pub type id_t = __darwin_id_t;
pub type sig_atomic_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_exception_state {
    pub __exception: __uint32_t,
    pub __fsr: __uint32_t,
    pub __far: __uint32_t,
}
const _: () = {
    ["Size of __darwin_arm_exception_state"]
        [::std::mem::size_of::<__darwin_arm_exception_state>() - 12usize];
    ["Alignment of __darwin_arm_exception_state"]
        [::std::mem::align_of::<__darwin_arm_exception_state>() - 4usize];
    ["Offset of field: __darwin_arm_exception_state::__exception"]
        [::std::mem::offset_of!(__darwin_arm_exception_state, __exception) - 0usize];
    ["Offset of field: __darwin_arm_exception_state::__fsr"]
        [::std::mem::offset_of!(__darwin_arm_exception_state, __fsr) - 4usize];
    ["Offset of field: __darwin_arm_exception_state::__far"]
        [::std::mem::offset_of!(__darwin_arm_exception_state, __far) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_exception_state64 {
    pub __far: __uint64_t,
    pub __esr: __uint32_t,
    pub __exception: __uint32_t,
}
const _: () = {
    ["Size of __darwin_arm_exception_state64"]
        [::std::mem::size_of::<__darwin_arm_exception_state64>() - 16usize];
    ["Alignment of __darwin_arm_exception_state64"]
        [::std::mem::align_of::<__darwin_arm_exception_state64>() - 8usize];
    ["Offset of field: __darwin_arm_exception_state64::__far"]
        [::std::mem::offset_of!(__darwin_arm_exception_state64, __far) - 0usize];
    ["Offset of field: __darwin_arm_exception_state64::__esr"]
        [::std::mem::offset_of!(__darwin_arm_exception_state64, __esr) - 8usize];
    ["Offset of field: __darwin_arm_exception_state64::__exception"]
        [::std::mem::offset_of!(__darwin_arm_exception_state64, __exception) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_thread_state {
    pub __r: [__uint32_t; 13usize],
    pub __sp: __uint32_t,
    pub __lr: __uint32_t,
    pub __pc: __uint32_t,
    pub __cpsr: __uint32_t,
}
const _: () = {
    ["Size of __darwin_arm_thread_state"]
        [::std::mem::size_of::<__darwin_arm_thread_state>() - 68usize];
    ["Alignment of __darwin_arm_thread_state"]
        [::std::mem::align_of::<__darwin_arm_thread_state>() - 4usize];
    ["Offset of field: __darwin_arm_thread_state::__r"]
        [::std::mem::offset_of!(__darwin_arm_thread_state, __r) - 0usize];
    ["Offset of field: __darwin_arm_thread_state::__sp"]
        [::std::mem::offset_of!(__darwin_arm_thread_state, __sp) - 52usize];
    ["Offset of field: __darwin_arm_thread_state::__lr"]
        [::std::mem::offset_of!(__darwin_arm_thread_state, __lr) - 56usize];
    ["Offset of field: __darwin_arm_thread_state::__pc"]
        [::std::mem::offset_of!(__darwin_arm_thread_state, __pc) - 60usize];
    ["Offset of field: __darwin_arm_thread_state::__cpsr"]
        [::std::mem::offset_of!(__darwin_arm_thread_state, __cpsr) - 64usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_thread_state64 {
    pub __x: [__uint64_t; 29usize],
    pub __fp: __uint64_t,
    pub __lr: __uint64_t,
    pub __sp: __uint64_t,
    pub __pc: __uint64_t,
    pub __cpsr: __uint32_t,
    pub __pad: __uint32_t,
}
const _: () = {
    ["Size of __darwin_arm_thread_state64"]
        [::std::mem::size_of::<__darwin_arm_thread_state64>() - 272usize];
    ["Alignment of __darwin_arm_thread_state64"]
        [::std::mem::align_of::<__darwin_arm_thread_state64>() - 8usize];
    ["Offset of field: __darwin_arm_thread_state64::__x"]
        [::std::mem::offset_of!(__darwin_arm_thread_state64, __x) - 0usize];
    ["Offset of field: __darwin_arm_thread_state64::__fp"]
        [::std::mem::offset_of!(__darwin_arm_thread_state64, __fp) - 232usize];
    ["Offset of field: __darwin_arm_thread_state64::__lr"]
        [::std::mem::offset_of!(__darwin_arm_thread_state64, __lr) - 240usize];
    ["Offset of field: __darwin_arm_thread_state64::__sp"]
        [::std::mem::offset_of!(__darwin_arm_thread_state64, __sp) - 248usize];
    ["Offset of field: __darwin_arm_thread_state64::__pc"]
        [::std::mem::offset_of!(__darwin_arm_thread_state64, __pc) - 256usize];
    ["Offset of field: __darwin_arm_thread_state64::__cpsr"]
        [::std::mem::offset_of!(__darwin_arm_thread_state64, __cpsr) - 264usize];
    ["Offset of field: __darwin_arm_thread_state64::__pad"]
        [::std::mem::offset_of!(__darwin_arm_thread_state64, __pad) - 268usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_vfp_state {
    pub __r: [__uint32_t; 64usize],
    pub __fpscr: __uint32_t,
}
const _: () = {
    ["Size of __darwin_arm_vfp_state"][::std::mem::size_of::<__darwin_arm_vfp_state>() - 260usize];
    ["Alignment of __darwin_arm_vfp_state"]
        [::std::mem::align_of::<__darwin_arm_vfp_state>() - 4usize];
    ["Offset of field: __darwin_arm_vfp_state::__r"]
        [::std::mem::offset_of!(__darwin_arm_vfp_state, __r) - 0usize];
    ["Offset of field: __darwin_arm_vfp_state::__fpscr"]
        [::std::mem::offset_of!(__darwin_arm_vfp_state, __fpscr) - 256usize];
};
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_neon_state64 {
    pub __v: [__uint128_t; 32usize],
    pub __fpsr: __uint32_t,
    pub __fpcr: __uint32_t,
}
const _: () = {
    ["Size of __darwin_arm_neon_state64"]
        [::std::mem::size_of::<__darwin_arm_neon_state64>() - 528usize];
    ["Alignment of __darwin_arm_neon_state64"]
        [::std::mem::align_of::<__darwin_arm_neon_state64>() - 16usize];
    ["Offset of field: __darwin_arm_neon_state64::__v"]
        [::std::mem::offset_of!(__darwin_arm_neon_state64, __v) - 0usize];
    ["Offset of field: __darwin_arm_neon_state64::__fpsr"]
        [::std::mem::offset_of!(__darwin_arm_neon_state64, __fpsr) - 512usize];
    ["Offset of field: __darwin_arm_neon_state64::__fpcr"]
        [::std::mem::offset_of!(__darwin_arm_neon_state64, __fpcr) - 516usize];
};
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_neon_state {
    pub __v: [__uint128_t; 16usize],
    pub __fpsr: __uint32_t,
    pub __fpcr: __uint32_t,
}
const _: () = {
    ["Size of __darwin_arm_neon_state"]
        [::std::mem::size_of::<__darwin_arm_neon_state>() - 272usize];
    ["Alignment of __darwin_arm_neon_state"]
        [::std::mem::align_of::<__darwin_arm_neon_state>() - 16usize];
    ["Offset of field: __darwin_arm_neon_state::__v"]
        [::std::mem::offset_of!(__darwin_arm_neon_state, __v) - 0usize];
    ["Offset of field: __darwin_arm_neon_state::__fpsr"]
        [::std::mem::offset_of!(__darwin_arm_neon_state, __fpsr) - 256usize];
    ["Offset of field: __darwin_arm_neon_state::__fpcr"]
        [::std::mem::offset_of!(__darwin_arm_neon_state, __fpcr) - 260usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __arm_pagein_state {
    pub __pagein_error: ::std::os::raw::c_int,
}
const _: () = {
    ["Size of __arm_pagein_state"][::std::mem::size_of::<__arm_pagein_state>() - 4usize];
    ["Alignment of __arm_pagein_state"][::std::mem::align_of::<__arm_pagein_state>() - 4usize];
    ["Offset of field: __arm_pagein_state::__pagein_error"]
        [::std::mem::offset_of!(__arm_pagein_state, __pagein_error) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __arm_legacy_debug_state {
    pub __bvr: [__uint32_t; 16usize],
    pub __bcr: [__uint32_t; 16usize],
    pub __wvr: [__uint32_t; 16usize],
    pub __wcr: [__uint32_t; 16usize],
}
const _: () = {
    ["Size of __arm_legacy_debug_state"]
        [::std::mem::size_of::<__arm_legacy_debug_state>() - 256usize];
    ["Alignment of __arm_legacy_debug_state"]
        [::std::mem::align_of::<__arm_legacy_debug_state>() - 4usize];
    ["Offset of field: __arm_legacy_debug_state::__bvr"]
        [::std::mem::offset_of!(__arm_legacy_debug_state, __bvr) - 0usize];
    ["Offset of field: __arm_legacy_debug_state::__bcr"]
        [::std::mem::offset_of!(__arm_legacy_debug_state, __bcr) - 64usize];
    ["Offset of field: __arm_legacy_debug_state::__wvr"]
        [::std::mem::offset_of!(__arm_legacy_debug_state, __wvr) - 128usize];
    ["Offset of field: __arm_legacy_debug_state::__wcr"]
        [::std::mem::offset_of!(__arm_legacy_debug_state, __wcr) - 192usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_debug_state32 {
    pub __bvr: [__uint32_t; 16usize],
    pub __bcr: [__uint32_t; 16usize],
    pub __wvr: [__uint32_t; 16usize],
    pub __wcr: [__uint32_t; 16usize],
    pub __mdscr_el1: __uint64_t,
}
const _: () = {
    ["Size of __darwin_arm_debug_state32"]
        [::std::mem::size_of::<__darwin_arm_debug_state32>() - 264usize];
    ["Alignment of __darwin_arm_debug_state32"]
        [::std::mem::align_of::<__darwin_arm_debug_state32>() - 8usize];
    ["Offset of field: __darwin_arm_debug_state32::__bvr"]
        [::std::mem::offset_of!(__darwin_arm_debug_state32, __bvr) - 0usize];
    ["Offset of field: __darwin_arm_debug_state32::__bcr"]
        [::std::mem::offset_of!(__darwin_arm_debug_state32, __bcr) - 64usize];
    ["Offset of field: __darwin_arm_debug_state32::__wvr"]
        [::std::mem::offset_of!(__darwin_arm_debug_state32, __wvr) - 128usize];
    ["Offset of field: __darwin_arm_debug_state32::__wcr"]
        [::std::mem::offset_of!(__darwin_arm_debug_state32, __wcr) - 192usize];
    ["Offset of field: __darwin_arm_debug_state32::__mdscr_el1"]
        [::std::mem::offset_of!(__darwin_arm_debug_state32, __mdscr_el1) - 256usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_debug_state64 {
    pub __bvr: [__uint64_t; 16usize],
    pub __bcr: [__uint64_t; 16usize],
    pub __wvr: [__uint64_t; 16usize],
    pub __wcr: [__uint64_t; 16usize],
    pub __mdscr_el1: __uint64_t,
}
const _: () = {
    ["Size of __darwin_arm_debug_state64"]
        [::std::mem::size_of::<__darwin_arm_debug_state64>() - 520usize];
    ["Alignment of __darwin_arm_debug_state64"]
        [::std::mem::align_of::<__darwin_arm_debug_state64>() - 8usize];
    ["Offset of field: __darwin_arm_debug_state64::__bvr"]
        [::std::mem::offset_of!(__darwin_arm_debug_state64, __bvr) - 0usize];
    ["Offset of field: __darwin_arm_debug_state64::__bcr"]
        [::std::mem::offset_of!(__darwin_arm_debug_state64, __bcr) - 128usize];
    ["Offset of field: __darwin_arm_debug_state64::__wvr"]
        [::std::mem::offset_of!(__darwin_arm_debug_state64, __wvr) - 256usize];
    ["Offset of field: __darwin_arm_debug_state64::__wcr"]
        [::std::mem::offset_of!(__darwin_arm_debug_state64, __wcr) - 384usize];
    ["Offset of field: __darwin_arm_debug_state64::__mdscr_el1"]
        [::std::mem::offset_of!(__darwin_arm_debug_state64, __mdscr_el1) - 512usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_arm_cpmu_state64 {
    pub __ctrs: [__uint64_t; 16usize],
}
const _: () = {
    ["Size of __darwin_arm_cpmu_state64"]
        [::std::mem::size_of::<__darwin_arm_cpmu_state64>() - 128usize];
    ["Alignment of __darwin_arm_cpmu_state64"]
        [::std::mem::align_of::<__darwin_arm_cpmu_state64>() - 8usize];
    ["Offset of field: __darwin_arm_cpmu_state64::__ctrs"]
        [::std::mem::offset_of!(__darwin_arm_cpmu_state64, __ctrs) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_mcontext32 {
    pub __es: __darwin_arm_exception_state,
    pub __ss: __darwin_arm_thread_state,
    pub __fs: __darwin_arm_vfp_state,
}
const _: () = {
    ["Size of __darwin_mcontext32"][::std::mem::size_of::<__darwin_mcontext32>() - 340usize];
    ["Alignment of __darwin_mcontext32"][::std::mem::align_of::<__darwin_mcontext32>() - 4usize];
    ["Offset of field: __darwin_mcontext32::__es"]
        [::std::mem::offset_of!(__darwin_mcontext32, __es) - 0usize];
    ["Offset of field: __darwin_mcontext32::__ss"]
        [::std::mem::offset_of!(__darwin_mcontext32, __ss) - 12usize];
    ["Offset of field: __darwin_mcontext32::__fs"]
        [::std::mem::offset_of!(__darwin_mcontext32, __fs) - 80usize];
};
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_mcontext64 {
    pub __es: __darwin_arm_exception_state64,
    pub __ss: __darwin_arm_thread_state64,
    pub __ns: __darwin_arm_neon_state64,
}
const _: () = {
    ["Size of __darwin_mcontext64"][::std::mem::size_of::<__darwin_mcontext64>() - 816usize];
    ["Alignment of __darwin_mcontext64"][::std::mem::align_of::<__darwin_mcontext64>() - 16usize];
    ["Offset of field: __darwin_mcontext64::__es"]
        [::std::mem::offset_of!(__darwin_mcontext64, __es) - 0usize];
    ["Offset of field: __darwin_mcontext64::__ss"]
        [::std::mem::offset_of!(__darwin_mcontext64, __ss) - 16usize];
    ["Offset of field: __darwin_mcontext64::__ns"]
        [::std::mem::offset_of!(__darwin_mcontext64, __ns) - 288usize];
};
pub type mcontext_t = *mut __darwin_mcontext64;
pub type pthread_attr_t = __darwin_pthread_attr_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_sigaltstack {
    pub ss_sp: *mut ::std::os::raw::c_void,
    pub ss_size: __darwin_size_t,
    pub ss_flags: ::std::os::raw::c_int,
}
const _: () = {
    ["Size of __darwin_sigaltstack"][::std::mem::size_of::<__darwin_sigaltstack>() - 24usize];
    ["Alignment of __darwin_sigaltstack"][::std::mem::align_of::<__darwin_sigaltstack>() - 8usize];
    ["Offset of field: __darwin_sigaltstack::ss_sp"]
        [::std::mem::offset_of!(__darwin_sigaltstack, ss_sp) - 0usize];
    ["Offset of field: __darwin_sigaltstack::ss_size"]
        [::std::mem::offset_of!(__darwin_sigaltstack, ss_size) - 8usize];
    ["Offset of field: __darwin_sigaltstack::ss_flags"]
        [::std::mem::offset_of!(__darwin_sigaltstack, ss_flags) - 16usize];
};
pub type stack_t = __darwin_sigaltstack;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __darwin_ucontext {
    pub uc_onstack: ::std::os::raw::c_int,
    pub uc_sigmask: __darwin_sigset_t,
    pub uc_stack: __darwin_sigaltstack,
    pub uc_link: *mut __darwin_ucontext,
    pub uc_mcsize: __darwin_size_t,
    pub uc_mcontext: *mut __darwin_mcontext64,
}
const _: () = {
    ["Size of __darwin_ucontext"][::std::mem::size_of::<__darwin_ucontext>() - 56usize];
    ["Alignment of __darwin_ucontext"][::std::mem::align_of::<__darwin_ucontext>() - 8usize];
    ["Offset of field: __darwin_ucontext::uc_onstack"]
        [::std::mem::offset_of!(__darwin_ucontext, uc_onstack) - 0usize];
    ["Offset of field: __darwin_ucontext::uc_sigmask"]
        [::std::mem::offset_of!(__darwin_ucontext, uc_sigmask) - 4usize];
    ["Offset of field: __darwin_ucontext::uc_stack"]
        [::std::mem::offset_of!(__darwin_ucontext, uc_stack) - 8usize];
    ["Offset of field: __darwin_ucontext::uc_link"]
        [::std::mem::offset_of!(__darwin_ucontext, uc_link) - 32usize];
    ["Offset of field: __darwin_ucontext::uc_mcsize"]
        [::std::mem::offset_of!(__darwin_ucontext, uc_mcsize) - 40usize];
    ["Offset of field: __darwin_ucontext::uc_mcontext"]
        [::std::mem::offset_of!(__darwin_ucontext, uc_mcontext) - 48usize];
};
pub type ucontext_t = __darwin_ucontext;
pub type sigset_t = __darwin_sigset_t;
pub type uid_t = __darwin_uid_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub union sigval {
    pub sival_int: ::std::os::raw::c_int,
    pub sival_ptr: *mut ::std::os::raw::c_void,
}
const _: () = {
    ["Size of sigval"][::std::mem::size_of::<sigval>() - 8usize];
    ["Alignment of sigval"][::std::mem::align_of::<sigval>() - 8usize];
    ["Offset of field: sigval::sival_int"][::std::mem::offset_of!(sigval, sival_int) - 0usize];
    ["Offset of field: sigval::sival_ptr"][::std::mem::offset_of!(sigval, sival_ptr) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sigevent {
    pub sigev_notify: ::std::os::raw::c_int,
    pub sigev_signo: ::std::os::raw::c_int,
    pub sigev_value: sigval,
    pub sigev_notify_function: ::std::option::Option<unsafe extern "C" fn(arg1: sigval)>,
    pub sigev_notify_attributes: *mut pthread_attr_t,
}
const _: () = {
    ["Size of sigevent"][::std::mem::size_of::<sigevent>() - 32usize];
    ["Alignment of sigevent"][::std::mem::align_of::<sigevent>() - 8usize];
    ["Offset of field: sigevent::sigev_notify"]
        [::std::mem::offset_of!(sigevent, sigev_notify) - 0usize];
    ["Offset of field: sigevent::sigev_signo"]
        [::std::mem::offset_of!(sigevent, sigev_signo) - 4usize];
    ["Offset of field: sigevent::sigev_value"]
        [::std::mem::offset_of!(sigevent, sigev_value) - 8usize];
    ["Offset of field: sigevent::sigev_notify_function"]
        [::std::mem::offset_of!(sigevent, sigev_notify_function) - 16usize];
    ["Offset of field: sigevent::sigev_notify_attributes"]
        [::std::mem::offset_of!(sigevent, sigev_notify_attributes) - 24usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __siginfo {
    pub si_signo: ::std::os::raw::c_int,
    pub si_errno: ::std::os::raw::c_int,
    pub si_code: ::std::os::raw::c_int,
    pub si_pid: pid_t,
    pub si_uid: uid_t,
    pub si_status: ::std::os::raw::c_int,
    pub si_addr: *mut ::std::os::raw::c_void,
    pub si_value: sigval,
    pub si_band: ::std::os::raw::c_long,
    pub __pad: [::std::os::raw::c_ulong; 7usize],
}
const _: () = {
    ["Size of __siginfo"][::std::mem::size_of::<__siginfo>() - 104usize];
    ["Alignment of __siginfo"][::std::mem::align_of::<__siginfo>() - 8usize];
    ["Offset of field: __siginfo::si_signo"][::std::mem::offset_of!(__siginfo, si_signo) - 0usize];
    ["Offset of field: __siginfo::si_errno"][::std::mem::offset_of!(__siginfo, si_errno) - 4usize];
    ["Offset of field: __siginfo::si_code"][::std::mem::offset_of!(__siginfo, si_code) - 8usize];
    ["Offset of field: __siginfo::si_pid"][::std::mem::offset_of!(__siginfo, si_pid) - 12usize];
    ["Offset of field: __siginfo::si_uid"][::std::mem::offset_of!(__siginfo, si_uid) - 16usize];
    ["Offset of field: __siginfo::si_status"]
        [::std::mem::offset_of!(__siginfo, si_status) - 20usize];
    ["Offset of field: __siginfo::si_addr"][::std::mem::offset_of!(__siginfo, si_addr) - 24usize];
    ["Offset of field: __siginfo::si_value"][::std::mem::offset_of!(__siginfo, si_value) - 32usize];
    ["Offset of field: __siginfo::si_band"][::std::mem::offset_of!(__siginfo, si_band) - 40usize];
    ["Offset of field: __siginfo::__pad"][::std::mem::offset_of!(__siginfo, __pad) - 48usize];
};
pub type siginfo_t = __siginfo;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __sigaction_u {
    pub __sa_handler: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
    pub __sa_sigaction: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: *mut __siginfo,
            arg3: *mut ::std::os::raw::c_void,
        ),
    >,
}
const _: () = {
    ["Size of __sigaction_u"][::std::mem::size_of::<__sigaction_u>() - 8usize];
    ["Alignment of __sigaction_u"][::std::mem::align_of::<__sigaction_u>() - 8usize];
    ["Offset of field: __sigaction_u::__sa_handler"]
        [::std::mem::offset_of!(__sigaction_u, __sa_handler) - 0usize];
    ["Offset of field: __sigaction_u::__sa_sigaction"]
        [::std::mem::offset_of!(__sigaction_u, __sa_sigaction) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __sigaction {
    pub __sigaction_u: __sigaction_u,
    pub sa_tramp: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: ::std::os::raw::c_int,
            arg3: ::std::os::raw::c_int,
            arg4: *mut siginfo_t,
            arg5: *mut ::std::os::raw::c_void,
        ),
    >,
    pub sa_mask: sigset_t,
    pub sa_flags: ::std::os::raw::c_int,
}
const _: () = {
    ["Size of __sigaction"][::std::mem::size_of::<__sigaction>() - 24usize];
    ["Alignment of __sigaction"][::std::mem::align_of::<__sigaction>() - 8usize];
    ["Offset of field: __sigaction::__sigaction_u"]
        [::std::mem::offset_of!(__sigaction, __sigaction_u) - 0usize];
    ["Offset of field: __sigaction::sa_tramp"]
        [::std::mem::offset_of!(__sigaction, sa_tramp) - 8usize];
    ["Offset of field: __sigaction::sa_mask"]
        [::std::mem::offset_of!(__sigaction, sa_mask) - 16usize];
    ["Offset of field: __sigaction::sa_flags"]
        [::std::mem::offset_of!(__sigaction, sa_flags) - 20usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sigaction {
    pub __sigaction_u: __sigaction_u,
    pub sa_mask: sigset_t,
    pub sa_flags: ::std::os::raw::c_int,
}
const _: () = {
    ["Size of sigaction"][::std::mem::size_of::<sigaction>() - 16usize];
    ["Alignment of sigaction"][::std::mem::align_of::<sigaction>() - 8usize];
    ["Offset of field: sigaction::__sigaction_u"]
        [::std::mem::offset_of!(sigaction, __sigaction_u) - 0usize];
    ["Offset of field: sigaction::sa_mask"][::std::mem::offset_of!(sigaction, sa_mask) - 8usize];
    ["Offset of field: sigaction::sa_flags"][::std::mem::offset_of!(sigaction, sa_flags) - 12usize];
};
pub type sig_t = ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigvec {
    pub sv_handler: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
    pub sv_mask: ::std::os::raw::c_int,
    pub sv_flags: ::std::os::raw::c_int,
}
const _: () = {
    ["Size of sigvec"][::std::mem::size_of::<sigvec>() - 16usize];
    ["Alignment of sigvec"][::std::mem::align_of::<sigvec>() - 8usize];
    ["Offset of field: sigvec::sv_handler"][::std::mem::offset_of!(sigvec, sv_handler) - 0usize];
    ["Offset of field: sigvec::sv_mask"][::std::mem::offset_of!(sigvec, sv_mask) - 8usize];
    ["Offset of field: sigvec::sv_flags"][::std::mem::offset_of!(sigvec, sv_flags) - 12usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigstack {
    pub ss_sp: *mut ::std::os::raw::c_char,
    pub ss_onstack: ::std::os::raw::c_int,
}
const _: () = {
    ["Size of sigstack"][::std::mem::size_of::<sigstack>() - 16usize];
    ["Alignment of sigstack"][::std::mem::align_of::<sigstack>() - 8usize];
    ["Offset of field: sigstack::ss_sp"][::std::mem::offset_of!(sigstack, ss_sp) - 0usize];
    ["Offset of field: sigstack::ss_onstack"]
        [::std::mem::offset_of!(sigstack, ss_onstack) - 8usize];
};
extern "C" {
    pub fn signal(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
    ) -> ::std::option::Option<
        unsafe extern "C" fn(
            arg1: ::std::os::raw::c_int,
            arg2: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
        ),
    >;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __darwin_time_t,
    pub tv_usec: __darwin_suseconds_t,
}
const _: () = {
    ["Size of timeval"][::std::mem::size_of::<timeval>() - 16usize];
    ["Alignment of timeval"][::std::mem::align_of::<timeval>() - 8usize];
    ["Offset of field: timeval::tv_sec"][::std::mem::offset_of!(timeval, tv_sec) - 0usize];
    ["Offset of field: timeval::tv_usec"][::std::mem::offset_of!(timeval, tv_usec) - 8usize];
};
pub type rlim_t = __uint64_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage {
    pub ru_utime: timeval,
    pub ru_stime: timeval,
    pub ru_maxrss: ::std::os::raw::c_long,
    pub ru_ixrss: ::std::os::raw::c_long,
    pub ru_idrss: ::std::os::raw::c_long,
    pub ru_isrss: ::std::os::raw::c_long,
    pub ru_minflt: ::std::os::raw::c_long,
    pub ru_majflt: ::std::os::raw::c_long,
    pub ru_nswap: ::std::os::raw::c_long,
    pub ru_inblock: ::std::os::raw::c_long,
    pub ru_oublock: ::std::os::raw::c_long,
    pub ru_msgsnd: ::std::os::raw::c_long,
    pub ru_msgrcv: ::std::os::raw::c_long,
    pub ru_nsignals: ::std::os::raw::c_long,
    pub ru_nvcsw: ::std::os::raw::c_long,
    pub ru_nivcsw: ::std::os::raw::c_long,
}
const _: () = {
    ["Size of rusage"][::std::mem::size_of::<rusage>() - 144usize];
    ["Alignment of rusage"][::std::mem::align_of::<rusage>() - 8usize];
    ["Offset of field: rusage::ru_utime"][::std::mem::offset_of!(rusage, ru_utime) - 0usize];
    ["Offset of field: rusage::ru_stime"][::std::mem::offset_of!(rusage, ru_stime) - 16usize];
    ["Offset of field: rusage::ru_maxrss"][::std::mem::offset_of!(rusage, ru_maxrss) - 32usize];
    ["Offset of field: rusage::ru_ixrss"][::std::mem::offset_of!(rusage, ru_ixrss) - 40usize];
    ["Offset of field: rusage::ru_idrss"][::std::mem::offset_of!(rusage, ru_idrss) - 48usize];
    ["Offset of field: rusage::ru_isrss"][::std::mem::offset_of!(rusage, ru_isrss) - 56usize];
    ["Offset of field: rusage::ru_minflt"][::std::mem::offset_of!(rusage, ru_minflt) - 64usize];
    ["Offset of field: rusage::ru_majflt"][::std::mem::offset_of!(rusage, ru_majflt) - 72usize];
    ["Offset of field: rusage::ru_nswap"][::std::mem::offset_of!(rusage, ru_nswap) - 80usize];
    ["Offset of field: rusage::ru_inblock"][::std::mem::offset_of!(rusage, ru_inblock) - 88usize];
    ["Offset of field: rusage::ru_oublock"][::std::mem::offset_of!(rusage, ru_oublock) - 96usize];
    ["Offset of field: rusage::ru_msgsnd"][::std::mem::offset_of!(rusage, ru_msgsnd) - 104usize];
    ["Offset of field: rusage::ru_msgrcv"][::std::mem::offset_of!(rusage, ru_msgrcv) - 112usize];
    ["Offset of field: rusage::ru_nsignals"]
        [::std::mem::offset_of!(rusage, ru_nsignals) - 120usize];
    ["Offset of field: rusage::ru_nvcsw"][::std::mem::offset_of!(rusage, ru_nvcsw) - 128usize];
    ["Offset of field: rusage::ru_nivcsw"][::std::mem::offset_of!(rusage, ru_nivcsw) - 136usize];
};
pub type rusage_info_t = *mut ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage_info_v0 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
}
const _: () = {
    ["Size of rusage_info_v0"][::std::mem::size_of::<rusage_info_v0>() - 96usize];
    ["Alignment of rusage_info_v0"][::std::mem::align_of::<rusage_info_v0>() - 8usize];
    ["Offset of field: rusage_info_v0::ri_uuid"]
        [::std::mem::offset_of!(rusage_info_v0, ri_uuid) - 0usize];
    ["Offset of field: rusage_info_v0::ri_user_time"]
        [::std::mem::offset_of!(rusage_info_v0, ri_user_time) - 16usize];
    ["Offset of field: rusage_info_v0::ri_system_time"]
        [::std::mem::offset_of!(rusage_info_v0, ri_system_time) - 24usize];
    ["Offset of field: rusage_info_v0::ri_pkg_idle_wkups"]
        [::std::mem::offset_of!(rusage_info_v0, ri_pkg_idle_wkups) - 32usize];
    ["Offset of field: rusage_info_v0::ri_interrupt_wkups"]
        [::std::mem::offset_of!(rusage_info_v0, ri_interrupt_wkups) - 40usize];
    ["Offset of field: rusage_info_v0::ri_pageins"]
        [::std::mem::offset_of!(rusage_info_v0, ri_pageins) - 48usize];
    ["Offset of field: rusage_info_v0::ri_wired_size"]
        [::std::mem::offset_of!(rusage_info_v0, ri_wired_size) - 56usize];
    ["Offset of field: rusage_info_v0::ri_resident_size"]
        [::std::mem::offset_of!(rusage_info_v0, ri_resident_size) - 64usize];
    ["Offset of field: rusage_info_v0::ri_phys_footprint"]
        [::std::mem::offset_of!(rusage_info_v0, ri_phys_footprint) - 72usize];
    ["Offset of field: rusage_info_v0::ri_proc_start_abstime"]
        [::std::mem::offset_of!(rusage_info_v0, ri_proc_start_abstime) - 80usize];
    ["Offset of field: rusage_info_v0::ri_proc_exit_abstime"]
        [::std::mem::offset_of!(rusage_info_v0, ri_proc_exit_abstime) - 88usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage_info_v1 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
}
const _: () = {
    ["Size of rusage_info_v1"][::std::mem::size_of::<rusage_info_v1>() - 144usize];
    ["Alignment of rusage_info_v1"][::std::mem::align_of::<rusage_info_v1>() - 8usize];
    ["Offset of field: rusage_info_v1::ri_uuid"]
        [::std::mem::offset_of!(rusage_info_v1, ri_uuid) - 0usize];
    ["Offset of field: rusage_info_v1::ri_user_time"]
        [::std::mem::offset_of!(rusage_info_v1, ri_user_time) - 16usize];
    ["Offset of field: rusage_info_v1::ri_system_time"]
        [::std::mem::offset_of!(rusage_info_v1, ri_system_time) - 24usize];
    ["Offset of field: rusage_info_v1::ri_pkg_idle_wkups"]
        [::std::mem::offset_of!(rusage_info_v1, ri_pkg_idle_wkups) - 32usize];
    ["Offset of field: rusage_info_v1::ri_interrupt_wkups"]
        [::std::mem::offset_of!(rusage_info_v1, ri_interrupt_wkups) - 40usize];
    ["Offset of field: rusage_info_v1::ri_pageins"]
        [::std::mem::offset_of!(rusage_info_v1, ri_pageins) - 48usize];
    ["Offset of field: rusage_info_v1::ri_wired_size"]
        [::std::mem::offset_of!(rusage_info_v1, ri_wired_size) - 56usize];
    ["Offset of field: rusage_info_v1::ri_resident_size"]
        [::std::mem::offset_of!(rusage_info_v1, ri_resident_size) - 64usize];
    ["Offset of field: rusage_info_v1::ri_phys_footprint"]
        [::std::mem::offset_of!(rusage_info_v1, ri_phys_footprint) - 72usize];
    ["Offset of field: rusage_info_v1::ri_proc_start_abstime"]
        [::std::mem::offset_of!(rusage_info_v1, ri_proc_start_abstime) - 80usize];
    ["Offset of field: rusage_info_v1::ri_proc_exit_abstime"]
        [::std::mem::offset_of!(rusage_info_v1, ri_proc_exit_abstime) - 88usize];
    ["Offset of field: rusage_info_v1::ri_child_user_time"]
        [::std::mem::offset_of!(rusage_info_v1, ri_child_user_time) - 96usize];
    ["Offset of field: rusage_info_v1::ri_child_system_time"]
        [::std::mem::offset_of!(rusage_info_v1, ri_child_system_time) - 104usize];
    ["Offset of field: rusage_info_v1::ri_child_pkg_idle_wkups"]
        [::std::mem::offset_of!(rusage_info_v1, ri_child_pkg_idle_wkups) - 112usize];
    ["Offset of field: rusage_info_v1::ri_child_interrupt_wkups"]
        [::std::mem::offset_of!(rusage_info_v1, ri_child_interrupt_wkups) - 120usize];
    ["Offset of field: rusage_info_v1::ri_child_pageins"]
        [::std::mem::offset_of!(rusage_info_v1, ri_child_pageins) - 128usize];
    ["Offset of field: rusage_info_v1::ri_child_elapsed_abstime"]
        [::std::mem::offset_of!(rusage_info_v1, ri_child_elapsed_abstime) - 136usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage_info_v2 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
    pub ri_diskio_bytesread: u64,
    pub ri_diskio_byteswritten: u64,
}
const _: () = {
    ["Size of rusage_info_v2"][::std::mem::size_of::<rusage_info_v2>() - 160usize];
    ["Alignment of rusage_info_v2"][::std::mem::align_of::<rusage_info_v2>() - 8usize];
    ["Offset of field: rusage_info_v2::ri_uuid"]
        [::std::mem::offset_of!(rusage_info_v2, ri_uuid) - 0usize];
    ["Offset of field: rusage_info_v2::ri_user_time"]
        [::std::mem::offset_of!(rusage_info_v2, ri_user_time) - 16usize];
    ["Offset of field: rusage_info_v2::ri_system_time"]
        [::std::mem::offset_of!(rusage_info_v2, ri_system_time) - 24usize];
    ["Offset of field: rusage_info_v2::ri_pkg_idle_wkups"]
        [::std::mem::offset_of!(rusage_info_v2, ri_pkg_idle_wkups) - 32usize];
    ["Offset of field: rusage_info_v2::ri_interrupt_wkups"]
        [::std::mem::offset_of!(rusage_info_v2, ri_interrupt_wkups) - 40usize];
    ["Offset of field: rusage_info_v2::ri_pageins"]
        [::std::mem::offset_of!(rusage_info_v2, ri_pageins) - 48usize];
    ["Offset of field: rusage_info_v2::ri_wired_size"]
        [::std::mem::offset_of!(rusage_info_v2, ri_wired_size) - 56usize];
    ["Offset of field: rusage_info_v2::ri_resident_size"]
        [::std::mem::offset_of!(rusage_info_v2, ri_resident_size) - 64usize];
    ["Offset of field: rusage_info_v2::ri_phys_footprint"]
        [::std::mem::offset_of!(rusage_info_v2, ri_phys_footprint) - 72usize];
    ["Offset of field: rusage_info_v2::ri_proc_start_abstime"]
        [::std::mem::offset_of!(rusage_info_v2, ri_proc_start_abstime) - 80usize];
    ["Offset of field: rusage_info_v2::ri_proc_exit_abstime"]
        [::std::mem::offset_of!(rusage_info_v2, ri_proc_exit_abstime) - 88usize];
    ["Offset of field: rusage_info_v2::ri_child_user_time"]
        [::std::mem::offset_of!(rusage_info_v2, ri_child_user_time) - 96usize];
    ["Offset of field: rusage_info_v2::ri_child_system_time"]
        [::std::mem::offset_of!(rusage_info_v2, ri_child_system_time) - 104usize];
    ["Offset of field: rusage_info_v2::ri_child_pkg_idle_wkups"]
        [::std::mem::offset_of!(rusage_info_v2, ri_child_pkg_idle_wkups) - 112usize];
    ["Offset of field: rusage_info_v2::ri_child_interrupt_wkups"]
        [::std::mem::offset_of!(rusage_info_v2, ri_child_interrupt_wkups) - 120usize];
    ["Offset of field: rusage_info_v2::ri_child_pageins"]
        [::std::mem::offset_of!(rusage_info_v2, ri_child_pageins) - 128usize];
    ["Offset of field: rusage_info_v2::ri_child_elapsed_abstime"]
        [::std::mem::offset_of!(rusage_info_v2, ri_child_elapsed_abstime) - 136usize];
    ["Offset of field: rusage_info_v2::ri_diskio_bytesread"]
        [::std::mem::offset_of!(rusage_info_v2, ri_diskio_bytesread) - 144usize];
    ["Offset of field: rusage_info_v2::ri_diskio_byteswritten"]
        [::std::mem::offset_of!(rusage_info_v2, ri_diskio_byteswritten) - 152usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage_info_v3 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
    pub ri_diskio_bytesread: u64,
    pub ri_diskio_byteswritten: u64,
    pub ri_cpu_time_qos_default: u64,
    pub ri_cpu_time_qos_maintenance: u64,
    pub ri_cpu_time_qos_background: u64,
    pub ri_cpu_time_qos_utility: u64,
    pub ri_cpu_time_qos_legacy: u64,
    pub ri_cpu_time_qos_user_initiated: u64,
    pub ri_cpu_time_qos_user_interactive: u64,
    pub ri_billed_system_time: u64,
    pub ri_serviced_system_time: u64,
}
const _: () = {
    ["Size of rusage_info_v3"][::std::mem::size_of::<rusage_info_v3>() - 232usize];
    ["Alignment of rusage_info_v3"][::std::mem::align_of::<rusage_info_v3>() - 8usize];
    ["Offset of field: rusage_info_v3::ri_uuid"]
        [::std::mem::offset_of!(rusage_info_v3, ri_uuid) - 0usize];
    ["Offset of field: rusage_info_v3::ri_user_time"]
        [::std::mem::offset_of!(rusage_info_v3, ri_user_time) - 16usize];
    ["Offset of field: rusage_info_v3::ri_system_time"]
        [::std::mem::offset_of!(rusage_info_v3, ri_system_time) - 24usize];
    ["Offset of field: rusage_info_v3::ri_pkg_idle_wkups"]
        [::std::mem::offset_of!(rusage_info_v3, ri_pkg_idle_wkups) - 32usize];
    ["Offset of field: rusage_info_v3::ri_interrupt_wkups"]
        [::std::mem::offset_of!(rusage_info_v3, ri_interrupt_wkups) - 40usize];
    ["Offset of field: rusage_info_v3::ri_pageins"]
        [::std::mem::offset_of!(rusage_info_v3, ri_pageins) - 48usize];
    ["Offset of field: rusage_info_v3::ri_wired_size"]
        [::std::mem::offset_of!(rusage_info_v3, ri_wired_size) - 56usize];
    ["Offset of field: rusage_info_v3::ri_resident_size"]
        [::std::mem::offset_of!(rusage_info_v3, ri_resident_size) - 64usize];
    ["Offset of field: rusage_info_v3::ri_phys_footprint"]
        [::std::mem::offset_of!(rusage_info_v3, ri_phys_footprint) - 72usize];
    ["Offset of field: rusage_info_v3::ri_proc_start_abstime"]
        [::std::mem::offset_of!(rusage_info_v3, ri_proc_start_abstime) - 80usize];
    ["Offset of field: rusage_info_v3::ri_proc_exit_abstime"]
        [::std::mem::offset_of!(rusage_info_v3, ri_proc_exit_abstime) - 88usize];
    ["Offset of field: rusage_info_v3::ri_child_user_time"]
        [::std::mem::offset_of!(rusage_info_v3, ri_child_user_time) - 96usize];
    ["Offset of field: rusage_info_v3::ri_child_system_time"]
        [::std::mem::offset_of!(rusage_info_v3, ri_child_system_time) - 104usize];
    ["Offset of field: rusage_info_v3::ri_child_pkg_idle_wkups"]
        [::std::mem::offset_of!(rusage_info_v3, ri_child_pkg_idle_wkups) - 112usize];
    ["Offset of field: rusage_info_v3::ri_child_interrupt_wkups"]
        [::std::mem::offset_of!(rusage_info_v3, ri_child_interrupt_wkups) - 120usize];
    ["Offset of field: rusage_info_v3::ri_child_pageins"]
        [::std::mem::offset_of!(rusage_info_v3, ri_child_pageins) - 128usize];
    ["Offset of field: rusage_info_v3::ri_child_elapsed_abstime"]
        [::std::mem::offset_of!(rusage_info_v3, ri_child_elapsed_abstime) - 136usize];
    ["Offset of field: rusage_info_v3::ri_diskio_bytesread"]
        [::std::mem::offset_of!(rusage_info_v3, ri_diskio_bytesread) - 144usize];
    ["Offset of field: rusage_info_v3::ri_diskio_byteswritten"]
        [::std::mem::offset_of!(rusage_info_v3, ri_diskio_byteswritten) - 152usize];
    ["Offset of field: rusage_info_v3::ri_cpu_time_qos_default"]
        [::std::mem::offset_of!(rusage_info_v3, ri_cpu_time_qos_default) - 160usize];
    ["Offset of field: rusage_info_v3::ri_cpu_time_qos_maintenance"]
        [::std::mem::offset_of!(rusage_info_v3, ri_cpu_time_qos_maintenance) - 168usize];
    ["Offset of field: rusage_info_v3::ri_cpu_time_qos_background"]
        [::std::mem::offset_of!(rusage_info_v3, ri_cpu_time_qos_background) - 176usize];
    ["Offset of field: rusage_info_v3::ri_cpu_time_qos_utility"]
        [::std::mem::offset_of!(rusage_info_v3, ri_cpu_time_qos_utility) - 184usize];
    ["Offset of field: rusage_info_v3::ri_cpu_time_qos_legacy"]
        [::std::mem::offset_of!(rusage_info_v3, ri_cpu_time_qos_legacy) - 192usize];
    ["Offset of field: rusage_info_v3::ri_cpu_time_qos_user_initiated"]
        [::std::mem::offset_of!(rusage_info_v3, ri_cpu_time_qos_user_initiated) - 200usize];
    ["Offset of field: rusage_info_v3::ri_cpu_time_qos_user_interactive"]
        [::std::mem::offset_of!(rusage_info_v3, ri_cpu_time_qos_user_interactive) - 208usize];
    ["Offset of field: rusage_info_v3::ri_billed_system_time"]
        [::std::mem::offset_of!(rusage_info_v3, ri_billed_system_time) - 216usize];
    ["Offset of field: rusage_info_v3::ri_serviced_system_time"]
        [::std::mem::offset_of!(rusage_info_v3, ri_serviced_system_time) - 224usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage_info_v4 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
    pub ri_diskio_bytesread: u64,
    pub ri_diskio_byteswritten: u64,
    pub ri_cpu_time_qos_default: u64,
    pub ri_cpu_time_qos_maintenance: u64,
    pub ri_cpu_time_qos_background: u64,
    pub ri_cpu_time_qos_utility: u64,
    pub ri_cpu_time_qos_legacy: u64,
    pub ri_cpu_time_qos_user_initiated: u64,
    pub ri_cpu_time_qos_user_interactive: u64,
    pub ri_billed_system_time: u64,
    pub ri_serviced_system_time: u64,
    pub ri_logical_writes: u64,
    pub ri_lifetime_max_phys_footprint: u64,
    pub ri_instructions: u64,
    pub ri_cycles: u64,
    pub ri_billed_energy: u64,
    pub ri_serviced_energy: u64,
    pub ri_interval_max_phys_footprint: u64,
    pub ri_runnable_time: u64,
}
const _: () = {
    ["Size of rusage_info_v4"][::std::mem::size_of::<rusage_info_v4>() - 296usize];
    ["Alignment of rusage_info_v4"][::std::mem::align_of::<rusage_info_v4>() - 8usize];
    ["Offset of field: rusage_info_v4::ri_uuid"]
        [::std::mem::offset_of!(rusage_info_v4, ri_uuid) - 0usize];
    ["Offset of field: rusage_info_v4::ri_user_time"]
        [::std::mem::offset_of!(rusage_info_v4, ri_user_time) - 16usize];
    ["Offset of field: rusage_info_v4::ri_system_time"]
        [::std::mem::offset_of!(rusage_info_v4, ri_system_time) - 24usize];
    ["Offset of field: rusage_info_v4::ri_pkg_idle_wkups"]
        [::std::mem::offset_of!(rusage_info_v4, ri_pkg_idle_wkups) - 32usize];
    ["Offset of field: rusage_info_v4::ri_interrupt_wkups"]
        [::std::mem::offset_of!(rusage_info_v4, ri_interrupt_wkups) - 40usize];
    ["Offset of field: rusage_info_v4::ri_pageins"]
        [::std::mem::offset_of!(rusage_info_v4, ri_pageins) - 48usize];
    ["Offset of field: rusage_info_v4::ri_wired_size"]
        [::std::mem::offset_of!(rusage_info_v4, ri_wired_size) - 56usize];
    ["Offset of field: rusage_info_v4::ri_resident_size"]
        [::std::mem::offset_of!(rusage_info_v4, ri_resident_size) - 64usize];
    ["Offset of field: rusage_info_v4::ri_phys_footprint"]
        [::std::mem::offset_of!(rusage_info_v4, ri_phys_footprint) - 72usize];
    ["Offset of field: rusage_info_v4::ri_proc_start_abstime"]
        [::std::mem::offset_of!(rusage_info_v4, ri_proc_start_abstime) - 80usize];
    ["Offset of field: rusage_info_v4::ri_proc_exit_abstime"]
        [::std::mem::offset_of!(rusage_info_v4, ri_proc_exit_abstime) - 88usize];
    ["Offset of field: rusage_info_v4::ri_child_user_time"]
        [::std::mem::offset_of!(rusage_info_v4, ri_child_user_time) - 96usize];
    ["Offset of field: rusage_info_v4::ri_child_system_time"]
        [::std::mem::offset_of!(rusage_info_v4, ri_child_system_time) - 104usize];
    ["Offset of field: rusage_info_v4::ri_child_pkg_idle_wkups"]
        [::std::mem::offset_of!(rusage_info_v4, ri_child_pkg_idle_wkups) - 112usize];
    ["Offset of field: rusage_info_v4::ri_child_interrupt_wkups"]
        [::std::mem::offset_of!(rusage_info_v4, ri_child_interrupt_wkups) - 120usize];
    ["Offset of field: rusage_info_v4::ri_child_pageins"]
        [::std::mem::offset_of!(rusage_info_v4, ri_child_pageins) - 128usize];
    ["Offset of field: rusage_info_v4::ri_child_elapsed_abstime"]
        [::std::mem::offset_of!(rusage_info_v4, ri_child_elapsed_abstime) - 136usize];
    ["Offset of field: rusage_info_v4::ri_diskio_bytesread"]
        [::std::mem::offset_of!(rusage_info_v4, ri_diskio_bytesread) - 144usize];
    ["Offset of field: rusage_info_v4::ri_diskio_byteswritten"]
        [::std::mem::offset_of!(rusage_info_v4, ri_diskio_byteswritten) - 152usize];
    ["Offset of field: rusage_info_v4::ri_cpu_time_qos_default"]
        [::std::mem::offset_of!(rusage_info_v4, ri_cpu_time_qos_default) - 160usize];
    ["Offset of field: rusage_info_v4::ri_cpu_time_qos_maintenance"]
        [::std::mem::offset_of!(rusage_info_v4, ri_cpu_time_qos_maintenance) - 168usize];
    ["Offset of field: rusage_info_v4::ri_cpu_time_qos_background"]
        [::std::mem::offset_of!(rusage_info_v4, ri_cpu_time_qos_background) - 176usize];
    ["Offset of field: rusage_info_v4::ri_cpu_time_qos_utility"]
        [::std::mem::offset_of!(rusage_info_v4, ri_cpu_time_qos_utility) - 184usize];
    ["Offset of field: rusage_info_v4::ri_cpu_time_qos_legacy"]
        [::std::mem::offset_of!(rusage_info_v4, ri_cpu_time_qos_legacy) - 192usize];
    ["Offset of field: rusage_info_v4::ri_cpu_time_qos_user_initiated"]
        [::std::mem::offset_of!(rusage_info_v4, ri_cpu_time_qos_user_initiated) - 200usize];
    ["Offset of field: rusage_info_v4::ri_cpu_time_qos_user_interactive"]
        [::std::mem::offset_of!(rusage_info_v4, ri_cpu_time_qos_user_interactive) - 208usize];
    ["Offset of field: rusage_info_v4::ri_billed_system_time"]
        [::std::mem::offset_of!(rusage_info_v4, ri_billed_system_time) - 216usize];
    ["Offset of field: rusage_info_v4::ri_serviced_system_time"]
        [::std::mem::offset_of!(rusage_info_v4, ri_serviced_system_time) - 224usize];
    ["Offset of field: rusage_info_v4::ri_logical_writes"]
        [::std::mem::offset_of!(rusage_info_v4, ri_logical_writes) - 232usize];
    ["Offset of field: rusage_info_v4::ri_lifetime_max_phys_footprint"]
        [::std::mem::offset_of!(rusage_info_v4, ri_lifetime_max_phys_footprint) - 240usize];
    ["Offset of field: rusage_info_v4::ri_instructions"]
        [::std::mem::offset_of!(rusage_info_v4, ri_instructions) - 248usize];
    ["Offset of field: rusage_info_v4::ri_cycles"]
        [::std::mem::offset_of!(rusage_info_v4, ri_cycles) - 256usize];
    ["Offset of field: rusage_info_v4::ri_billed_energy"]
        [::std::mem::offset_of!(rusage_info_v4, ri_billed_energy) - 264usize];
    ["Offset of field: rusage_info_v4::ri_serviced_energy"]
        [::std::mem::offset_of!(rusage_info_v4, ri_serviced_energy) - 272usize];
    ["Offset of field: rusage_info_v4::ri_interval_max_phys_footprint"]
        [::std::mem::offset_of!(rusage_info_v4, ri_interval_max_phys_footprint) - 280usize];
    ["Offset of field: rusage_info_v4::ri_runnable_time"]
        [::std::mem::offset_of!(rusage_info_v4, ri_runnable_time) - 288usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage_info_v5 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
    pub ri_diskio_bytesread: u64,
    pub ri_diskio_byteswritten: u64,
    pub ri_cpu_time_qos_default: u64,
    pub ri_cpu_time_qos_maintenance: u64,
    pub ri_cpu_time_qos_background: u64,
    pub ri_cpu_time_qos_utility: u64,
    pub ri_cpu_time_qos_legacy: u64,
    pub ri_cpu_time_qos_user_initiated: u64,
    pub ri_cpu_time_qos_user_interactive: u64,
    pub ri_billed_system_time: u64,
    pub ri_serviced_system_time: u64,
    pub ri_logical_writes: u64,
    pub ri_lifetime_max_phys_footprint: u64,
    pub ri_instructions: u64,
    pub ri_cycles: u64,
    pub ri_billed_energy: u64,
    pub ri_serviced_energy: u64,
    pub ri_interval_max_phys_footprint: u64,
    pub ri_runnable_time: u64,
    pub ri_flags: u64,
}
const _: () = {
    ["Size of rusage_info_v5"][::std::mem::size_of::<rusage_info_v5>() - 304usize];
    ["Alignment of rusage_info_v5"][::std::mem::align_of::<rusage_info_v5>() - 8usize];
    ["Offset of field: rusage_info_v5::ri_uuid"]
        [::std::mem::offset_of!(rusage_info_v5, ri_uuid) - 0usize];
    ["Offset of field: rusage_info_v5::ri_user_time"]
        [::std::mem::offset_of!(rusage_info_v5, ri_user_time) - 16usize];
    ["Offset of field: rusage_info_v5::ri_system_time"]
        [::std::mem::offset_of!(rusage_info_v5, ri_system_time) - 24usize];
    ["Offset of field: rusage_info_v5::ri_pkg_idle_wkups"]
        [::std::mem::offset_of!(rusage_info_v5, ri_pkg_idle_wkups) - 32usize];
    ["Offset of field: rusage_info_v5::ri_interrupt_wkups"]
        [::std::mem::offset_of!(rusage_info_v5, ri_interrupt_wkups) - 40usize];
    ["Offset of field: rusage_info_v5::ri_pageins"]
        [::std::mem::offset_of!(rusage_info_v5, ri_pageins) - 48usize];
    ["Offset of field: rusage_info_v5::ri_wired_size"]
        [::std::mem::offset_of!(rusage_info_v5, ri_wired_size) - 56usize];
    ["Offset of field: rusage_info_v5::ri_resident_size"]
        [::std::mem::offset_of!(rusage_info_v5, ri_resident_size) - 64usize];
    ["Offset of field: rusage_info_v5::ri_phys_footprint"]
        [::std::mem::offset_of!(rusage_info_v5, ri_phys_footprint) - 72usize];
    ["Offset of field: rusage_info_v5::ri_proc_start_abstime"]
        [::std::mem::offset_of!(rusage_info_v5, ri_proc_start_abstime) - 80usize];
    ["Offset of field: rusage_info_v5::ri_proc_exit_abstime"]
        [::std::mem::offset_of!(rusage_info_v5, ri_proc_exit_abstime) - 88usize];
    ["Offset of field: rusage_info_v5::ri_child_user_time"]
        [::std::mem::offset_of!(rusage_info_v5, ri_child_user_time) - 96usize];
    ["Offset of field: rusage_info_v5::ri_child_system_time"]
        [::std::mem::offset_of!(rusage_info_v5, ri_child_system_time) - 104usize];
    ["Offset of field: rusage_info_v5::ri_child_pkg_idle_wkups"]
        [::std::mem::offset_of!(rusage_info_v5, ri_child_pkg_idle_wkups) - 112usize];
    ["Offset of field: rusage_info_v5::ri_child_interrupt_wkups"]
        [::std::mem::offset_of!(rusage_info_v5, ri_child_interrupt_wkups) - 120usize];
    ["Offset of field: rusage_info_v5::ri_child_pageins"]
        [::std::mem::offset_of!(rusage_info_v5, ri_child_pageins) - 128usize];
    ["Offset of field: rusage_info_v5::ri_child_elapsed_abstime"]
        [::std::mem::offset_of!(rusage_info_v5, ri_child_elapsed_abstime) - 136usize];
    ["Offset of field: rusage_info_v5::ri_diskio_bytesread"]
        [::std::mem::offset_of!(rusage_info_v5, ri_diskio_bytesread) - 144usize];
    ["Offset of field: rusage_info_v5::ri_diskio_byteswritten"]
        [::std::mem::offset_of!(rusage_info_v5, ri_diskio_byteswritten) - 152usize];
    ["Offset of field: rusage_info_v5::ri_cpu_time_qos_default"]
        [::std::mem::offset_of!(rusage_info_v5, ri_cpu_time_qos_default) - 160usize];
    ["Offset of field: rusage_info_v5::ri_cpu_time_qos_maintenance"]
        [::std::mem::offset_of!(rusage_info_v5, ri_cpu_time_qos_maintenance) - 168usize];
    ["Offset of field: rusage_info_v5::ri_cpu_time_qos_background"]
        [::std::mem::offset_of!(rusage_info_v5, ri_cpu_time_qos_background) - 176usize];
    ["Offset of field: rusage_info_v5::ri_cpu_time_qos_utility"]
        [::std::mem::offset_of!(rusage_info_v5, ri_cpu_time_qos_utility) - 184usize];
    ["Offset of field: rusage_info_v5::ri_cpu_time_qos_legacy"]
        [::std::mem::offset_of!(rusage_info_v5, ri_cpu_time_qos_legacy) - 192usize];
    ["Offset of field: rusage_info_v5::ri_cpu_time_qos_user_initiated"]
        [::std::mem::offset_of!(rusage_info_v5, ri_cpu_time_qos_user_initiated) - 200usize];
    ["Offset of field: rusage_info_v5::ri_cpu_time_qos_user_interactive"]
        [::std::mem::offset_of!(rusage_info_v5, ri_cpu_time_qos_user_interactive) - 208usize];
    ["Offset of field: rusage_info_v5::ri_billed_system_time"]
        [::std::mem::offset_of!(rusage_info_v5, ri_billed_system_time) - 216usize];
    ["Offset of field: rusage_info_v5::ri_serviced_system_time"]
        [::std::mem::offset_of!(rusage_info_v5, ri_serviced_system_time) - 224usize];
    ["Offset of field: rusage_info_v5::ri_logical_writes"]
        [::std::mem::offset_of!(rusage_info_v5, ri_logical_writes) - 232usize];
    ["Offset of field: rusage_info_v5::ri_lifetime_max_phys_footprint"]
        [::std::mem::offset_of!(rusage_info_v5, ri_lifetime_max_phys_footprint) - 240usize];
    ["Offset of field: rusage_info_v5::ri_instructions"]
        [::std::mem::offset_of!(rusage_info_v5, ri_instructions) - 248usize];
    ["Offset of field: rusage_info_v5::ri_cycles"]
        [::std::mem::offset_of!(rusage_info_v5, ri_cycles) - 256usize];
    ["Offset of field: rusage_info_v5::ri_billed_energy"]
        [::std::mem::offset_of!(rusage_info_v5, ri_billed_energy) - 264usize];
    ["Offset of field: rusage_info_v5::ri_serviced_energy"]
        [::std::mem::offset_of!(rusage_info_v5, ri_serviced_energy) - 272usize];
    ["Offset of field: rusage_info_v5::ri_interval_max_phys_footprint"]
        [::std::mem::offset_of!(rusage_info_v5, ri_interval_max_phys_footprint) - 280usize];
    ["Offset of field: rusage_info_v5::ri_runnable_time"]
        [::std::mem::offset_of!(rusage_info_v5, ri_runnable_time) - 288usize];
    ["Offset of field: rusage_info_v5::ri_flags"]
        [::std::mem::offset_of!(rusage_info_v5, ri_flags) - 296usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rusage_info_v6 {
    pub ri_uuid: [u8; 16usize],
    pub ri_user_time: u64,
    pub ri_system_time: u64,
    pub ri_pkg_idle_wkups: u64,
    pub ri_interrupt_wkups: u64,
    pub ri_pageins: u64,
    pub ri_wired_size: u64,
    pub ri_resident_size: u64,
    pub ri_phys_footprint: u64,
    pub ri_proc_start_abstime: u64,
    pub ri_proc_exit_abstime: u64,
    pub ri_child_user_time: u64,
    pub ri_child_system_time: u64,
    pub ri_child_pkg_idle_wkups: u64,
    pub ri_child_interrupt_wkups: u64,
    pub ri_child_pageins: u64,
    pub ri_child_elapsed_abstime: u64,
    pub ri_diskio_bytesread: u64,
    pub ri_diskio_byteswritten: u64,
    pub ri_cpu_time_qos_default: u64,
    pub ri_cpu_time_qos_maintenance: u64,
    pub ri_cpu_time_qos_background: u64,
    pub ri_cpu_time_qos_utility: u64,
    pub ri_cpu_time_qos_legacy: u64,
    pub ri_cpu_time_qos_user_initiated: u64,
    pub ri_cpu_time_qos_user_interactive: u64,
    pub ri_billed_system_time: u64,
    pub ri_serviced_system_time: u64,
    pub ri_logical_writes: u64,
    pub ri_lifetime_max_phys_footprint: u64,
    pub ri_instructions: u64,
    pub ri_cycles: u64,
    pub ri_billed_energy: u64,
    pub ri_serviced_energy: u64,
    pub ri_interval_max_phys_footprint: u64,
    pub ri_runnable_time: u64,
    pub ri_flags: u64,
    pub ri_user_ptime: u64,
    pub ri_system_ptime: u64,
    pub ri_pinstructions: u64,
    pub ri_pcycles: u64,
    pub ri_energy_nj: u64,
    pub ri_penergy_nj: u64,
    pub ri_secure_time_in_system: u64,
    pub ri_secure_ptime_in_system: u64,
    pub ri_reserved: [u64; 12usize],
}
const _: () = {
    ["Size of rusage_info_v6"][::std::mem::size_of::<rusage_info_v6>() - 464usize];
    ["Alignment of rusage_info_v6"][::std::mem::align_of::<rusage_info_v6>() - 8usize];
    ["Offset of field: rusage_info_v6::ri_uuid"]
        [::std::mem::offset_of!(rusage_info_v6, ri_uuid) - 0usize];
    ["Offset of field: rusage_info_v6::ri_user_time"]
        [::std::mem::offset_of!(rusage_info_v6, ri_user_time) - 16usize];
    ["Offset of field: rusage_info_v6::ri_system_time"]
        [::std::mem::offset_of!(rusage_info_v6, ri_system_time) - 24usize];
    ["Offset of field: rusage_info_v6::ri_pkg_idle_wkups"]
        [::std::mem::offset_of!(rusage_info_v6, ri_pkg_idle_wkups) - 32usize];
    ["Offset of field: rusage_info_v6::ri_interrupt_wkups"]
        [::std::mem::offset_of!(rusage_info_v6, ri_interrupt_wkups) - 40usize];
    ["Offset of field: rusage_info_v6::ri_pageins"]
        [::std::mem::offset_of!(rusage_info_v6, ri_pageins) - 48usize];
    ["Offset of field: rusage_info_v6::ri_wired_size"]
        [::std::mem::offset_of!(rusage_info_v6, ri_wired_size) - 56usize];
    ["Offset of field: rusage_info_v6::ri_resident_size"]
        [::std::mem::offset_of!(rusage_info_v6, ri_resident_size) - 64usize];
    ["Offset of field: rusage_info_v6::ri_phys_footprint"]
        [::std::mem::offset_of!(rusage_info_v6, ri_phys_footprint) - 72usize];
    ["Offset of field: rusage_info_v6::ri_proc_start_abstime"]
        [::std::mem::offset_of!(rusage_info_v6, ri_proc_start_abstime) - 80usize];
    ["Offset of field: rusage_info_v6::ri_proc_exit_abstime"]
        [::std::mem::offset_of!(rusage_info_v6, ri_proc_exit_abstime) - 88usize];
    ["Offset of field: rusage_info_v6::ri_child_user_time"]
        [::std::mem::offset_of!(rusage_info_v6, ri_child_user_time) - 96usize];
    ["Offset of field: rusage_info_v6::ri_child_system_time"]
        [::std::mem::offset_of!(rusage_info_v6, ri_child_system_time) - 104usize];
    ["Offset of field: rusage_info_v6::ri_child_pkg_idle_wkups"]
        [::std::mem::offset_of!(rusage_info_v6, ri_child_pkg_idle_wkups) - 112usize];
    ["Offset of field: rusage_info_v6::ri_child_interrupt_wkups"]
        [::std::mem::offset_of!(rusage_info_v6, ri_child_interrupt_wkups) - 120usize];
    ["Offset of field: rusage_info_v6::ri_child_pageins"]
        [::std::mem::offset_of!(rusage_info_v6, ri_child_pageins) - 128usize];
    ["Offset of field: rusage_info_v6::ri_child_elapsed_abstime"]
        [::std::mem::offset_of!(rusage_info_v6, ri_child_elapsed_abstime) - 136usize];
    ["Offset of field: rusage_info_v6::ri_diskio_bytesread"]
        [::std::mem::offset_of!(rusage_info_v6, ri_diskio_bytesread) - 144usize];
    ["Offset of field: rusage_info_v6::ri_diskio_byteswritten"]
        [::std::mem::offset_of!(rusage_info_v6, ri_diskio_byteswritten) - 152usize];
    ["Offset of field: rusage_info_v6::ri_cpu_time_qos_default"]
        [::std::mem::offset_of!(rusage_info_v6, ri_cpu_time_qos_default) - 160usize];
    ["Offset of field: rusage_info_v6::ri_cpu_time_qos_maintenance"]
        [::std::mem::offset_of!(rusage_info_v6, ri_cpu_time_qos_maintenance) - 168usize];
    ["Offset of field: rusage_info_v6::ri_cpu_time_qos_background"]
        [::std::mem::offset_of!(rusage_info_v6, ri_cpu_time_qos_background) - 176usize];
    ["Offset of field: rusage_info_v6::ri_cpu_time_qos_utility"]
        [::std::mem::offset_of!(rusage_info_v6, ri_cpu_time_qos_utility) - 184usize];
    ["Offset of field: rusage_info_v6::ri_cpu_time_qos_legacy"]
        [::std::mem::offset_of!(rusage_info_v6, ri_cpu_time_qos_legacy) - 192usize];
    ["Offset of field: rusage_info_v6::ri_cpu_time_qos_user_initiated"]
        [::std::mem::offset_of!(rusage_info_v6, ri_cpu_time_qos_user_initiated) - 200usize];
    ["Offset of field: rusage_info_v6::ri_cpu_time_qos_user_interactive"]
        [::std::mem::offset_of!(rusage_info_v6, ri_cpu_time_qos_user_interactive) - 208usize];
    ["Offset of field: rusage_info_v6::ri_billed_system_time"]
        [::std::mem::offset_of!(rusage_info_v6, ri_billed_system_time) - 216usize];
    ["Offset of field: rusage_info_v6::ri_serviced_system_time"]
        [::std::mem::offset_of!(rusage_info_v6, ri_serviced_system_time) - 224usize];
    ["Offset of field: rusage_info_v6::ri_logical_writes"]
        [::std::mem::offset_of!(rusage_info_v6, ri_logical_writes) - 232usize];
    ["Offset of field: rusage_info_v6::ri_lifetime_max_phys_footprint"]
        [::std::mem::offset_of!(rusage_info_v6, ri_lifetime_max_phys_footprint) - 240usize];
    ["Offset of field: rusage_info_v6::ri_instructions"]
        [::std::mem::offset_of!(rusage_info_v6, ri_instructions) - 248usize];
    ["Offset of field: rusage_info_v6::ri_cycles"]
        [::std::mem::offset_of!(rusage_info_v6, ri_cycles) - 256usize];
    ["Offset of field: rusage_info_v6::ri_billed_energy"]
        [::std::mem::offset_of!(rusage_info_v6, ri_billed_energy) - 264usize];
    ["Offset of field: rusage_info_v6::ri_serviced_energy"]
        [::std::mem::offset_of!(rusage_info_v6, ri_serviced_energy) - 272usize];
    ["Offset of field: rusage_info_v6::ri_interval_max_phys_footprint"]
        [::std::mem::offset_of!(rusage_info_v6, ri_interval_max_phys_footprint) - 280usize];
    ["Offset of field: rusage_info_v6::ri_runnable_time"]
        [::std::mem::offset_of!(rusage_info_v6, ri_runnable_time) - 288usize];
    ["Offset of field: rusage_info_v6::ri_flags"]
        [::std::mem::offset_of!(rusage_info_v6, ri_flags) - 296usize];
    ["Offset of field: rusage_info_v6::ri_user_ptime"]
        [::std::mem::offset_of!(rusage_info_v6, ri_user_ptime) - 304usize];
    ["Offset of field: rusage_info_v6::ri_system_ptime"]
        [::std::mem::offset_of!(rusage_info_v6, ri_system_ptime) - 312usize];
    ["Offset of field: rusage_info_v6::ri_pinstructions"]
        [::std::mem::offset_of!(rusage_info_v6, ri_pinstructions) - 320usize];
    ["Offset of field: rusage_info_v6::ri_pcycles"]
        [::std::mem::offset_of!(rusage_info_v6, ri_pcycles) - 328usize];
    ["Offset of field: rusage_info_v6::ri_energy_nj"]
        [::std::mem::offset_of!(rusage_info_v6, ri_energy_nj) - 336usize];
    ["Offset of field: rusage_info_v6::ri_penergy_nj"]
        [::std::mem::offset_of!(rusage_info_v6, ri_penergy_nj) - 344usize];
    ["Offset of field: rusage_info_v6::ri_secure_time_in_system"]
        [::std::mem::offset_of!(rusage_info_v6, ri_secure_time_in_system) - 352usize];
    ["Offset of field: rusage_info_v6::ri_secure_ptime_in_system"]
        [::std::mem::offset_of!(rusage_info_v6, ri_secure_ptime_in_system) - 360usize];
    ["Offset of field: rusage_info_v6::ri_reserved"]
        [::std::mem::offset_of!(rusage_info_v6, ri_reserved) - 368usize];
};
pub type rusage_info_current = rusage_info_v6;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rlimit {
    pub rlim_cur: rlim_t,
    pub rlim_max: rlim_t,
}
const _: () = {
    ["Size of rlimit"][::std::mem::size_of::<rlimit>() - 16usize];
    ["Alignment of rlimit"][::std::mem::align_of::<rlimit>() - 8usize];
    ["Offset of field: rlimit::rlim_cur"][::std::mem::offset_of!(rlimit, rlim_cur) - 0usize];
    ["Offset of field: rlimit::rlim_max"][::std::mem::offset_of!(rlimit, rlim_max) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct proc_rlimit_control_wakeupmon {
    pub wm_flags: u32,
    pub wm_rate: i32,
}
const _: () = {
    ["Size of proc_rlimit_control_wakeupmon"]
        [::std::mem::size_of::<proc_rlimit_control_wakeupmon>() - 8usize];
    ["Alignment of proc_rlimit_control_wakeupmon"]
        [::std::mem::align_of::<proc_rlimit_control_wakeupmon>() - 4usize];
    ["Offset of field: proc_rlimit_control_wakeupmon::wm_flags"]
        [::std::mem::offset_of!(proc_rlimit_control_wakeupmon, wm_flags) - 0usize];
    ["Offset of field: proc_rlimit_control_wakeupmon::wm_rate"]
        [::std::mem::offset_of!(proc_rlimit_control_wakeupmon, wm_rate) - 4usize];
};
extern "C" {
    pub fn getpriority(arg1: ::std::os::raw::c_int, arg2: id_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getiopolicy_np(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getrlimit(arg1: ::std::os::raw::c_int, arg2: *mut rlimit) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getrusage(arg1: ::std::os::raw::c_int, arg2: *mut rusage) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setpriority(
        arg1: ::std::os::raw::c_int,
        arg2: id_t,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setiopolicy_np(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setrlimit(arg1: ::std::os::raw::c_int, arg2: *const rlimit) -> ::std::os::raw::c_int;
}
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct _OSUnalignedU16 {
    pub __val: u16,
}
const _: () = {
    ["Size of _OSUnalignedU16"][::std::mem::size_of::<_OSUnalignedU16>() - 2usize];
    ["Alignment of _OSUnalignedU16"][::std::mem::align_of::<_OSUnalignedU16>() - 1usize];
    ["Offset of field: _OSUnalignedU16::__val"]
        [::std::mem::offset_of!(_OSUnalignedU16, __val) - 0usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct _OSUnalignedU32 {
    pub __val: u32,
}
const _: () = {
    ["Size of _OSUnalignedU32"][::std::mem::size_of::<_OSUnalignedU32>() - 4usize];
    ["Alignment of _OSUnalignedU32"][::std::mem::align_of::<_OSUnalignedU32>() - 1usize];
    ["Offset of field: _OSUnalignedU32::__val"]
        [::std::mem::offset_of!(_OSUnalignedU32, __val) - 0usize];
};
#[repr(C, packed)]
#[derive(Debug, Copy, Clone)]
pub struct _OSUnalignedU64 {
    pub __val: u64,
}
const _: () = {
    ["Size of _OSUnalignedU64"][::std::mem::size_of::<_OSUnalignedU64>() - 8usize];
    ["Alignment of _OSUnalignedU64"][::std::mem::align_of::<_OSUnalignedU64>() - 1usize];
    ["Offset of field: _OSUnalignedU64::__val"]
        [::std::mem::offset_of!(_OSUnalignedU64, __val) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union wait {
    pub w_status: ::std::os::raw::c_int,
    pub w_T: wait__bindgen_ty_1,
    pub w_S: wait__bindgen_ty_2,
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct wait__bindgen_ty_1 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
const _: () = {
    ["Size of wait__bindgen_ty_1"][::std::mem::size_of::<wait__bindgen_ty_1>() - 4usize];
    ["Alignment of wait__bindgen_ty_1"][::std::mem::align_of::<wait__bindgen_ty_1>() - 4usize];
};
impl wait__bindgen_ty_1 {
    #[inline]
    pub fn w_Termsig(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 7u8) as u32) }
    }
    #[inline]
    pub fn set_w_Termsig(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 7u8, val as u64)
        }
    }
    #[inline]
    pub fn w_Coredump(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_w_Coredump(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn w_Retcode(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_w_Retcode(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn w_Filler(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_w_Filler(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        w_Termsig: ::std::os::raw::c_uint,
        w_Coredump: ::std::os::raw::c_uint,
        w_Retcode: ::std::os::raw::c_uint,
        w_Filler: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 7u8, {
            let w_Termsig: u32 = unsafe { ::std::mem::transmute(w_Termsig) };
            w_Termsig as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let w_Coredump: u32 = unsafe { ::std::mem::transmute(w_Coredump) };
            w_Coredump as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let w_Retcode: u32 = unsafe { ::std::mem::transmute(w_Retcode) };
            w_Retcode as u64
        });
        __bindgen_bitfield_unit.set(16usize, 16u8, {
            let w_Filler: u32 = unsafe { ::std::mem::transmute(w_Filler) };
            w_Filler as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct wait__bindgen_ty_2 {
    pub _bitfield_align_1: [u16; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
const _: () = {
    ["Size of wait__bindgen_ty_2"][::std::mem::size_of::<wait__bindgen_ty_2>() - 4usize];
    ["Alignment of wait__bindgen_ty_2"][::std::mem::align_of::<wait__bindgen_ty_2>() - 4usize];
};
impl wait__bindgen_ty_2 {
    #[inline]
    pub fn w_Stopval(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_w_Stopval(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn w_Stopsig(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_w_Stopsig(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(8usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn w_Filler(&self) -> ::std::os::raw::c_uint {
        unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 16u8) as u32) }
    }
    #[inline]
    pub fn set_w_Filler(&mut self, val: ::std::os::raw::c_uint) {
        unsafe {
            let val: u32 = ::std::mem::transmute(val);
            self._bitfield_1.set(16usize, 16u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        w_Stopval: ::std::os::raw::c_uint,
        w_Stopsig: ::std::os::raw::c_uint,
        w_Filler: ::std::os::raw::c_uint,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let w_Stopval: u32 = unsafe { ::std::mem::transmute(w_Stopval) };
            w_Stopval as u64
        });
        __bindgen_bitfield_unit.set(8usize, 8u8, {
            let w_Stopsig: u32 = unsafe { ::std::mem::transmute(w_Stopsig) };
            w_Stopsig as u64
        });
        __bindgen_bitfield_unit.set(16usize, 16u8, {
            let w_Filler: u32 = unsafe { ::std::mem::transmute(w_Filler) };
            w_Filler as u64
        });
        __bindgen_bitfield_unit
    }
}
const _: () = {
    ["Size of wait"][::std::mem::size_of::<wait>() - 4usize];
    ["Alignment of wait"][::std::mem::align_of::<wait>() - 4usize];
    ["Offset of field: wait::w_status"][::std::mem::offset_of!(wait, w_status) - 0usize];
    ["Offset of field: wait::w_T"][::std::mem::offset_of!(wait, w_T) - 0usize];
    ["Offset of field: wait::w_S"][::std::mem::offset_of!(wait, w_S) - 0usize];
};
extern "C" {
    pub fn wait(arg1: *mut ::std::os::raw::c_int) -> pid_t;
}
extern "C" {
    pub fn waitpid(
        arg1: pid_t,
        arg2: *mut ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
    ) -> pid_t;
}
extern "C" {
    pub fn waitid(
        arg1: idtype_t,
        arg2: id_t,
        arg3: *mut siginfo_t,
        arg4: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wait3(
        arg1: *mut ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
        arg3: *mut rusage,
    ) -> pid_t;
}
extern "C" {
    pub fn wait4(
        arg1: pid_t,
        arg2: *mut ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *mut rusage,
    ) -> pid_t;
}
extern "C" {
    pub fn alloca(arg1: usize) -> *mut ::std::os::raw::c_void;
}
pub type ct_rune_t = __darwin_ct_rune_t;
pub type rune_t = __darwin_rune_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct div_t {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
const _: () = {
    ["Size of div_t"][::std::mem::size_of::<div_t>() - 8usize];
    ["Alignment of div_t"][::std::mem::align_of::<div_t>() - 4usize];
    ["Offset of field: div_t::quot"][::std::mem::offset_of!(div_t, quot) - 0usize];
    ["Offset of field: div_t::rem"][::std::mem::offset_of!(div_t, rem) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ldiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
const _: () = {
    ["Size of ldiv_t"][::std::mem::size_of::<ldiv_t>() - 16usize];
    ["Alignment of ldiv_t"][::std::mem::align_of::<ldiv_t>() - 8usize];
    ["Offset of field: ldiv_t::quot"][::std::mem::offset_of!(ldiv_t, quot) - 0usize];
    ["Offset of field: ldiv_t::rem"][::std::mem::offset_of!(ldiv_t, rem) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lldiv_t {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
const _: () = {
    ["Size of lldiv_t"][::std::mem::size_of::<lldiv_t>() - 16usize];
    ["Alignment of lldiv_t"][::std::mem::align_of::<lldiv_t>() - 8usize];
    ["Offset of field: lldiv_t::quot"][::std::mem::offset_of!(lldiv_t, quot) - 0usize];
    ["Offset of field: lldiv_t::rem"][::std::mem::offset_of!(lldiv_t, rem) - 8usize];
};
extern "C" {
    pub static mut __mb_cur_max: ::std::os::raw::c_int;
}
pub type malloc_type_id_t = ::std::os::raw::c_ulonglong;
extern "C" {
    pub fn malloc_type_malloc(
        size: usize,
        type_id: malloc_type_id_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn malloc_type_calloc(
        count: usize,
        size: usize,
        type_id: malloc_type_id_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn malloc_type_free(ptr: *mut ::std::os::raw::c_void, type_id: malloc_type_id_t);
}
extern "C" {
    pub fn malloc_type_realloc(
        ptr: *mut ::std::os::raw::c_void,
        size: usize,
        type_id: malloc_type_id_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn malloc_type_valloc(
        size: usize,
        type_id: malloc_type_id_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn malloc_type_aligned_alloc(
        alignment: usize,
        size: usize,
        type_id: malloc_type_id_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn malloc_type_posix_memalign(
        memptr: *mut *mut ::std::os::raw::c_void,
        alignment: usize,
        size: usize,
        type_id: malloc_type_id_t,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _malloc_zone_t {
    _unused: [u8; 0],
}
pub type malloc_zone_t = _malloc_zone_t;
extern "C" {
    pub fn malloc_type_zone_malloc(
        zone: *mut malloc_zone_t,
        size: usize,
        type_id: malloc_type_id_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn malloc_type_zone_calloc(
        zone: *mut malloc_zone_t,
        count: usize,
        size: usize,
        type_id: malloc_type_id_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn malloc_type_zone_free(
        zone: *mut malloc_zone_t,
        ptr: *mut ::std::os::raw::c_void,
        type_id: malloc_type_id_t,
    );
}
extern "C" {
    pub fn malloc_type_zone_realloc(
        zone: *mut malloc_zone_t,
        ptr: *mut ::std::os::raw::c_void,
        size: usize,
        type_id: malloc_type_id_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn malloc_type_zone_valloc(
        zone: *mut malloc_zone_t,
        size: usize,
        type_id: malloc_type_id_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn malloc_type_zone_memalign(
        zone: *mut malloc_zone_t,
        alignment: usize,
        size: usize,
        type_id: malloc_type_id_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn malloc(__size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn calloc(__count: usize, __size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn free(arg1: *mut ::std::os::raw::c_void);
}
extern "C" {
    pub fn realloc(
        __ptr: *mut ::std::os::raw::c_void,
        __size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn reallocf(
        __ptr: *mut ::std::os::raw::c_void,
        __size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn valloc(arg1: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn aligned_alloc(__alignment: usize, __size: usize) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn posix_memalign(
        __memptr: *mut *mut ::std::os::raw::c_void,
        __alignment: usize,
        __size: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn abort() -> !;
}
extern "C" {
    pub fn abs(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atexit(arg1: ::std::option::Option<unsafe extern "C" fn()>) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atof(arg1: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn atoi(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atol(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn atoll(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn bsearch(
        __key: *const ::std::os::raw::c_void,
        __base: *const ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn div(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int) -> div_t;
}
extern "C" {
    pub fn exit(arg1: ::std::os::raw::c_int) -> !;
}
extern "C" {
    pub fn getenv(arg1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn labs(arg1: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn ldiv(arg1: ::std::os::raw::c_long, arg2: ::std::os::raw::c_long) -> ldiv_t;
}
extern "C" {
    pub fn llabs(arg1: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn lldiv(arg1: ::std::os::raw::c_longlong, arg2: ::std::os::raw::c_longlong) -> lldiv_t;
}
extern "C" {
    pub fn mblen(__s: *const ::std::os::raw::c_char, __n: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbstowcs(arg1: *mut u32, arg2: *const ::std::os::raw::c_char, arg3: usize) -> usize;
}
extern "C" {
    pub fn mbtowc(
        arg1: *mut u32,
        arg2: *const ::std::os::raw::c_char,
        arg3: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn qsort(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    );
}
extern "C" {
    pub fn rand() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn srand(arg1: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn strtod(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn strtof(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> f32;
}
extern "C" {
    pub fn strtol(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn strtold(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
extern "C" {
    pub fn strtoll(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoul(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtoull(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn system(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcstombs(arg1: *mut ::std::os::raw::c_char, arg2: *const u32, arg3: usize) -> usize;
}
extern "C" {
    pub fn wctomb(arg1: *mut ::std::os::raw::c_char, arg2: u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn _Exit(arg1: ::std::os::raw::c_int) -> !;
}
extern "C" {
    pub fn a64l(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn drand48() -> f64;
}
extern "C" {
    pub fn ecvt(
        arg1: f64,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn erand48(arg1: *mut ::std::os::raw::c_ushort) -> f64;
}
extern "C" {
    pub fn fcvt(
        arg1: f64,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
        arg4: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn gcvt(
        arg1: f64,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getsubopt(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *const *mut ::std::os::raw::c_char,
        arg3: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn grantpt(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn initstate(
        arg1: ::std::os::raw::c_uint,
        arg2: *mut ::std::os::raw::c_char,
        arg3: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn jrand48(arg1: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn l64a(arg1: ::std::os::raw::c_long) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn lcong48(arg1: *mut ::std::os::raw::c_ushort);
}
extern "C" {
    pub fn lrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn mktemp(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn mkstemp(arg1: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mrand48() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn nrand48(arg1: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn posix_openpt(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ptsname(arg1: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ptsname_r(
        fildes: ::std::os::raw::c_int,
        buffer: *mut ::std::os::raw::c_char,
        buflen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putenv(arg1: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn random() -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn rand_r(arg1: *mut ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
extern "C" {
    #[link_name = "\u{1}_realpath$DARWIN_EXTSN"]
    pub fn realpath(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn seed48(arg1: *mut ::std::os::raw::c_ushort) -> *mut ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn setenv(
        __name: *const ::std::os::raw::c_char,
        __value: *const ::std::os::raw::c_char,
        __overwrite: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setkey(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn setstate(arg1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn srand48(arg1: ::std::os::raw::c_long);
}
extern "C" {
    pub fn srandom(arg1: ::std::os::raw::c_uint);
}
extern "C" {
    pub fn unlockpt(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn unsetenv(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
pub type dev_t = __darwin_dev_t;
pub type mode_t = __darwin_mode_t;
extern "C" {
    pub fn arc4random() -> u32;
}
extern "C" {
    pub fn arc4random_addrandom(arg1: *mut ::std::os::raw::c_uchar, arg2: ::std::os::raw::c_int);
}
extern "C" {
    pub fn arc4random_buf(__buf: *mut ::std::os::raw::c_void, __nbytes: usize);
}
extern "C" {
    pub fn arc4random_stir();
}
extern "C" {
    pub fn arc4random_uniform(__upper_bound: u32) -> u32;
}
extern "C" {
    pub fn atexit_b(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bsearch_b(
        __key: *const ::std::os::raw::c_void,
        __base: *const ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn cgetcap(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn cgetclose() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetent(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
        arg3: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetfirst(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetmatch(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetnext(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetnum(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetset(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetstr(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn cgetustr(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn daemon(
        arg1: ::std::os::raw::c_int,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn devname(arg1: dev_t, arg2: mode_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn devname_r(
        arg1: dev_t,
        arg2: mode_t,
        buf: *mut ::std::os::raw::c_char,
        len: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getbsize(
        arg1: *mut ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_long,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn getloadavg(arg1: *mut f64, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getprogname() -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn setprogname(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn heapsort(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn heapsort_b(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mergesort(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mergesort_b(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn psort(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    );
}
extern "C" {
    pub fn psort_b(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn psort_r(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        arg1: *mut ::std::os::raw::c_void,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
                arg3: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    );
}
extern "C" {
    pub fn qsort_b(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        __compar: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn qsort_r(
        __base: *mut ::std::os::raw::c_void,
        __nel: usize,
        __width: usize,
        arg1: *mut ::std::os::raw::c_void,
        __compar: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_void,
                arg3: *const ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
    );
}
extern "C" {
    pub fn radixsort(
        __base: *mut *const ::std::os::raw::c_uchar,
        __nel: ::std::os::raw::c_int,
        __table: *const ::std::os::raw::c_uchar,
        __endbyte: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rpmatch(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sradixsort(
        __base: *mut *const ::std::os::raw::c_uchar,
        __nel: ::std::os::raw::c_int,
        __table: *const ::std::os::raw::c_uchar,
        __endbyte: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sranddev();
}
extern "C" {
    pub fn srandomdev();
}
extern "C" {
    pub fn strtonum(
        __numstr: *const ::std::os::raw::c_char,
        __minval: ::std::os::raw::c_longlong,
        __maxval: ::std::os::raw::c_longlong,
        __errstrp: *mut *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoq(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtouq(
        __str: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub static mut suboptarg: *mut ::std::os::raw::c_char;
}
pub type float_t = f32;
pub type double_t = f64;
extern "C" {
    pub fn __math_errhandling() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __fpclassifyf(arg1: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __fpclassifyd(arg1: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __fpclassifyl(arg1: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn acosf(arg1: f32) -> f32;
}
extern "C" {
    pub fn acos(arg1: f64) -> f64;
}
extern "C" {
    pub fn acosl(arg1: f64) -> f64;
}
extern "C" {
    pub fn asinf(arg1: f32) -> f32;
}
extern "C" {
    pub fn asin(arg1: f64) -> f64;
}
extern "C" {
    pub fn asinl(arg1: f64) -> f64;
}
extern "C" {
    pub fn atanf(arg1: f32) -> f32;
}
extern "C" {
    pub fn atan(arg1: f64) -> f64;
}
extern "C" {
    pub fn atanl(arg1: f64) -> f64;
}
extern "C" {
    pub fn atan2f(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn atan2(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn atan2l(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn cosf(arg1: f32) -> f32;
}
extern "C" {
    pub fn cos(arg1: f64) -> f64;
}
extern "C" {
    pub fn cosl(arg1: f64) -> f64;
}
extern "C" {
    pub fn sinf(arg1: f32) -> f32;
}
extern "C" {
    pub fn sin(arg1: f64) -> f64;
}
extern "C" {
    pub fn sinl(arg1: f64) -> f64;
}
extern "C" {
    pub fn tanf(arg1: f32) -> f32;
}
extern "C" {
    pub fn tan(arg1: f64) -> f64;
}
extern "C" {
    pub fn tanl(arg1: f64) -> f64;
}
extern "C" {
    pub fn acoshf(arg1: f32) -> f32;
}
extern "C" {
    pub fn acosh(arg1: f64) -> f64;
}
extern "C" {
    pub fn acoshl(arg1: f64) -> f64;
}
extern "C" {
    pub fn asinhf(arg1: f32) -> f32;
}
extern "C" {
    pub fn asinh(arg1: f64) -> f64;
}
extern "C" {
    pub fn asinhl(arg1: f64) -> f64;
}
extern "C" {
    pub fn atanhf(arg1: f32) -> f32;
}
extern "C" {
    pub fn atanh(arg1: f64) -> f64;
}
extern "C" {
    pub fn atanhl(arg1: f64) -> f64;
}
extern "C" {
    pub fn coshf(arg1: f32) -> f32;
}
extern "C" {
    pub fn cosh(arg1: f64) -> f64;
}
extern "C" {
    pub fn coshl(arg1: f64) -> f64;
}
extern "C" {
    pub fn sinhf(arg1: f32) -> f32;
}
extern "C" {
    pub fn sinh(arg1: f64) -> f64;
}
extern "C" {
    pub fn sinhl(arg1: f64) -> f64;
}
extern "C" {
    pub fn tanhf(arg1: f32) -> f32;
}
extern "C" {
    pub fn tanh(arg1: f64) -> f64;
}
extern "C" {
    pub fn tanhl(arg1: f64) -> f64;
}
extern "C" {
    pub fn expf(arg1: f32) -> f32;
}
extern "C" {
    pub fn exp(arg1: f64) -> f64;
}
extern "C" {
    pub fn expl(arg1: f64) -> f64;
}
extern "C" {
    pub fn exp2f(arg1: f32) -> f32;
}
extern "C" {
    pub fn exp2(arg1: f64) -> f64;
}
extern "C" {
    pub fn exp2l(arg1: f64) -> f64;
}
extern "C" {
    pub fn expm1f(arg1: f32) -> f32;
}
extern "C" {
    pub fn expm1(arg1: f64) -> f64;
}
extern "C" {
    pub fn expm1l(arg1: f64) -> f64;
}
extern "C" {
    pub fn logf(arg1: f32) -> f32;
}
extern "C" {
    pub fn log(arg1: f64) -> f64;
}
extern "C" {
    pub fn logl(arg1: f64) -> f64;
}
extern "C" {
    pub fn log10f(arg1: f32) -> f32;
}
extern "C" {
    pub fn log10(arg1: f64) -> f64;
}
extern "C" {
    pub fn log10l(arg1: f64) -> f64;
}
extern "C" {
    pub fn log2f(arg1: f32) -> f32;
}
extern "C" {
    pub fn log2(arg1: f64) -> f64;
}
extern "C" {
    pub fn log2l(arg1: f64) -> f64;
}
extern "C" {
    pub fn log1pf(arg1: f32) -> f32;
}
extern "C" {
    pub fn log1p(arg1: f64) -> f64;
}
extern "C" {
    pub fn log1pl(arg1: f64) -> f64;
}
extern "C" {
    pub fn logbf(arg1: f32) -> f32;
}
extern "C" {
    pub fn logb(arg1: f64) -> f64;
}
extern "C" {
    pub fn logbl(arg1: f64) -> f64;
}
extern "C" {
    pub fn modff(arg1: f32, arg2: *mut f32) -> f32;
}
extern "C" {
    pub fn modf(arg1: f64, arg2: *mut f64) -> f64;
}
extern "C" {
    pub fn modfl(arg1: f64, arg2: *mut f64) -> f64;
}
extern "C" {
    pub fn ldexpf(arg1: f32, arg2: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn ldexp(arg1: f64, arg2: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn ldexpl(arg1: f64, arg2: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn frexpf(arg1: f32, arg2: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn frexp(arg1: f64, arg2: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn frexpl(arg1: f64, arg2: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn ilogbf(arg1: f32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ilogb(arg1: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ilogbl(arg1: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scalbnf(arg1: f32, arg2: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn scalbn(arg1: f64, arg2: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn scalbnl(arg1: f64, arg2: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn scalblnf(arg1: f32, arg2: ::std::os::raw::c_long) -> f32;
}
extern "C" {
    pub fn scalbln(arg1: f64, arg2: ::std::os::raw::c_long) -> f64;
}
extern "C" {
    pub fn scalblnl(arg1: f64, arg2: ::std::os::raw::c_long) -> f64;
}
extern "C" {
    pub fn fabsf(arg1: f32) -> f32;
}
extern "C" {
    pub fn fabs(arg1: f64) -> f64;
}
extern "C" {
    pub fn fabsl(arg1: f64) -> f64;
}
extern "C" {
    pub fn cbrtf(arg1: f32) -> f32;
}
extern "C" {
    pub fn cbrt(arg1: f64) -> f64;
}
extern "C" {
    pub fn cbrtl(arg1: f64) -> f64;
}
extern "C" {
    pub fn hypotf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn hypot(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn hypotl(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn powf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn pow(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn powl(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn sqrtf(arg1: f32) -> f32;
}
extern "C" {
    pub fn sqrt(arg1: f64) -> f64;
}
extern "C" {
    pub fn sqrtl(arg1: f64) -> f64;
}
extern "C" {
    pub fn erff(arg1: f32) -> f32;
}
extern "C" {
    pub fn erf(arg1: f64) -> f64;
}
extern "C" {
    pub fn erfl(arg1: f64) -> f64;
}
extern "C" {
    pub fn erfcf(arg1: f32) -> f32;
}
extern "C" {
    pub fn erfc(arg1: f64) -> f64;
}
extern "C" {
    pub fn erfcl(arg1: f64) -> f64;
}
extern "C" {
    pub fn lgammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn lgamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn lgammal(arg1: f64) -> f64;
}
extern "C" {
    pub fn tgammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn tgamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn tgammal(arg1: f64) -> f64;
}
extern "C" {
    pub fn ceilf(arg1: f32) -> f32;
}
extern "C" {
    pub fn ceil(arg1: f64) -> f64;
}
extern "C" {
    pub fn ceill(arg1: f64) -> f64;
}
extern "C" {
    pub fn floorf(arg1: f32) -> f32;
}
extern "C" {
    pub fn floor(arg1: f64) -> f64;
}
extern "C" {
    pub fn floorl(arg1: f64) -> f64;
}
extern "C" {
    pub fn nearbyintf(arg1: f32) -> f32;
}
extern "C" {
    pub fn nearbyint(arg1: f64) -> f64;
}
extern "C" {
    pub fn nearbyintl(arg1: f64) -> f64;
}
extern "C" {
    pub fn rintf(arg1: f32) -> f32;
}
extern "C" {
    pub fn rint(arg1: f64) -> f64;
}
extern "C" {
    pub fn rintl(arg1: f64) -> f64;
}
extern "C" {
    pub fn lrintf(arg1: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn lrint(arg1: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn lrintl(arg1: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn roundf(arg1: f32) -> f32;
}
extern "C" {
    pub fn round(arg1: f64) -> f64;
}
extern "C" {
    pub fn roundl(arg1: f64) -> f64;
}
extern "C" {
    pub fn lroundf(arg1: f32) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn lround(arg1: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn lroundl(arg1: f64) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn llrintf(arg1: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn llrint(arg1: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn llrintl(arg1: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn llroundf(arg1: f32) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn llround(arg1: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn llroundl(arg1: f64) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn truncf(arg1: f32) -> f32;
}
extern "C" {
    pub fn trunc(arg1: f64) -> f64;
}
extern "C" {
    pub fn truncl(arg1: f64) -> f64;
}
extern "C" {
    pub fn fmodf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn fmod(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn fmodl(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn remainderf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn remainder(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn remainderl(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn remquof(arg1: f32, arg2: f32, arg3: *mut ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn remquo(arg1: f64, arg2: f64, arg3: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn remquol(arg1: f64, arg2: f64, arg3: *mut ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn copysignf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn copysign(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn copysignl(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn nanf(arg1: *const ::std::os::raw::c_char) -> f32;
}
extern "C" {
    pub fn nan(arg1: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn nanl(arg1: *const ::std::os::raw::c_char) -> f64;
}
extern "C" {
    pub fn nextafterf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn nextafter(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn nextafterl(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn nexttoward(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn nexttowardf(arg1: f32, arg2: f64) -> f32;
}
extern "C" {
    pub fn nexttowardl(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn fdimf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn fdim(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn fdiml(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn fmaxf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn fmax(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn fmaxl(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn fminf(arg1: f32, arg2: f32) -> f32;
}
extern "C" {
    pub fn fmin(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn fminl(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub fn fmaf(arg1: f32, arg2: f32, arg3: f32) -> f32;
}
extern "C" {
    pub fn fma(arg1: f64, arg2: f64, arg3: f64) -> f64;
}
extern "C" {
    pub fn fmal(arg1: f64, arg2: f64, arg3: f64) -> f64;
}
extern "C" {
    pub fn __exp10f(arg1: f32) -> f32;
}
extern "C" {
    pub fn __exp10(arg1: f64) -> f64;
}
extern "C" {
    pub fn __cospif(arg1: f32) -> f32;
}
extern "C" {
    pub fn __cospi(arg1: f64) -> f64;
}
extern "C" {
    pub fn __sinpif(arg1: f32) -> f32;
}
extern "C" {
    pub fn __sinpi(arg1: f64) -> f64;
}
extern "C" {
    pub fn __tanpif(arg1: f32) -> f32;
}
extern "C" {
    pub fn __tanpi(arg1: f64) -> f64;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __float2 {
    pub __sinval: f32,
    pub __cosval: f32,
}
const _: () = {
    ["Size of __float2"][::std::mem::size_of::<__float2>() - 8usize];
    ["Alignment of __float2"][::std::mem::align_of::<__float2>() - 4usize];
    ["Offset of field: __float2::__sinval"][::std::mem::offset_of!(__float2, __sinval) - 0usize];
    ["Offset of field: __float2::__cosval"][::std::mem::offset_of!(__float2, __cosval) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __double2 {
    pub __sinval: f64,
    pub __cosval: f64,
}
const _: () = {
    ["Size of __double2"][::std::mem::size_of::<__double2>() - 16usize];
    ["Alignment of __double2"][::std::mem::align_of::<__double2>() - 8usize];
    ["Offset of field: __double2::__sinval"][::std::mem::offset_of!(__double2, __sinval) - 0usize];
    ["Offset of field: __double2::__cosval"][::std::mem::offset_of!(__double2, __cosval) - 8usize];
};
extern "C" {
    pub fn __sincosf_stret(arg1: f32) -> __float2;
}
extern "C" {
    pub fn __sincos_stret(arg1: f64) -> __double2;
}
extern "C" {
    pub fn __sincospif_stret(arg1: f32) -> __float2;
}
extern "C" {
    pub fn __sincospi_stret(arg1: f64) -> __double2;
}
extern "C" {
    pub fn j0(arg1: f64) -> f64;
}
extern "C" {
    pub fn j1(arg1: f64) -> f64;
}
extern "C" {
    pub fn jn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn y0(arg1: f64) -> f64;
}
extern "C" {
    pub fn y1(arg1: f64) -> f64;
}
extern "C" {
    pub fn yn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn scalb(arg1: f64, arg2: f64) -> f64;
}
extern "C" {
    pub static mut signgam: ::std::os::raw::c_int;
}
pub type mbstate_t = __darwin_mbstate_t;
extern "C" {
    #[link_name = "\u{1}_swift_slowAlloc"]
    pub fn swift_swift_slowAlloc(bytes: usize, alignMask: usize) -> *mut ::std::os::raw::c_void;
}
pub type swift_MallocTypeId = ::std::os::raw::c_ulonglong;
extern "C" {
    #[link_name = "\u{1}__ZN5swift20swift_slowAllocTypedEmmy"]
    pub fn swift_swift_slowAllocTyped(
        bytes: usize,
        alignMask: usize,
        typeId: swift_MallocTypeId,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_swift_slowDealloc"]
    pub fn swift_swift_slowDealloc(
        ptr: *mut ::std::os::raw::c_void,
        bytes: usize,
        alignMask: usize,
    );
}
#[doc = " Same as \\c std::is_trivially_copyable, which we cannot use directly\n because it is not implemented yet in all C++11 standard libraries.\n\n Unlike \\c llvm::isPodLike, this trait should produce a precise result and\n is not intended to be specialized."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct swift_IsTriviallyCopyable {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct swift_IsTriviallyConstructible {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct swift_IsTriviallyDestructible {
    pub _address: u8,
}
#[doc = " A simple wrapper for std::atomic that provides the most important\n interfaces and fixes the API bug where all of the orderings default\n to sequentially-consistent.\n\n It also sometimes uses a different implementation in cases where\n std::atomic has made unfortunate choices; our uses of this broadly\n don't have the ABI-compatibility issues that std::atomic faces."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct swift_atomic {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct swift_InProcess {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct swift_TargetMetadata {
    pub _address: u8,
}
pub type swift_Metadata = swift_TargetMetadata;
extern "C" {
    #[link_name = "\u{1}__ZN5swift11fatalErrorvEjPKcPc"]
    pub fn swift_fatalErrorv(flags: u32, format: *const ::std::os::raw::c_char, args: va_list)
        -> !;
}
extern "C" {
    #[link_name = "\u{1}__ZN5swift10fatalErrorEjPKcz"]
    pub fn swift_fatalError(flags: u32, format: *const ::std::os::raw::c_char, ...) -> !;
}
extern "C" {
    #[doc = " swift::warning() emits a warning from the runtime."]
    #[link_name = "\u{1}__ZN5swift8warningvEjPKcPc"]
    pub fn swift_warningv(flags: u32, format: *const ::std::os::raw::c_char, args: va_list);
}
extern "C" {
    #[doc = " swift::warning() emits a warning from the runtime."]
    #[link_name = "\u{1}__ZN5swift7warningEjPKcz"]
    pub fn swift_warning(flags: u32, format: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    #[link_name = "\u{1}__ZN5swift24swift_dynamicCastFailureEPKNS_14TargetMetadataINS_9InProcessEEES4_PKc"]
    pub fn swift_swift_dynamicCastFailure(
        sourceType: *const swift_Metadata,
        targetType: *const swift_Metadata,
        message: *const ::std::os::raw::c_char,
    ) -> !;
}
extern "C" {
    #[link_name = "\u{1}__ZN5swift24swift_dynamicCastFailureEPKvPKcS1_S3_S3_"]
    pub fn swift_swift_dynamicCastFailure1(
        sourceType: *const ::std::os::raw::c_void,
        sourceName: *const ::std::os::raw::c_char,
        targetType: *const ::std::os::raw::c_void,
        targetName: *const ::std::os::raw::c_char,
        message: *const ::std::os::raw::c_char,
    ) -> !;
}
extern "C" {
    #[link_name = "\u{1}_swift_reportError"]
    pub fn swift_swift_reportError(flags: u32, message: *const ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "\u{1}_swift_reportWarning"]
    pub fn swift_swift_reportWarning(flags: u32, message: *const ::std::os::raw::c_char);
}
extern "C" {
    #[link_name = "\u{1}__ZN5swift25swift_abortRetainOverflowEv"]
    pub fn swift_swift_abortRetainOverflow() -> !;
}
extern "C" {
    #[link_name = "\u{1}__ZN5swift24swift_abortRetainUnownedEPKv"]
    pub fn swift_swift_abortRetainUnowned(object: *const ::std::os::raw::c_void) -> !;
}
extern "C" {
    #[link_name = "\u{1}__ZN5swift32swift_abortUnownedRetainOverflowEv"]
    pub fn swift_swift_abortUnownedRetainOverflow() -> !;
}
extern "C" {
    #[link_name = "\u{1}__ZN5swift29swift_abortWeakRetainOverflowEv"]
    pub fn swift_swift_abortWeakRetainOverflow() -> !;
}
extern "C" {
    #[link_name = "\u{1}__ZN5swift37swift_abortDynamicReplacementEnablingEv"]
    pub fn swift_swift_abortDynamicReplacementEnabling() -> !;
}
extern "C" {
    #[link_name = "\u{1}__ZN5swift38swift_abortDynamicReplacementDisablingEv"]
    pub fn swift_swift_abortDynamicReplacementDisabling() -> !;
}
extern "C" {
    #[link_name = "\u{1}__ZN5swift33swift_abortDisabledUnicodeSupportEv"]
    pub fn swift_swift_abortDisabledUnicodeSupport() -> !;
}
extern "C" {
    #[doc = " This function dumps one line of a stack trace. It is assumed that \\p framePC\n is the address of the stack frame at index \\p index. If \\p shortOutput is\n true, this functions prints only the name of the symbol and offset, ignores\n \\p index argument and omits the newline."]
    #[link_name = "\u{1}__ZN5swift19dumpStackTraceEntryEjPvb"]
    pub fn swift_dumpStackTraceEntry(
        index: ::std::os::raw::c_uint,
        framePC: *mut ::std::os::raw::c_void,
        shortOutput: bool,
    );
}
extern "C" {
    #[link_name = "\u{1}__ZN5swift20withCurrentBacktraceENSt3__18functionIFvPPviEEE"]
    pub fn swift_withCurrentBacktrace(call: std_function) -> bool;
}
extern "C" {
    #[link_name = "\u{1}__ZN5swift21printCurrentBacktraceEj"]
    pub fn swift_printCurrentBacktrace(framesToSkip: ::std::os::raw::c_uint);
}
#[doc = " Debugger breakpoint ABI. This structure is passed to the debugger (and needs\n to be stable) and describes extra information about a fatal error or a\n non-fatal warning, which should be logged as a runtime issue. Please keep\n all integer values pointer-sized."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct swift_RuntimeErrorDetails {
    pub version: usize,
    pub errorType: *const ::std::os::raw::c_char,
    pub currentStackDescription: *const ::std::os::raw::c_char,
    pub framesToSkip: usize,
    pub memoryAddress: *const ::std::os::raw::c_void,
    pub numExtraThreads: usize,
    pub threads: *mut swift_RuntimeErrorDetails_Thread,
    pub numFixIts: usize,
    pub fixIts: *mut swift_RuntimeErrorDetails_FixIt,
    pub numNotes: usize,
    pub notes: *mut swift_RuntimeErrorDetails_Note,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct swift_RuntimeErrorDetails_Thread {
    pub description: *const ::std::os::raw::c_char,
    pub threadID: u64,
    pub numFrames: usize,
    pub frames: *mut *mut ::std::os::raw::c_void,
}
const _: () = {
    ["Size of swift_RuntimeErrorDetails_Thread"]
        [::std::mem::size_of::<swift_RuntimeErrorDetails_Thread>() - 32usize];
    ["Alignment of swift_RuntimeErrorDetails_Thread"]
        [::std::mem::align_of::<swift_RuntimeErrorDetails_Thread>() - 8usize];
    ["Offset of field: swift_RuntimeErrorDetails_Thread::description"]
        [::std::mem::offset_of!(swift_RuntimeErrorDetails_Thread, description) - 0usize];
    ["Offset of field: swift_RuntimeErrorDetails_Thread::threadID"]
        [::std::mem::offset_of!(swift_RuntimeErrorDetails_Thread, threadID) - 8usize];
    ["Offset of field: swift_RuntimeErrorDetails_Thread::numFrames"]
        [::std::mem::offset_of!(swift_RuntimeErrorDetails_Thread, numFrames) - 16usize];
    ["Offset of field: swift_RuntimeErrorDetails_Thread::frames"]
        [::std::mem::offset_of!(swift_RuntimeErrorDetails_Thread, frames) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct swift_RuntimeErrorDetails_FixIt {
    pub filename: *const ::std::os::raw::c_char,
    pub startLine: usize,
    pub startColumn: usize,
    pub endLine: usize,
    pub endColumn: usize,
    pub replacementText: *const ::std::os::raw::c_char,
}
const _: () = {
    ["Size of swift_RuntimeErrorDetails_FixIt"]
        [::std::mem::size_of::<swift_RuntimeErrorDetails_FixIt>() - 48usize];
    ["Alignment of swift_RuntimeErrorDetails_FixIt"]
        [::std::mem::align_of::<swift_RuntimeErrorDetails_FixIt>() - 8usize];
    ["Offset of field: swift_RuntimeErrorDetails_FixIt::filename"]
        [::std::mem::offset_of!(swift_RuntimeErrorDetails_FixIt, filename) - 0usize];
    ["Offset of field: swift_RuntimeErrorDetails_FixIt::startLine"]
        [::std::mem::offset_of!(swift_RuntimeErrorDetails_FixIt, startLine) - 8usize];
    ["Offset of field: swift_RuntimeErrorDetails_FixIt::startColumn"]
        [::std::mem::offset_of!(swift_RuntimeErrorDetails_FixIt, startColumn) - 16usize];
    ["Offset of field: swift_RuntimeErrorDetails_FixIt::endLine"]
        [::std::mem::offset_of!(swift_RuntimeErrorDetails_FixIt, endLine) - 24usize];
    ["Offset of field: swift_RuntimeErrorDetails_FixIt::endColumn"]
        [::std::mem::offset_of!(swift_RuntimeErrorDetails_FixIt, endColumn) - 32usize];
    ["Offset of field: swift_RuntimeErrorDetails_FixIt::replacementText"]
        [::std::mem::offset_of!(swift_RuntimeErrorDetails_FixIt, replacementText) - 40usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct swift_RuntimeErrorDetails_Note {
    pub description: *const ::std::os::raw::c_char,
    pub numFixIts: usize,
    pub fixIts: *mut swift_RuntimeErrorDetails_FixIt,
}
const _: () = {
    ["Size of swift_RuntimeErrorDetails_Note"]
        [::std::mem::size_of::<swift_RuntimeErrorDetails_Note>() - 24usize];
    ["Alignment of swift_RuntimeErrorDetails_Note"]
        [::std::mem::align_of::<swift_RuntimeErrorDetails_Note>() - 8usize];
    ["Offset of field: swift_RuntimeErrorDetails_Note::description"]
        [::std::mem::offset_of!(swift_RuntimeErrorDetails_Note, description) - 0usize];
    ["Offset of field: swift_RuntimeErrorDetails_Note::numFixIts"]
        [::std::mem::offset_of!(swift_RuntimeErrorDetails_Note, numFixIts) - 8usize];
    ["Offset of field: swift_RuntimeErrorDetails_Note::fixIts"]
        [::std::mem::offset_of!(swift_RuntimeErrorDetails_Note, fixIts) - 16usize];
};
pub const swift_RuntimeErrorDetails_currentVersion: usize = 2;
const _: () = {
    ["Size of swift_RuntimeErrorDetails"]
        [::std::mem::size_of::<swift_RuntimeErrorDetails>() - 88usize];
    ["Alignment of swift_RuntimeErrorDetails"]
        [::std::mem::align_of::<swift_RuntimeErrorDetails>() - 8usize];
    ["Offset of field: swift_RuntimeErrorDetails::version"]
        [::std::mem::offset_of!(swift_RuntimeErrorDetails, version) - 0usize];
    ["Offset of field: swift_RuntimeErrorDetails::errorType"]
        [::std::mem::offset_of!(swift_RuntimeErrorDetails, errorType) - 8usize];
    ["Offset of field: swift_RuntimeErrorDetails::currentStackDescription"]
        [::std::mem::offset_of!(swift_RuntimeErrorDetails, currentStackDescription) - 16usize];
    ["Offset of field: swift_RuntimeErrorDetails::framesToSkip"]
        [::std::mem::offset_of!(swift_RuntimeErrorDetails, framesToSkip) - 24usize];
    ["Offset of field: swift_RuntimeErrorDetails::memoryAddress"]
        [::std::mem::offset_of!(swift_RuntimeErrorDetails, memoryAddress) - 32usize];
    ["Offset of field: swift_RuntimeErrorDetails::numExtraThreads"]
        [::std::mem::offset_of!(swift_RuntimeErrorDetails, numExtraThreads) - 40usize];
    ["Offset of field: swift_RuntimeErrorDetails::threads"]
        [::std::mem::offset_of!(swift_RuntimeErrorDetails, threads) - 48usize];
    ["Offset of field: swift_RuntimeErrorDetails::numFixIts"]
        [::std::mem::offset_of!(swift_RuntimeErrorDetails, numFixIts) - 56usize];
    ["Offset of field: swift_RuntimeErrorDetails::fixIts"]
        [::std::mem::offset_of!(swift_RuntimeErrorDetails, fixIts) - 64usize];
    ["Offset of field: swift_RuntimeErrorDetails::numNotes"]
        [::std::mem::offset_of!(swift_RuntimeErrorDetails, numNotes) - 72usize];
    ["Offset of field: swift_RuntimeErrorDetails::notes"]
        [::std::mem::offset_of!(swift_RuntimeErrorDetails, notes) - 80usize];
};
pub const RuntimeErrorFlagNone: swift__bindgen_ty_1 = 0;
pub const RuntimeErrorFlagFatal: swift__bindgen_ty_1 = 1;
pub type swift__bindgen_ty_1 = usize;
extern "C" {
    #[doc = " Debugger hook. Calling this stops the debugger with a message and details\n about the issues. Called by overlays."]
    #[link_name = "\u{1}__swift_reportToDebugger"]
    pub fn swift__swift_reportToDebugger(
        flags: usize,
        message: *const ::std::os::raw::c_char,
        details: *mut swift_RuntimeErrorDetails,
    );
}
extern "C" {
    #[link_name = "\u{1}__swift_reportFatalErrorsToDebugger"]
    pub static mut swift__swift_reportFatalErrorsToDebugger: bool;
}
extern "C" {
    #[link_name = "\u{1}__swift_shouldReportFatalErrorsToDebugger"]
    pub fn swift__swift_shouldReportFatalErrorsToDebugger() -> bool;
}
extern "C" {
    #[link_name = "\u{1}__swift_debug_metadataAllocationIterationEnabled"]
    pub static mut swift__swift_debug_metadataAllocationIterationEnabled: bool;
}
extern "C" {
    #[link_name = "\u{1}__swift_debug_allocationPoolPointer"]
    pub static swift__swift_debug_allocationPoolPointer: *const ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}__swift_debug_metadataAllocationBacktraceList"]
    pub static mut swift__swift_debug_metadataAllocationBacktraceList: std_atomic;
}
extern "C" {
    #[link_name = "\u{1}__swift_debug_protocolConformanceStatePointer"]
    pub static swift__swift_debug_protocolConformanceStatePointer: *const ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}__swift_debug_multiPayloadEnumPointerSpareBitsMask"]
    pub static swift__swift_debug_multiPayloadEnumPointerSpareBitsMask: u64;
}
pub const swift_RefCountInlinedness_RefCountNotInline: swift_RefCountInlinedness = 0;
pub const swift_RefCountInlinedness_RefCountIsInline: swift_RefCountInlinedness = 1;
pub type swift_RefCountInlinedness = ::std::os::raw::c_uint;
pub const swift_PerformDeinit_DontPerformDeinit: swift_PerformDeinit = 0;
pub const swift_PerformDeinit_DoPerformDeinit: swift_PerformDeinit = 1;
pub type swift_PerformDeinit = ::std::os::raw::c_uint;
extern "C" {
    #[link_name = "\u{1}Inlinedness"]
    pub static swift_RefCountBitsT_Inlinedness: swift_RefCountInlinedness;
}
pub type swift_RefCountBitsT_BitsType = u8;
pub type swift_RefCountBitsT_SignedBitsType = u8;
pub type swift_RefCountBitsT_Offsets = u8;
pub const swift_RefCountBitsT_Immortal_t_Immortal: swift_RefCountBitsT_Immortal_t = 0;
pub type swift_RefCountBitsT_Immortal_t = i32;
pub type swift_InlineRefCountBits = u64;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct swift_SideTableRefCountBits {
    pub _base: u64,
    pub weakBits: u32,
}
const _: () = {
    ["Size of swift_SideTableRefCountBits"]
        [::std::mem::size_of::<swift_SideTableRefCountBits>() - 16usize];
    ["Alignment of swift_SideTableRefCountBits"]
        [::std::mem::align_of::<swift_SideTableRefCountBits>() - 16usize];
    ["Offset of field: swift_SideTableRefCountBits::weakBits"]
        [::std::mem::offset_of!(swift_SideTableRefCountBits, weakBits) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct swift_RefCounts {
    pub refCounts: std_atomic,
}
pub const swift_RefCounts_Initialized_t_Initialized: swift_RefCounts_Initialized_t = 0;
pub type swift_RefCounts_Initialized_t = i32;
pub const swift_RefCounts_Immortal_t_Immortal: swift_RefCounts_Immortal_t = 0;
pub type swift_RefCounts_Immortal_t = i32;
pub type swift_InlineRefCounts = swift_RefCounts;
pub type swift_SideTableRefCounts = swift_RefCounts;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct swift_HeapObjectSideTableEntry {
    pub object: u64,
    pub __bindgen_padding_0: u64,
    pub refCounts: swift_SideTableRefCounts,
    pub immutableCOWBuffer: bool,
}
const _: () = {
    ["Size of swift_HeapObjectSideTableEntry"]
        [::std::mem::size_of::<swift_HeapObjectSideTableEntry>() - 48usize];
    ["Alignment of swift_HeapObjectSideTableEntry"]
        [::std::mem::align_of::<swift_HeapObjectSideTableEntry>() - 16usize];
    ["Offset of field: swift_HeapObjectSideTableEntry::object"]
        [::std::mem::offset_of!(swift_HeapObjectSideTableEntry, object) - 0usize];
    ["Offset of field: swift_HeapObjectSideTableEntry::refCounts"]
        [::std::mem::offset_of!(swift_HeapObjectSideTableEntry, refCounts) - 16usize];
    ["Offset of field: swift_HeapObjectSideTableEntry::immutableCOWBuffer"]
        [::std::mem::offset_of!(swift_HeapObjectSideTableEntry, immutableCOWBuffer) - 32usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct swift_TargetHeapMetadata {
    pub _address: u8,
}
pub type swift_HeapMetadata = swift_TargetHeapMetadata;
#[doc = " The Swift heap-object header.\n This must match RefCountedStructTy in IRGen."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct swift_HeapObject {
    #[doc = " This is always a valid pointer to a metadata object."]
    pub metadata: *const swift_HeapMetadata,
    pub refCounts: swift_InlineRefCounts,
}
const _: () = {
    ["Size of swift_HeapObject"][::std::mem::size_of::<swift_HeapObject>() - 16usize];
    ["Alignment of swift_HeapObject"][::std::mem::align_of::<swift_HeapObject>() - 8usize];
    ["Offset of field: swift_HeapObject::metadata"]
        [::std::mem::offset_of!(swift_HeapObject, metadata) - 0usize];
    ["Offset of field: swift_HeapObject::refCounts"]
        [::std::mem::offset_of!(swift_HeapObject, refCounts) - 8usize];
};
extern "C" {
    #[link_name = "\u{1}__ZNK5swift10HeapObject4dumpEv"]
    pub fn swift_HeapObject_dump(this: *const swift_HeapObject);
}
impl swift_HeapObject {
    #[inline]
    pub unsafe fn dump(&self) {
        swift_HeapObject_dump(self)
    }
}
extern "C" {
    #[link_name = "\u{1}__swift_instantiateInertHeapObject"]
    pub fn swift__swift_instantiateInertHeapObject(
        address: *mut ::std::os::raw::c_void,
        metadata: *const swift_HeapMetadata,
    );
}
extern "C" {
    #[link_name = "\u{1}_swift_retainCount"]
    pub fn swift_swift_retainCount(obj: *mut swift_HeapObject) -> __swift_size_t;
}
extern "C" {
    #[link_name = "\u{1}_swift_unownedRetainCount"]
    pub fn swift_swift_unownedRetainCount(obj: *mut swift_HeapObject) -> __swift_size_t;
}
extern "C" {
    #[link_name = "\u{1}_swift_weakRetainCount"]
    pub fn swift_swift_weakRetainCount(obj: *mut swift_HeapObject) -> __swift_size_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct swift_OpaqueValue {
    _unused: [u8; 0],
}
extern "C" {
    #[doc = " Allocates a new heap object.  The returned memory is\n uninitialized outside of the heap-object header.  The object\n has an initial retain count of 1, and its metadata is set to\n the given value.\n\n At some point \"soon after return\", it will become an\n invariant that metadata->getSize(returnValue) will equal\n requiredSize.\n\n Either aborts or throws a swift exception if the allocation fails.\n\n \\param requiredSize - the required size of the allocation,\n   including the header\n \\param requiredAlignmentMask - the required alignment of the allocation;\n   always one less than a power of 2 that's at least alignof(void*)\n \\return never null\n\n POSSIBILITIES: The argument order is fair game.  It may be useful\n to have a variant which guarantees zero-initialized memory."]
    #[link_name = "\u{1}_swift_allocObject"]
    pub fn swift_swift_allocObject(
        metadata: *const swift_HeapMetadata,
        requiredSize: usize,
        requiredAlignmentMask: usize,
    ) -> *mut swift_HeapObject;
}
extern "C" {
    #[doc = " Initializes the object header of a stack allocated object.\n\n \\param metadata - the object's metadata which is stored in the header\n \\param object - the pointer to the object's memory on the stack\n \\returns the passed object pointer."]
    #[link_name = "\u{1}_swift_initStackObject"]
    pub fn swift_swift_initStackObject(
        metadata: *const swift_HeapMetadata,
        object: *mut swift_HeapObject,
    ) -> *mut swift_HeapObject;
}
extern "C" {
    #[doc = " Initializes the object header of a static object which is statically\n allocated in the data section.\n\n \\param metadata - the object's metadata which is stored in the header\n \\param object - the address of the object in the data section. It is assumed\n        that at offset -1 there is a swift_once token allocated.\n \\returns the passed object pointer."]
    #[link_name = "\u{1}_swift_initStaticObject"]
    pub fn swift_swift_initStaticObject(
        metadata: *const swift_HeapMetadata,
        object: *mut swift_HeapObject,
    ) -> *mut swift_HeapObject;
}
extern "C" {
    #[doc = " Performs verification that the lifetime of a stack allocated object has\n ended. It aborts if the reference counts of the object indicate that the\n object did escape to some other location."]
    #[link_name = "\u{1}_swift_verifyEndOfLifetime"]
    pub fn swift_swift_verifyEndOfLifetime(object: *mut swift_HeapObject);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct swift_BoxPair {
    pub object: *mut swift_HeapObject,
    pub buffer: *mut swift_OpaqueValue,
}
const _: () = {
    ["Size of swift_BoxPair"][::std::mem::size_of::<swift_BoxPair>() - 16usize];
    ["Alignment of swift_BoxPair"][::std::mem::align_of::<swift_BoxPair>() - 8usize];
    ["Offset of field: swift_BoxPair::object"]
        [::std::mem::offset_of!(swift_BoxPair, object) - 0usize];
    ["Offset of field: swift_BoxPair::buffer"]
        [::std::mem::offset_of!(swift_BoxPair, buffer) - 8usize];
};
extern "swift" {
    #[doc = " Allocates a heap object that can contain a value of the given type.\n Returns a Box structure containing a HeapObject* pointer to the\n allocated object, and a pointer to the value inside the heap object.\n The value pointer points to an uninitialized buffer of size and alignment\n appropriate to store a value of the given type.\n The heap object has an initial retain count of 1, and its metadata is set\n such that destroying the heap object destroys the contained value."]
    #[link_name = "\u{1}_swift_allocBox"]
    pub fn swift_swift_allocBox(type_: *const swift_Metadata) -> swift_BoxPair;
}
extern "swift" {
    #[doc = " Performs a uniqueness check on the pointer to a box structure. If the check\n fails allocates a new box and stores the pointer in the buffer.\n\n  if (!isUnique(buffer[0]))\n    buffer[0] = swift_allocBox(type)"]
    #[link_name = "\u{1}_swift_makeBoxUnique"]
    pub fn swift_swift_makeBoxUnique(
        buffer: *mut swift_OpaqueValue,
        type_: *const swift_Metadata,
        alignMask: usize,
    ) -> swift_BoxPair;
}
extern "C" {
    #[doc = " Returns the address of a heap object representing all empty box types."]
    #[link_name = "\u{1}_swift_allocEmptyBox"]
    pub fn swift_swift_allocEmptyBox() -> *mut swift_HeapObject;
}
extern "C" {
    #[doc = " Atomically increments the retain count of an object.\n\n \\param object - may be null, in which case this is a no-op\n\n \\return object - we return the object because this enables tail call\n optimization and the argument register to be live through the call on\n architectures whose argument and return register is the same register.\n\n POSSIBILITIES: We may end up wanting a bunch of different variants:\n  - the general version which correctly handles null values, swift\n     objects, and ObjC objects\n    - a variant that assumes that its operand is a swift object\n      - a variant that can safely use non-atomic operations\n      - maybe a variant that can assume a non-null object\n It may also prove worthwhile to have this use a custom CC\n which preserves a larger set of registers."]
    #[link_name = "\u{1}_swift_retain"]
    pub fn swift_swift_retain(object: *mut swift_HeapObject) -> *mut swift_HeapObject;
}
extern "C" {
    #[link_name = "\u{1}_swift_retain_n"]
    pub fn swift_swift_retain_n(object: *mut swift_HeapObject, n: u32) -> *mut swift_HeapObject;
}
extern "C" {
    #[link_name = "\u{1}_swift_nonatomic_retain"]
    pub fn swift_swift_nonatomic_retain(object: *mut swift_HeapObject) -> *mut swift_HeapObject;
}
extern "C" {
    #[link_name = "\u{1}_swift_nonatomic_retain_n"]
    pub fn swift_swift_nonatomic_retain_n(
        object: *mut swift_HeapObject,
        n: u32,
    ) -> *mut swift_HeapObject;
}
extern "C" {
    #[doc = " Atomically increments the reference count of an object, unless it has\n already been destroyed. Returns nil if the object is dead."]
    #[link_name = "\u{1}_swift_tryRetain"]
    pub fn swift_swift_tryRetain(object: *mut swift_HeapObject) -> *mut swift_HeapObject;
}
extern "C" {
    #[doc = " Returns true if an object is in the process of being deallocated."]
    #[link_name = "\u{1}_swift_isDeallocating"]
    pub fn swift_swift_isDeallocating(object: *mut swift_HeapObject) -> bool;
}
extern "C" {
    #[doc = " Atomically decrements the retain count of an object.  If the\n retain count reaches zero, the object is destroyed as follows:\n\n   size_t allocSize = object->metadata->destroy(object);\n   if (allocSize) swift_deallocObject(object, allocSize);\n\n \\param object - may be null, in which case this is a no-op\n\n POSSIBILITIES: We may end up wanting a bunch of different variants:\n  - the general version which correctly handles null values, swift\n     objects, and ObjC objects\n    - a variant that assumes that its operand is a swift object\n      - a variant that can safely use non-atomic operations\n      - maybe a variant that can assume a non-null object\n It's unlikely that a custom CC would be beneficial here."]
    #[link_name = "\u{1}_swift_release"]
    pub fn swift_swift_release(object: *mut swift_HeapObject);
}
extern "C" {
    #[link_name = "\u{1}_swift_nonatomic_release"]
    pub fn swift_swift_nonatomic_release(object: *mut swift_HeapObject);
}
extern "C" {
    #[doc = " Atomically decrements the retain count of an object n times. If the retain\n count reaches zero, the object is destroyed"]
    #[link_name = "\u{1}_swift_release_n"]
    pub fn swift_swift_release_n(object: *mut swift_HeapObject, n: u32);
}
extern "C" {
    #[doc = " Sets the RC_DEALLOCATING_FLAG flag. This is done non-atomically.\n The strong reference count of \\p object must be 1 and no other thread may\n retain the object during executing this function."]
    #[link_name = "\u{1}_swift_setDeallocating"]
    pub fn swift_swift_setDeallocating(object: *mut swift_HeapObject);
}
extern "C" {
    #[link_name = "\u{1}_swift_nonatomic_release_n"]
    pub fn swift_swift_nonatomic_release_n(object: *mut swift_HeapObject, n: u32);
}
extern "C" {
    #[doc = " Is this pointer a non-null unique reference to an object?"]
    #[link_name = "\u{1}_swift_isUniquelyReferenced"]
    pub fn swift_swift_isUniquelyReferenced(arg1: *const ::std::os::raw::c_void) -> bool;
}
extern "C" {
    #[doc = " Is this non-null pointer a unique reference to an object?"]
    #[link_name = "\u{1}_swift_isUniquelyReferenced_nonNull"]
    pub fn swift_swift_isUniquelyReferenced_nonNull(arg1: *const ::std::os::raw::c_void) -> bool;
}
extern "C" {
    #[doc = " Is this non-null BridgeObject a unique reference to an object?"]
    #[link_name = "\u{1}_swift_isUniquelyReferenced_nonNull_bridgeObject"]
    pub fn swift_swift_isUniquelyReferenced_nonNull_bridgeObject(bits: usize) -> bool;
}
extern "C" {
    #[doc = " Is this pointer a non-null unique reference to an object\n that uses Swift reference counting?"]
    #[link_name = "\u{1}_swift_isUniquelyReferencedNonObjC"]
    pub fn swift_swift_isUniquelyReferencedNonObjC(arg1: *const ::std::os::raw::c_void) -> bool;
}
extern "C" {
    #[doc = " Is this non-null pointer a unique reference to an object\n that uses Swift reference counting?"]
    #[link_name = "\u{1}_swift_isUniquelyReferencedNonObjC_nonNull"]
    pub fn swift_swift_isUniquelyReferencedNonObjC_nonNull(
        arg1: *const ::std::os::raw::c_void,
    ) -> bool;
}
extern "C" {
    #[doc = " Is this non-null BridgeObject a unique reference to an object\n that uses Swift reference counting?"]
    #[link_name = "\u{1}_swift_isUniquelyReferencedNonObjC_nonNull_bridgeObject"]
    pub fn swift_swift_isUniquelyReferencedNonObjC_nonNull_bridgeObject(bits: usize) -> bool;
}
extern "C" {
    #[doc = " Is this native Swift pointer a non-null unique reference to\n an object?"]
    #[link_name = "\u{1}_swift_isUniquelyReferenced_native"]
    pub fn swift_swift_isUniquelyReferenced_native(arg1: *const swift_HeapObject) -> bool;
}
extern "C" {
    #[doc = " Is this non-null native Swift pointer a unique reference to\n an object?"]
    #[link_name = "\u{1}_swift_isUniquelyReferenced_nonNull_native"]
    pub fn swift_swift_isUniquelyReferenced_nonNull_native(arg1: *const swift_HeapObject) -> bool;
}
extern "C" {
    #[doc = " Is this native Swift pointer non-null and has a reference count greater than\n one.\n This runtime call will print an error message with file name and location if\n the closure is escaping but it will not abort.\n\n \\p type: 0 - withoutActuallyEscaping verification\n              Was the closure passed to a withoutActuallyEscaping block\n              escaped in the block?\n          1 - @objc closure sentinel verification\n              Was the closure passed to Objective-C escaped?"]
    #[link_name = "\u{1}_swift_isEscapingClosureAtFileLocation"]
    pub fn swift_swift_isEscapingClosureAtFileLocation(
        object: *const swift_HeapObject,
        filename: *const ::std::os::raw::c_uchar,
        filenameLength: i32,
        line: i32,
        column: i32,
        type_: ::std::os::raw::c_uint,
    ) -> bool;
}
extern "C" {
    #[doc = " Deallocate the given memory.\n\n It must have been returned by swift_allocObject and the strong reference\n must have the RC_DEALLOCATING_FLAG flag set, but otherwise the object is\n in an unknown state.\n\n \\param object - never null\n \\param allocatedSize - the allocated size of the object from the\n   program's perspective, i.e. the value\n \\param allocatedAlignMask - the alignment requirement that was passed\n   to allocObject\n\n POSSIBILITIES: It may be useful to have a variant which\n requires the object to have been fully zeroed from offsets\n sizeof(SwiftHeapObject) to allocatedSize."]
    #[link_name = "\u{1}_swift_deallocObject"]
    pub fn swift_swift_deallocObject(
        object: *mut swift_HeapObject,
        allocatedSize: usize,
        allocatedAlignMask: usize,
    );
}
extern "C" {
    #[doc = " Deallocate an uninitialized object with a strong reference count of +1.\n\n It must have been returned by swift_allocObject, but otherwise the object is\n in an unknown state.\n\n \\param object - never null\n \\param allocatedSize - the allocated size of the object from the\n   program's perspective, i.e. the value\n \\param allocatedAlignMask - the alignment requirement that was passed\n   to allocObject\n"]
    #[link_name = "\u{1}_swift_deallocUninitializedObject"]
    pub fn swift_swift_deallocUninitializedObject(
        object: *mut swift_HeapObject,
        allocatedSize: usize,
        allocatedAlignMask: usize,
    );
}
extern "C" {
    #[doc = " Deallocate the given memory.\n\n It must have been returned by swift_allocObject, possibly used as an\n Objective-C class instance, and the strong reference must have the\n RC_DEALLOCATING_FLAG flag set, but otherwise the object is in an unknown\n state.\n\n \\param object - never null\n \\param allocatedSize - the allocated size of the object from the\n   program's perspective, i.e. the value\n \\param allocatedAlignMask - the alignment requirement that was passed\n   to allocObject\n\n POSSIBILITIES: It may be useful to have a variant which\n requires the object to have been fully zeroed from offsets\n sizeof(SwiftHeapObject) to allocatedSize."]
    #[link_name = "\u{1}_swift_deallocClassInstance"]
    pub fn swift_swift_deallocClassInstance(
        object: *mut swift_HeapObject,
        allocatedSize: usize,
        allocatedAlignMask: usize,
    );
}
extern "C" {
    #[doc = " Deallocate the given memory after destroying instance variables.\n\n Destroys instance variables in classes more derived than the given metatype.\n\n It must have been returned by swift_allocObject, possibly used as an\n Objective-C class instance, and the strong reference must be equal to 1.\n\n \\param object - may be null\n \\param type - most derived class whose instance variables do not need to\n   be destroyed\n \\param allocatedSize - the allocated size of the object from the\n   program's perspective, i.e. the value\n \\param allocatedAlignMask - the alignment requirement that was passed\n   to allocObject"]
    #[link_name = "\u{1}_swift_deallocPartialClassInstance"]
    pub fn swift_swift_deallocPartialClassInstance(
        object: *mut swift_HeapObject,
        type_: *const swift_HeapMetadata,
        allocatedSize: usize,
        allocatedAlignMask: usize,
    );
}
extern "C" {
    #[doc = " Deallocate the given memory allocated by swift_allocBox; it was returned\n by swift_allocBox but is otherwise in an unknown state. The given Metadata\n pointer must be the same metadata pointer that was passed to swift_allocBox\n when the memory was allocated."]
    #[link_name = "\u{1}_swift_deallocBox"]
    pub fn swift_swift_deallocBox(object: *mut swift_HeapObject);
}
extern "C" {
    #[doc = " Project the value out of a box. `object` must have been allocated\n using `swift_allocBox`, or by the compiler using a statically-emitted\n box metadata object."]
    #[link_name = "\u{1}_swift_projectBox"]
    pub fn swift_swift_projectBox(object: *mut swift_HeapObject) -> *mut swift_OpaqueValue;
}
#[doc = " RAII object that wraps a Swift heap object and releases it upon\n destruction."]
#[repr(C)]
#[derive(Debug)]
pub struct swift_SwiftRAII {
    pub object: *mut swift_HeapObject,
}
const _: () = {
    ["Size of swift_SwiftRAII"][::std::mem::size_of::<swift_SwiftRAII>() - 8usize];
    ["Alignment of swift_SwiftRAII"][::std::mem::align_of::<swift_SwiftRAII>() - 8usize];
    ["Offset of field: swift_SwiftRAII::object"]
        [::std::mem::offset_of!(swift_SwiftRAII, object) - 0usize];
};
#[doc = " An unowned reference in memory.  This is ABI."]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct swift_UnownedReference {
    pub Value: *mut swift_HeapObject,
}
const _: () = {
    ["Size of swift_UnownedReference"][::std::mem::size_of::<swift_UnownedReference>() - 8usize];
    ["Alignment of swift_UnownedReference"]
        [::std::mem::align_of::<swift_UnownedReference>() - 8usize];
    ["Offset of field: swift_UnownedReference::Value"]
        [::std::mem::offset_of!(swift_UnownedReference, Value) - 0usize];
};
extern "C" {
    #[doc = " Increment the unowned retain count."]
    #[link_name = "\u{1}_swift_unownedRetain"]
    pub fn swift_swift_unownedRetain(value: *mut swift_HeapObject) -> *mut swift_HeapObject;
}
extern "C" {
    #[doc = " Decrement the unowned retain count."]
    #[link_name = "\u{1}_swift_unownedRelease"]
    pub fn swift_swift_unownedRelease(value: *mut swift_HeapObject);
}
extern "C" {
    #[doc = " Increment the unowned retain count."]
    #[link_name = "\u{1}_swift_nonatomic_unownedRetain"]
    pub fn swift_swift_nonatomic_unownedRetain(
        value: *mut swift_HeapObject,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[doc = " Decrement the unowned retain count."]
    #[link_name = "\u{1}_swift_nonatomic_unownedRelease"]
    pub fn swift_swift_nonatomic_unownedRelease(value: *mut swift_HeapObject);
}
extern "C" {
    #[doc = " Increment the unowned retain count by n."]
    #[link_name = "\u{1}_swift_unownedRetain_n"]
    pub fn swift_swift_unownedRetain_n(
        value: *mut swift_HeapObject,
        n: ::std::os::raw::c_int,
    ) -> *mut swift_HeapObject;
}
extern "C" {
    #[doc = " Decrement the unowned retain count by n."]
    #[link_name = "\u{1}_swift_unownedRelease_n"]
    pub fn swift_swift_unownedRelease_n(value: *mut swift_HeapObject, n: ::std::os::raw::c_int);
}
extern "C" {
    #[doc = " Increment the unowned retain count by n."]
    #[link_name = "\u{1}_swift_nonatomic_unownedRetain_n"]
    pub fn swift_swift_nonatomic_unownedRetain_n(
        value: *mut swift_HeapObject,
        n: ::std::os::raw::c_int,
    ) -> *mut swift_HeapObject;
}
extern "C" {
    #[doc = " Decrement the unowned retain count by n."]
    #[link_name = "\u{1}_swift_nonatomic_unownedRelease_n"]
    pub fn swift_swift_nonatomic_unownedRelease_n(
        value: *mut swift_HeapObject,
        n: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[doc = " Increment the strong retain count of an object, aborting if it has\n been deallocated."]
    #[link_name = "\u{1}_swift_unownedRetainStrong"]
    pub fn swift_swift_unownedRetainStrong(value: *mut swift_HeapObject) -> *mut swift_HeapObject;
}
extern "C" {
    #[doc = " Increment the strong retain count of an object, aborting if it has\n been deallocated."]
    #[link_name = "\u{1}_swift_nonatomic_unownedRetainStrong"]
    pub fn swift_swift_nonatomic_unownedRetainStrong(
        value: *mut swift_HeapObject,
    ) -> *mut swift_HeapObject;
}
extern "C" {
    #[doc = " Increment the strong retain count of an object which may have been\n deallocated, aborting if it has been deallocated, and decrement its\n unowned reference count."]
    #[link_name = "\u{1}_swift_unownedRetainStrongAndRelease"]
    pub fn swift_swift_unownedRetainStrongAndRelease(value: *mut swift_HeapObject);
}
extern "C" {
    #[doc = " Increment the strong retain count of an object which may have been\n deallocated, aborting if it has been deallocated, and decrement its\n unowned reference count."]
    #[link_name = "\u{1}_swift_nonatomic_unownedRetainStrongAndRelease"]
    pub fn swift_swift_nonatomic_unownedRetainStrongAndRelease(value: *mut swift_HeapObject);
}
extern "C" {
    #[doc = " Aborts if the object has been deallocated."]
    #[link_name = "\u{1}_swift_unownedCheck"]
    pub fn swift_swift_unownedCheck(value: *mut swift_HeapObject);
}
#[doc = "/\n/****************************** WEAK REFERENCES ******************************/\n/"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct swift_WeakReference {
    _unused: [u8; 0],
}
extern "C" {
    #[doc = " Initialize a weak reference.\n\n \\param ref - never null\n \\param value - can be null\n \\return ref"]
    #[link_name = "\u{1}_swift_weakInit"]
    pub fn swift_swift_weakInit(
        ref_: *mut swift_WeakReference,
        value: *mut swift_HeapObject,
    ) -> *mut swift_WeakReference;
}
extern "C" {
    #[doc = " Assign a new value to a weak reference.\n\n \\param ref - never null\n \\param value - can be null\n \\return ref"]
    #[link_name = "\u{1}_swift_weakAssign"]
    pub fn swift_swift_weakAssign(
        ref_: *mut swift_WeakReference,
        value: *mut swift_HeapObject,
    ) -> *mut swift_WeakReference;
}
extern "C" {
    #[doc = " Load a value from a weak reference.  If the current value is a\n non-null object that has begun deallocation, returns null;\n otherwise, retains the object before returning.\n\n \\param ref - never null\n \\return can be null"]
    #[link_name = "\u{1}_swift_weakLoadStrong"]
    pub fn swift_swift_weakLoadStrong(ref_: *mut swift_WeakReference) -> *mut swift_HeapObject;
}
extern "C" {
    #[doc = " Load a value from a weak reference as if by swift_weakLoadStrong,\n but leaving the reference in an uninitialized state.\n\n \\param ref - never null\n \\return can be null"]
    #[link_name = "\u{1}_swift_weakTakeStrong"]
    pub fn swift_swift_weakTakeStrong(ref_: *mut swift_WeakReference) -> *mut swift_HeapObject;
}
extern "C" {
    #[doc = " Destroy a weak reference.\n\n \\param ref - never null, but can refer to a null object"]
    #[link_name = "\u{1}_swift_weakDestroy"]
    pub fn swift_swift_weakDestroy(ref_: *mut swift_WeakReference);
}
extern "C" {
    #[doc = " Copy initialize a weak reference.\n\n \\param dest - never null, but can refer to a null object\n \\param src - never null, but can refer to a null object\n \\return dest"]
    #[link_name = "\u{1}_swift_weakCopyInit"]
    pub fn swift_swift_weakCopyInit(
        dest: *mut swift_WeakReference,
        src: *mut swift_WeakReference,
    ) -> *mut swift_WeakReference;
}
extern "C" {
    #[doc = " Take initialize a weak reference.\n\n \\param dest - never null, but can refer to a null object\n \\param src - never null, but can refer to a null object\n \\return dest"]
    #[link_name = "\u{1}_swift_weakTakeInit"]
    pub fn swift_swift_weakTakeInit(
        dest: *mut swift_WeakReference,
        src: *mut swift_WeakReference,
    ) -> *mut swift_WeakReference;
}
extern "C" {
    #[doc = " Copy assign a weak reference.\n\n \\param dest - never null, but can refer to a null object\n \\param src - never null, but can refer to a null object\n \\return dest"]
    #[link_name = "\u{1}_swift_weakCopyAssign"]
    pub fn swift_swift_weakCopyAssign(
        dest: *mut swift_WeakReference,
        src: *mut swift_WeakReference,
    ) -> *mut swift_WeakReference;
}
extern "C" {
    #[doc = " Take assign a weak reference.\n\n \\param dest - never null, but can refer to a null object\n \\param src - never null, but can refer to a null object\n \\return dest"]
    #[link_name = "\u{1}_swift_weakTakeAssign"]
    pub fn swift_swift_weakTakeAssign(
        dest: *mut swift_WeakReference,
        src: *mut swift_WeakReference,
    ) -> *mut swift_WeakReference;
}
extern "C" {
    #[doc = "/\n/************************* OTHER REFERENCE-COUNTING **************************/\n/"]
    #[link_name = "\u{1}_swift_bridgeObjectRetain"]
    pub fn swift_swift_bridgeObjectRetain(
        value: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[doc = " Increment the strong retain count of a bridged object by n."]
    #[link_name = "\u{1}_swift_bridgeObjectRetain_n"]
    pub fn swift_swift_bridgeObjectRetain_n(
        value: *mut ::std::os::raw::c_void,
        n: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_swift_nonatomic_bridgeObjectRetain"]
    pub fn swift_swift_nonatomic_bridgeObjectRetain(
        value: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[doc = " Increment the strong retain count of a bridged object by n."]
    #[link_name = "\u{1}_swift_nonatomic_bridgeObjectRetain_n"]
    pub fn swift_swift_nonatomic_bridgeObjectRetain_n(
        value: *mut ::std::os::raw::c_void,
        n: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[doc = " Increment the strong retain count of an object which might not be a native\n Swift object."]
    #[link_name = "\u{1}_swift_unknownObjectRetain"]
    pub fn swift_swift_unknownObjectRetain(
        value: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[doc = " Increment the strong retain count of an object which might not be a native\n Swift object by n."]
    #[link_name = "\u{1}_swift_unknownObjectRetain_n"]
    pub fn swift_swift_unknownObjectRetain_n(
        value: *mut ::std::os::raw::c_void,
        n: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[doc = " Increment the strong retain count of an object which might not be a native\n Swift object."]
    #[link_name = "\u{1}_swift_nonatomic_unknownObjectRetain"]
    pub fn swift_swift_nonatomic_unknownObjectRetain(
        value: *mut ::std::os::raw::c_void,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[doc = " Increment the strong retain count of an object which might not be a native\n Swift object by n."]
    #[link_name = "\u{1}_swift_nonatomic_unknownObjectRetain_n"]
    pub fn swift_swift_nonatomic_unknownObjectRetain_n(
        value: *mut ::std::os::raw::c_void,
        n: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}_swift_bridgeObjectRelease"]
    pub fn swift_swift_bridgeObjectRelease(value: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[doc = " Decrement the strong retain count of a bridged object by n."]
    #[link_name = "\u{1}_swift_bridgeObjectRelease_n"]
    pub fn swift_swift_bridgeObjectRelease_n(
        value: *mut ::std::os::raw::c_void,
        n: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[link_name = "\u{1}_swift_nonatomic_bridgeObjectRelease"]
    pub fn swift_swift_nonatomic_bridgeObjectRelease(value: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[doc = " Decrement the strong retain count of a bridged object by n."]
    #[link_name = "\u{1}_swift_nonatomic_bridgeObjectRelease_n"]
    pub fn swift_swift_nonatomic_bridgeObjectRelease_n(
        value: *mut ::std::os::raw::c_void,
        n: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[doc = " Decrement the strong retain count of an object which might not be a native\n Swift object."]
    #[link_name = "\u{1}_swift_unknownObjectRelease"]
    pub fn swift_swift_unknownObjectRelease(value: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[doc = " Decrement the strong retain count of an object which might not be a native\n Swift object by n."]
    #[link_name = "\u{1}_swift_unknownObjectRelease_n"]
    pub fn swift_swift_unknownObjectRelease_n(
        value: *mut ::std::os::raw::c_void,
        n: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[doc = " Decrement the strong retain count of an object which might not be a native\n Swift object."]
    #[link_name = "\u{1}_swift_nonatomic_unknownObjectRelease"]
    pub fn swift_swift_nonatomic_unknownObjectRelease(value: *mut ::std::os::raw::c_void);
}
extern "C" {
    #[doc = " Decrement the strong retain count of an object which might not be a native\n Swift object by n."]
    #[link_name = "\u{1}_swift_nonatomic_unknownObjectRelease_n"]
    pub fn swift_swift_nonatomic_unknownObjectRelease_n(
        value: *mut ::std::os::raw::c_void,
        n: ::std::os::raw::c_int,
    );
}
extern "C" {
    #[doc = " Initialize a weak reference.\n\n \\param ref - never null\n \\param value - not necessarily a native Swift object; can be null\n \\return ref"]
    #[link_name = "\u{1}_swift_unknownObjectWeakInit"]
    pub fn swift_swift_unknownObjectWeakInit(
        ref_: *mut swift_WeakReference,
        value: *mut ::std::os::raw::c_void,
    ) -> *mut swift_WeakReference;
}
extern "C" {
    #[doc = " Assign a new value to a weak reference.\n\n \\param ref - never null\n \\param value - not necessarily a native Swift object; can be null\n \\return ref"]
    #[link_name = "\u{1}_swift_unknownObjectWeakAssign"]
    pub fn swift_swift_unknownObjectWeakAssign(
        ref_: *mut swift_WeakReference,
        value: *mut ::std::os::raw::c_void,
    ) -> *mut swift_WeakReference;
}
extern "C" {
    #[doc = " Load a value from a weak reference, much like swift_weakLoadStrong\n but without requiring the variable to refer to a native Swift object.\n\n \\param ref - never null\n \\return can be null"]
    #[link_name = "\u{1}_swift_unknownObjectWeakLoadStrong"]
    pub fn swift_swift_unknownObjectWeakLoadStrong(
        ref_: *mut swift_WeakReference,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[doc = " Load a value from a weak reference as if by\n swift_unknownObjectWeakLoadStrong, but leaving the reference in an\n uninitialized state.\n\n \\param ref - never null\n \\return can be null"]
    #[link_name = "\u{1}_swift_unknownObjectWeakTakeStrong"]
    pub fn swift_swift_unknownObjectWeakTakeStrong(
        ref_: *mut swift_WeakReference,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[doc = " Destroy a weak reference variable that might not refer to a native\n Swift object."]
    #[link_name = "\u{1}_swift_unknownObjectWeakDestroy"]
    pub fn swift_swift_unknownObjectWeakDestroy(object: *mut swift_WeakReference);
}
extern "C" {
    #[doc = " Copy-initialize a weak reference variable from one that might not\n refer to a native Swift object.\n \\return dest"]
    #[link_name = "\u{1}_swift_unknownObjectWeakCopyInit"]
    pub fn swift_swift_unknownObjectWeakCopyInit(
        dest: *mut swift_WeakReference,
        src: *mut swift_WeakReference,
    ) -> *mut swift_WeakReference;
}
extern "C" {
    #[doc = " Take-initialize a weak reference variable from one that might not\n refer to a native Swift object.\n \\return dest"]
    #[link_name = "\u{1}_swift_unknownObjectWeakTakeInit"]
    pub fn swift_swift_unknownObjectWeakTakeInit(
        dest: *mut swift_WeakReference,
        src: *mut swift_WeakReference,
    ) -> *mut swift_WeakReference;
}
extern "C" {
    #[doc = " Copy-assign a weak reference variable from another when either\n or both variables might not refer to a native Swift object.\n \\return dest"]
    #[link_name = "\u{1}_swift_unknownObjectWeakCopyAssign"]
    pub fn swift_swift_unknownObjectWeakCopyAssign(
        dest: *mut swift_WeakReference,
        src: *mut swift_WeakReference,
    ) -> *mut swift_WeakReference;
}
extern "C" {
    #[doc = " Take-assign a weak reference variable from another when either\n or both variables might not refer to a native Swift object.\n \\return dest"]
    #[link_name = "\u{1}_swift_unknownObjectWeakTakeAssign"]
    pub fn swift_swift_unknownObjectWeakTakeAssign(
        dest: *mut swift_WeakReference,
        src: *mut swift_WeakReference,
    ) -> *mut swift_WeakReference;
}
extern "C" {
    #[doc = " Initialize an unowned reference to an object with unknown reference\n counting.\n \\return ref"]
    #[link_name = "\u{1}_swift_unknownObjectUnownedInit"]
    pub fn swift_swift_unknownObjectUnownedInit(
        ref_: *mut swift_UnownedReference,
        value: *mut ::std::os::raw::c_void,
    ) -> *mut swift_UnownedReference;
}
extern "C" {
    #[doc = " Assign to an unowned reference holding an object with unknown reference\n counting.\n \\return ref"]
    #[link_name = "\u{1}_swift_unknownObjectUnownedAssign"]
    pub fn swift_swift_unknownObjectUnownedAssign(
        ref_: *mut swift_UnownedReference,
        value: *mut ::std::os::raw::c_void,
    ) -> *mut swift_UnownedReference;
}
extern "C" {
    #[doc = " Load from an unowned reference to an object with unknown reference\n counting."]
    #[link_name = "\u{1}_swift_unknownObjectUnownedLoadStrong"]
    pub fn swift_swift_unknownObjectUnownedLoadStrong(
        ref_: *mut swift_UnownedReference,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[doc = " Take from an unowned reference to an object with unknown reference\n counting."]
    #[link_name = "\u{1}_swift_unknownObjectUnownedTakeStrong"]
    pub fn swift_swift_unknownObjectUnownedTakeStrong(
        ref_: *mut swift_UnownedReference,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[doc = " Destroy an unowned reference to an object with unknown reference counting."]
    #[link_name = "\u{1}_swift_unknownObjectUnownedDestroy"]
    pub fn swift_swift_unknownObjectUnownedDestroy(ref_: *mut swift_UnownedReference);
}
extern "C" {
    #[doc = " Copy-initialize an unowned reference variable from one that might not\n refer to a native Swift object.\n \\return dest"]
    #[link_name = "\u{1}_swift_unknownObjectUnownedCopyInit"]
    pub fn swift_swift_unknownObjectUnownedCopyInit(
        dest: *mut swift_UnownedReference,
        src: *mut swift_UnownedReference,
    ) -> *mut swift_UnownedReference;
}
extern "C" {
    #[doc = " Take-initialize an unowned reference variable from one that might not\n refer to a native Swift object."]
    #[link_name = "\u{1}_swift_unknownObjectUnownedTakeInit"]
    pub fn swift_swift_unknownObjectUnownedTakeInit(
        dest: *mut swift_UnownedReference,
        src: *mut swift_UnownedReference,
    ) -> *mut swift_UnownedReference;
}
extern "C" {
    #[doc = " Copy-assign an unowned reference variable from another when either\n or both variables might not refer to a native Swift object.\n \\return dest"]
    #[link_name = "\u{1}_swift_unknownObjectUnownedCopyAssign"]
    pub fn swift_swift_unknownObjectUnownedCopyAssign(
        dest: *mut swift_UnownedReference,
        src: *mut swift_UnownedReference,
    ) -> *mut swift_UnownedReference;
}
extern "C" {
    #[doc = " Take-assign an unowned reference variable from another when either\n or both variables might not refer to a native Swift object.\n \\return dest"]
    #[link_name = "\u{1}_swift_unknownObjectUnownedTakeAssign"]
    pub fn swift_swift_unknownObjectUnownedTakeAssign(
        dest: *mut swift_UnownedReference,
        src: *mut swift_UnownedReference,
    ) -> *mut swift_UnownedReference;
}
extern "C" {
    #[doc = " Return `*ref == value` when ref might not refer to a native Swift object.\n Does not halt when *ref is a dead object as long as *ref != value."]
    #[link_name = "\u{1}_swift_unknownObjectUnownedIsEqual"]
    pub fn swift_swift_unknownObjectUnownedIsEqual(
        ref_: *mut swift_UnownedReference,
        value: *mut ::std::os::raw::c_void,
    ) -> bool;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct swift_TypeNamePair {
    pub data: *const ::std::os::raw::c_char,
    pub length: usize,
}
const _: () = {
    ["Size of swift_TypeNamePair"][::std::mem::size_of::<swift_TypeNamePair>() - 16usize];
    ["Alignment of swift_TypeNamePair"][::std::mem::align_of::<swift_TypeNamePair>() - 8usize];
    ["Offset of field: swift_TypeNamePair::data"]
        [::std::mem::offset_of!(swift_TypeNamePair, data) - 0usize];
    ["Offset of field: swift_TypeNamePair::length"]
        [::std::mem::offset_of!(swift_TypeNamePair, length) - 8usize];
};
extern "swift" {
    #[doc = " Return the name of a Swift type represented by a metadata object.\n func _getTypeName(_ type: Any.Type, qualified: Bool)\n   -> (UnsafePointer<UInt8>, Int)"]
    #[link_name = "\u{1}_swift_getTypeName"]
    pub fn swift_swift_getTypeName(
        type_: *const swift_Metadata,
        qualified: bool,
    ) -> swift_TypeNamePair;
}
extern "swift" {
    #[doc = " Return the mangled name of a Swift type represented by a metadata object.\n func _getMangledTypeName(_ type: Any.Type)\n   -> (UnsafePointer<UInt8>, Int)"]
    #[link_name = "\u{1}_swift_getFunctionFullNameFromMangledName"]
    pub fn swift_swift_getFunctionFullNameFromMangledName(
        mangledNameStart: *const ::std::os::raw::c_char,
        mangledNameLength: usize,
    ) -> swift_TypeNamePair;
}
extern "swift" {
    #[doc = " Return the human-readable full name of the mangled function name passed in.\n func _getMangledTypeName(_ mangledName: UnsafePointer<UInt8>,\n                          mangledNameLength: UInt)\n   -> (UnsafePointer<UInt8>, Int)"]
    #[link_name = "\u{1}_swift_getMangledTypeName"]
    pub fn swift_swift_getMangledTypeName(type_: *const swift_Metadata) -> swift_TypeNamePair;
}
pub type u_char = ::std::os::raw::c_uchar;
pub type u_short = ::std::os::raw::c_ushort;
pub type u_int = ::std::os::raw::c_uint;
pub type u_long = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type u_quad_t = u_int64_t;
pub type quad_t = i64;
pub type qaddr_t = *mut quad_t;
pub type caddr_t = *mut ::std::os::raw::c_char;
pub type daddr_t = i32;
pub type fixpt_t = u_int32_t;
pub type blkcnt_t = __darwin_blkcnt_t;
pub type blksize_t = __darwin_blksize_t;
pub type gid_t = __darwin_gid_t;
pub type in_addr_t = __uint32_t;
pub type in_port_t = __uint16_t;
pub type ino_t = __darwin_ino_t;
pub type ino64_t = __darwin_ino64_t;
pub type key_t = __int32_t;
pub type nlink_t = __uint16_t;
pub type off_t = __darwin_off_t;
pub type segsz_t = i32;
pub type swblk_t = i32;
pub type clock_t = __darwin_clock_t;
pub type time_t = __darwin_time_t;
pub type useconds_t = __darwin_useconds_t;
pub type suseconds_t = __darwin_suseconds_t;
pub type rsize_t = __darwin_size_t;
pub type errno_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fd_set {
    pub fds_bits: [__int32_t; 32usize],
}
const _: () = {
    ["Size of fd_set"][::std::mem::size_of::<fd_set>() - 128usize];
    ["Alignment of fd_set"][::std::mem::align_of::<fd_set>() - 4usize];
    ["Offset of field: fd_set::fds_bits"][::std::mem::offset_of!(fd_set, fds_bits) - 0usize];
};
extern "C" {
    pub fn __darwin_check_fd_set_overflow(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_void,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub type fd_mask = __int32_t;
pub type pthread_cond_t = __darwin_pthread_cond_t;
pub type pthread_condattr_t = __darwin_pthread_condattr_t;
pub type pthread_mutex_t = __darwin_pthread_mutex_t;
pub type pthread_mutexattr_t = __darwin_pthread_mutexattr_t;
pub type pthread_once_t = __darwin_pthread_once_t;
pub type pthread_rwlock_t = __darwin_pthread_rwlock_t;
pub type pthread_rwlockattr_t = __darwin_pthread_rwlockattr_t;
pub type pthread_t = __darwin_pthread_t;
pub type pthread_key_t = __darwin_pthread_key_t;
pub type fsblkcnt_t = __darwin_fsblkcnt_t;
pub type fsfilcnt_t = __darwin_fsfilcnt_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct objc_class {
    _unused: [u8; 0],
}
pub type Class = *mut objc_class;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct objc_object {
    pub isa: Class,
}
const _: () = {
    ["Size of objc_object"][::std::mem::size_of::<objc_object>() - 8usize];
    ["Alignment of objc_object"][::std::mem::align_of::<objc_object>() - 8usize];
    ["Offset of field: objc_object::isa"][::std::mem::offset_of!(objc_object, isa) - 0usize];
};
pub type id = *mut objc_object;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct objc_selector {
    _unused: [u8; 0],
}
pub type SEL = *mut objc_selector;
pub type IMP = ::std::option::Option<unsafe extern "C" fn()>;
pub type BOOL = bool;
pub type objc_zone_t = *mut _malloc_zone_t;
extern "C" {
    pub fn sel_getName(sel: SEL) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn sel_registerName(str_: *const ::std::os::raw::c_char) -> SEL;
}
extern "C" {
    pub fn object_getClassName(obj: id) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn object_getIndexedIvars(obj: id) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn sel_isMapped(sel: SEL) -> BOOL;
}
extern "C" {
    pub fn sel_getUid(str_: *const ::std::os::raw::c_char) -> SEL;
}
pub type objc_objectptr_t = *const ::std::os::raw::c_void;
extern "C" {
    pub fn objc_retainedObject(obj: objc_objectptr_t) -> id;
}
extern "C" {
    pub fn objc_unretainedObject(obj: objc_objectptr_t) -> id;
}
extern "C" {
    pub fn objc_unretainedPointer(obj: id) -> objc_objectptr_t;
}
pub type __swift_int64_t = ::std::os::raw::c_longlong;
pub type __swift_uint64_t = ::std::os::raw::c_ulonglong;
pub type __swift_int32_t = ::std::os::raw::c_int;
pub type __swift_uint32_t = ::std::os::raw::c_uint;
pub type __swift_int16_t = ::std::os::raw::c_short;
pub type __swift_uint16_t = ::std::os::raw::c_ushort;
pub type __swift_int8_t = ::std::os::raw::c_schar;
pub type __swift_uint8_t = ::std::os::raw::c_uchar;
pub type __swift_intptr_t = __swift_int64_t;
pub type __swift_uintptr_t = __swift_uint64_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct InlineRefCountsPlaceholder {
    pub refCounts: __swift_uintptr_t,
}
const _: () = {
    ["Size of InlineRefCountsPlaceholder"]
        [::std::mem::size_of::<InlineRefCountsPlaceholder>() - 8usize];
    ["Alignment of InlineRefCountsPlaceholder"]
        [::std::mem::align_of::<InlineRefCountsPlaceholder>() - 8usize];
    ["Offset of field: InlineRefCountsPlaceholder::refCounts"]
        [::std::mem::offset_of!(InlineRefCountsPlaceholder, refCounts) - 0usize];
};
extern "C" {
    pub fn memchr(
        __s: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memcmp(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn memcpy(
        __dst: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memmove(
        __dst: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __len: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memset(
        __b: *mut ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __len: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn strcat(
        __s1: *mut ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcoll(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcpy(
        __dst: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strcspn(
        __s: *const ::std::os::raw::c_char,
        __charset: *const ::std::os::raw::c_char,
    ) -> usize;
}
extern "C" {
    pub fn strerror(__errnum: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strlen(__s: *const ::std::os::raw::c_char) -> usize;
}
extern "C" {
    pub fn strncat(
        __s1: *mut ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncpy(
        __dst: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strpbrk(
        __s: *const ::std::os::raw::c_char,
        __charset: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strrchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strspn(
        __s: *const ::std::os::raw::c_char,
        __charset: *const ::std::os::raw::c_char,
    ) -> usize;
}
extern "C" {
    pub fn strstr(
        __big: *const ::std::os::raw::c_char,
        __little: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strtok(
        __str: *mut ::std::os::raw::c_char,
        __sep: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strxfrm(
        __s1: *mut ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> usize;
}
extern "C" {
    pub fn strtok_r(
        __str: *mut ::std::os::raw::c_char,
        __sep: *const ::std::os::raw::c_char,
        __lasts: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strerror_r(
        __errnum: ::std::os::raw::c_int,
        __strerrbuf: *mut ::std::os::raw::c_char,
        __buflen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strdup(__s1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn memccpy(
        __dst: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn stpcpy(
        __dst: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn stpncpy(
        __dst: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strndup(__s1: *const ::std::os::raw::c_char, __n: usize) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strnlen(__s1: *const ::std::os::raw::c_char, __n: usize) -> usize;
}
extern "C" {
    pub fn strsignal(__sig: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn memmem(
        __big: *const ::std::os::raw::c_void,
        __big_len: usize,
        __little: *const ::std::os::raw::c_void,
        __little_len: usize,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn memset_pattern4(
        __b: *mut ::std::os::raw::c_void,
        __pattern4: *const ::std::os::raw::c_void,
        __len: usize,
    );
}
extern "C" {
    pub fn memset_pattern8(
        __b: *mut ::std::os::raw::c_void,
        __pattern8: *const ::std::os::raw::c_void,
        __len: usize,
    );
}
extern "C" {
    pub fn memset_pattern16(
        __b: *mut ::std::os::raw::c_void,
        __pattern16: *const ::std::os::raw::c_void,
        __len: usize,
    );
}
extern "C" {
    pub fn strcasestr(
        __big: *const ::std::os::raw::c_char,
        __little: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strnstr(
        __big: *const ::std::os::raw::c_char,
        __little: *const ::std::os::raw::c_char,
        __len: usize,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strlcat(
        __dst: *mut ::std::os::raw::c_char,
        __source: *const ::std::os::raw::c_char,
        __size: usize,
    ) -> usize;
}
extern "C" {
    pub fn strlcpy(
        __dst: *mut ::std::os::raw::c_char,
        __source: *const ::std::os::raw::c_char,
        __size: usize,
    ) -> usize;
}
extern "C" {
    pub fn strmode(__mode: ::std::os::raw::c_int, __bp: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn strsep(
        __stringp: *mut *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn swab(
        arg1: *const ::std::os::raw::c_void,
        arg2: *mut ::std::os::raw::c_void,
        arg3: isize,
    );
}
extern "C" {
    pub fn timingsafe_bcmp(
        __b1: *const ::std::os::raw::c_void,
        __b2: *const ::std::os::raw::c_void,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strsignal_r(
        __sig: ::std::os::raw::c_int,
        __strsignalbuf: *mut ::std::os::raw::c_char,
        __buflen: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bcmp(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
        arg3: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn bcopy(
        arg1: *const ::std::os::raw::c_void,
        arg2: *mut ::std::os::raw::c_void,
        arg3: usize,
    );
}
extern "C" {
    pub fn bzero(arg1: *mut ::std::os::raw::c_void, arg2: usize);
}
extern "C" {
    pub fn index(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn rindex(
        arg1: *const ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ffs(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcasecmp(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strncasecmp(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsl(arg1: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ffsll(arg1: ::std::os::raw::c_longlong) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fls(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flsl(arg1: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flsll(arg1: ::std::os::raw::c_longlong) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __darwin_time_t,
    pub tv_nsec: ::std::os::raw::c_long,
}
const _: () = {
    ["Size of timespec"][::std::mem::size_of::<timespec>() - 16usize];
    ["Alignment of timespec"][::std::mem::align_of::<timespec>() - 8usize];
    ["Offset of field: timespec::tv_sec"][::std::mem::offset_of!(timespec, tv_sec) - 0usize];
    ["Offset of field: timespec::tv_nsec"][::std::mem::offset_of!(timespec, tv_nsec) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tm {
    pub tm_sec: ::std::os::raw::c_int,
    pub tm_min: ::std::os::raw::c_int,
    pub tm_hour: ::std::os::raw::c_int,
    pub tm_mday: ::std::os::raw::c_int,
    pub tm_mon: ::std::os::raw::c_int,
    pub tm_year: ::std::os::raw::c_int,
    pub tm_wday: ::std::os::raw::c_int,
    pub tm_yday: ::std::os::raw::c_int,
    pub tm_isdst: ::std::os::raw::c_int,
    pub tm_gmtoff: ::std::os::raw::c_long,
    pub tm_zone: *mut ::std::os::raw::c_char,
}
const _: () = {
    ["Size of tm"][::std::mem::size_of::<tm>() - 56usize];
    ["Alignment of tm"][::std::mem::align_of::<tm>() - 8usize];
    ["Offset of field: tm::tm_sec"][::std::mem::offset_of!(tm, tm_sec) - 0usize];
    ["Offset of field: tm::tm_min"][::std::mem::offset_of!(tm, tm_min) - 4usize];
    ["Offset of field: tm::tm_hour"][::std::mem::offset_of!(tm, tm_hour) - 8usize];
    ["Offset of field: tm::tm_mday"][::std::mem::offset_of!(tm, tm_mday) - 12usize];
    ["Offset of field: tm::tm_mon"][::std::mem::offset_of!(tm, tm_mon) - 16usize];
    ["Offset of field: tm::tm_year"][::std::mem::offset_of!(tm, tm_year) - 20usize];
    ["Offset of field: tm::tm_wday"][::std::mem::offset_of!(tm, tm_wday) - 24usize];
    ["Offset of field: tm::tm_yday"][::std::mem::offset_of!(tm, tm_yday) - 28usize];
    ["Offset of field: tm::tm_isdst"][::std::mem::offset_of!(tm, tm_isdst) - 32usize];
    ["Offset of field: tm::tm_gmtoff"][::std::mem::offset_of!(tm, tm_gmtoff) - 40usize];
    ["Offset of field: tm::tm_zone"][::std::mem::offset_of!(tm, tm_zone) - 48usize];
};
extern "C" {
    pub static mut tzname: [*mut ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub static mut getdate_err: ::std::os::raw::c_int;
}
extern "C" {
    pub static mut timezone: ::std::os::raw::c_long;
}
extern "C" {
    pub static mut daylight: ::std::os::raw::c_int;
}
extern "C" {
    pub fn asctime(arg1: *const tm) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn clock() -> clock_t;
}
extern "C" {
    pub fn ctime(arg1: *const time_t) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn difftime(arg1: time_t, arg2: time_t) -> f64;
}
extern "C" {
    pub fn getdate(arg1: *const ::std::os::raw::c_char) -> *mut tm;
}
extern "C" {
    pub fn gmtime(arg1: *const time_t) -> *mut tm;
}
extern "C" {
    pub fn localtime(arg1: *const time_t) -> *mut tm;
}
extern "C" {
    pub fn mktime(arg1: *mut tm) -> time_t;
}
extern "C" {
    pub fn strftime(
        arg1: *mut ::std::os::raw::c_char,
        arg2: usize,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const tm,
    ) -> usize;
}
extern "C" {
    pub fn strptime(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut tm,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn time(arg1: *mut time_t) -> time_t;
}
extern "C" {
    pub fn tzset();
}
extern "C" {
    pub fn asctime_r(
        arg1: *const tm,
        arg2: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ctime_r(
        arg1: *const time_t,
        arg2: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn gmtime_r(arg1: *const time_t, arg2: *mut tm) -> *mut tm;
}
extern "C" {
    pub fn localtime_r(arg1: *const time_t, arg2: *mut tm) -> *mut tm;
}
extern "C" {
    pub fn posix2time(arg1: time_t) -> time_t;
}
extern "C" {
    pub fn tzsetwall();
}
extern "C" {
    pub fn time2posix(arg1: time_t) -> time_t;
}
extern "C" {
    pub fn timelocal(arg1: *mut tm) -> time_t;
}
extern "C" {
    pub fn timegm(arg1: *mut tm) -> time_t;
}
extern "C" {
    pub fn nanosleep(__rqtp: *const timespec, __rmtp: *mut timespec) -> ::std::os::raw::c_int;
}
pub const clockid_t__CLOCK_REALTIME: clockid_t = 0;
pub const clockid_t__CLOCK_MONOTONIC: clockid_t = 6;
pub const clockid_t__CLOCK_MONOTONIC_RAW: clockid_t = 4;
pub const clockid_t__CLOCK_MONOTONIC_RAW_APPROX: clockid_t = 5;
pub const clockid_t__CLOCK_UPTIME_RAW: clockid_t = 8;
pub const clockid_t__CLOCK_UPTIME_RAW_APPROX: clockid_t = 9;
pub const clockid_t__CLOCK_PROCESS_CPUTIME_ID: clockid_t = 12;
pub const clockid_t__CLOCK_THREAD_CPUTIME_ID: clockid_t = 16;
pub type clockid_t = ::std::os::raw::c_uint;
extern "C" {
    pub fn clock_getres(__clock_id: clockid_t, __res: *mut timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_gettime(__clock_id: clockid_t, __tp: *mut timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn clock_gettime_nsec_np(__clock_id: clockid_t) -> __uint64_t;
}
extern "C" {
    pub fn clock_settime(__clock_id: clockid_t, __tp: *const timespec) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn timespec_get(ts: *mut timespec, base: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __error() -> *mut ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sched_param {
    pub sched_priority: ::std::os::raw::c_int,
    pub __opaque: [::std::os::raw::c_char; 4usize],
}
const _: () = {
    ["Size of sched_param"][::std::mem::size_of::<sched_param>() - 8usize];
    ["Alignment of sched_param"][::std::mem::align_of::<sched_param>() - 4usize];
    ["Offset of field: sched_param::sched_priority"]
        [::std::mem::offset_of!(sched_param, sched_priority) - 0usize];
    ["Offset of field: sched_param::__opaque"]
        [::std::mem::offset_of!(sched_param, __opaque) - 4usize];
};
extern "C" {
    pub fn sched_yield() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_get_priority_min(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sched_get_priority_max(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
pub const qos_class_t_QOS_CLASS_USER_INTERACTIVE: qos_class_t = 33;
pub const qos_class_t_QOS_CLASS_USER_INITIATED: qos_class_t = 25;
pub const qos_class_t_QOS_CLASS_DEFAULT: qos_class_t = 21;
pub const qos_class_t_QOS_CLASS_UTILITY: qos_class_t = 17;
pub const qos_class_t_QOS_CLASS_BACKGROUND: qos_class_t = 9;
pub const qos_class_t_QOS_CLASS_UNSPECIFIED: qos_class_t = 0;
pub type qos_class_t = ::std::os::raw::c_uint;
extern "C" {
    pub fn qos_class_self() -> qos_class_t;
}
extern "C" {
    pub fn qos_class_main() -> qos_class_t;
}
extern "C" {
    pub fn pthread_attr_set_qos_class_np(
        __attr: *mut pthread_attr_t,
        __qos_class: qos_class_t,
        __relative_priority: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_get_qos_class_np(
        __attr: *mut pthread_attr_t,
        __qos_class: *mut qos_class_t,
        __relative_priority: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_set_qos_class_self_np(
        __qos_class: qos_class_t,
        __relative_priority: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_get_qos_class_np(
        __pthread: pthread_t,
        __qos_class: *mut qos_class_t,
        __relative_priority: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pthread_override_s {
    _unused: [u8; 0],
}
pub type pthread_override_t = *mut pthread_override_s;
extern "C" {
    pub fn pthread_override_qos_class_start_np(
        __pthread: pthread_t,
        __qos_class: qos_class_t,
        __relative_priority: ::std::os::raw::c_int,
    ) -> pthread_override_t;
}
extern "C" {
    pub fn pthread_override_qos_class_end_np(
        __override: pthread_override_t,
    ) -> ::std::os::raw::c_int;
}
pub type mach_port_t = __darwin_mach_port_t;
extern "C" {
    pub fn pthread_atfork(
        arg1: ::std::option::Option<unsafe extern "C" fn()>,
        arg2: ::std::option::Option<unsafe extern "C" fn()>,
        arg3: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_destroy(arg1: *mut pthread_attr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getdetachstate(
        arg1: *const pthread_attr_t,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getguardsize(
        arg1: *const pthread_attr_t,
        arg2: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getinheritsched(
        arg1: *const pthread_attr_t,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getschedparam(
        arg1: *const pthread_attr_t,
        arg2: *mut sched_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getschedpolicy(
        arg1: *const pthread_attr_t,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getscope(
        arg1: *const pthread_attr_t,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getstack(
        arg1: *const pthread_attr_t,
        arg2: *mut *mut ::std::os::raw::c_void,
        arg3: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getstackaddr(
        arg1: *const pthread_attr_t,
        arg2: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_getstacksize(
        arg1: *const pthread_attr_t,
        arg2: *mut usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_init(arg1: *mut pthread_attr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setdetachstate(
        arg1: *mut pthread_attr_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setguardsize(
        arg1: *mut pthread_attr_t,
        arg2: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setinheritsched(
        arg1: *mut pthread_attr_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setschedparam(
        arg1: *mut pthread_attr_t,
        arg2: *const sched_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setschedpolicy(
        arg1: *mut pthread_attr_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setscope(
        arg1: *mut pthread_attr_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setstack(
        arg1: *mut pthread_attr_t,
        arg2: *mut ::std::os::raw::c_void,
        arg3: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setstackaddr(
        arg1: *mut pthread_attr_t,
        arg2: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_attr_setstacksize(
        arg1: *mut pthread_attr_t,
        arg2: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cancel(arg1: pthread_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_broadcast(arg1: *mut pthread_cond_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_destroy(arg1: *mut pthread_cond_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_init(
        arg1: *mut pthread_cond_t,
        arg2: *const pthread_condattr_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_signal(arg1: *mut pthread_cond_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_timedwait(
        arg1: *mut pthread_cond_t,
        arg2: *mut pthread_mutex_t,
        arg3: *const timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_wait(
        arg1: *mut pthread_cond_t,
        arg2: *mut pthread_mutex_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_destroy(arg1: *mut pthread_condattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_init(arg1: *mut pthread_condattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_getpshared(
        arg1: *const pthread_condattr_t,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_condattr_setpshared(
        arg1: *mut pthread_condattr_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_create(
        arg1: *mut pthread_t,
        arg2: *const pthread_attr_t,
        arg3: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void,
        >,
        arg4: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_detach(arg1: pthread_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_equal(arg1: pthread_t, arg2: pthread_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_exit(arg1: *mut ::std::os::raw::c_void) -> !;
}
extern "C" {
    pub fn pthread_getconcurrency() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_getschedparam(
        arg1: pthread_t,
        arg2: *mut ::std::os::raw::c_int,
        arg3: *mut sched_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_getspecific(arg1: pthread_key_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn pthread_join(
        arg1: pthread_t,
        arg2: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_key_create(
        arg1: *mut pthread_key_t,
        arg2: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_key_delete(arg1: pthread_key_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_destroy(arg1: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_getprioceiling(
        arg1: *const pthread_mutex_t,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_init(
        arg1: *mut pthread_mutex_t,
        arg2: *const pthread_mutexattr_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_lock(arg1: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_setprioceiling(
        arg1: *mut pthread_mutex_t,
        arg2: ::std::os::raw::c_int,
        arg3: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_trylock(arg1: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutex_unlock(arg1: *mut pthread_mutex_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_destroy(arg1: *mut pthread_mutexattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_getprioceiling(
        arg1: *const pthread_mutexattr_t,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_getprotocol(
        arg1: *const pthread_mutexattr_t,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_getpshared(
        arg1: *const pthread_mutexattr_t,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_gettype(
        arg1: *const pthread_mutexattr_t,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_getpolicy_np(
        arg1: *const pthread_mutexattr_t,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_init(arg1: *mut pthread_mutexattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_setprioceiling(
        arg1: *mut pthread_mutexattr_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_setprotocol(
        arg1: *mut pthread_mutexattr_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_setpshared(
        arg1: *mut pthread_mutexattr_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_settype(
        arg1: *mut pthread_mutexattr_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_setpolicy_np(
        arg1: *mut pthread_mutexattr_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_once(
        arg1: *mut pthread_once_t,
        arg2: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_destroy(arg1: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_init(
        arg1: *mut pthread_rwlock_t,
        arg2: *const pthread_rwlockattr_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_rdlock(arg1: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_tryrdlock(arg1: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_trywrlock(arg1: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_wrlock(arg1: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlock_unlock(arg1: *mut pthread_rwlock_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_destroy(arg1: *mut pthread_rwlockattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_getpshared(
        arg1: *const pthread_rwlockattr_t,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_init(arg1: *mut pthread_rwlockattr_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_setpshared(
        arg1: *mut pthread_rwlockattr_t,
        arg2: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_self() -> pthread_t;
}
extern "C" {
    pub fn pthread_setcancelstate(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setcanceltype(
        arg1: ::std::os::raw::c_int,
        arg2: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setconcurrency(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setschedparam(
        arg1: pthread_t,
        arg2: ::std::os::raw::c_int,
        arg3: *const sched_param,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setspecific(
        arg1: pthread_key_t,
        arg2: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_testcancel();
}
extern "C" {
    pub fn pthread_is_threaded_np() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_threadid_np(arg1: pthread_t, arg2: *mut __uint64_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_getname_np(
        arg1: pthread_t,
        arg2: *mut ::std::os::raw::c_char,
        arg3: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_setname_np(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_main_np() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_mach_thread_np(arg1: pthread_t) -> mach_port_t;
}
extern "C" {
    pub fn pthread_get_stacksize_np(arg1: pthread_t) -> usize;
}
extern "C" {
    pub fn pthread_get_stackaddr_np(arg1: pthread_t) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    pub fn pthread_cond_signal_thread_np(
        arg1: *mut pthread_cond_t,
        arg2: pthread_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_cond_timedwait_relative_np(
        arg1: *mut pthread_cond_t,
        arg2: *mut pthread_mutex_t,
        arg3: *const timespec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_create_suspended_np(
        arg1: *mut pthread_t,
        arg2: *const pthread_attr_t,
        arg3: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> *mut ::std::os::raw::c_void,
        >,
        arg4: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_kill(arg1: pthread_t, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_from_mach_thread_np(arg1: mach_port_t) -> pthread_t;
}
extern "C" {
    pub fn pthread_sigmask(
        arg1: ::std::os::raw::c_int,
        arg2: *const sigset_t,
        arg3: *mut sigset_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_yield_np();
}
extern "C" {
    pub fn pthread_jit_write_protect_np(enabled: ::std::os::raw::c_int);
}
extern "C" {
    pub fn pthread_jit_write_protect_supported_np() -> ::std::os::raw::c_int;
}
pub type pthread_jit_write_callback_t = ::std::option::Option<
    unsafe extern "C" fn(ctx: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
>;
extern "C" {
    pub fn pthread_jit_write_with_callback_np(
        callback: pthread_jit_write_callback_t,
        ctx: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pthread_jit_write_freeze_callbacks_np();
}
extern "C" {
    pub fn pthread_cpu_number_np(cpu_number_out: *mut usize) -> ::std::os::raw::c_int;
}
pub type __libcpp_timespec_t = timespec;
extern "C" {
    pub fn __assert_rtn(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
    ) -> !;
}
pub type va_list = __builtin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
pub type wint_t = __darwin_wint_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RuneEntry {
    pub __min: __darwin_rune_t,
    pub __max: __darwin_rune_t,
    pub __map: __darwin_rune_t,
    pub __types: *mut __uint32_t,
}
const _: () = {
    ["Size of _RuneEntry"][::std::mem::size_of::<_RuneEntry>() - 24usize];
    ["Alignment of _RuneEntry"][::std::mem::align_of::<_RuneEntry>() - 8usize];
    ["Offset of field: _RuneEntry::__min"][::std::mem::offset_of!(_RuneEntry, __min) - 0usize];
    ["Offset of field: _RuneEntry::__max"][::std::mem::offset_of!(_RuneEntry, __max) - 4usize];
    ["Offset of field: _RuneEntry::__map"][::std::mem::offset_of!(_RuneEntry, __map) - 8usize];
    ["Offset of field: _RuneEntry::__types"][::std::mem::offset_of!(_RuneEntry, __types) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RuneRange {
    pub __nranges: ::std::os::raw::c_int,
    pub __ranges: *mut _RuneEntry,
}
const _: () = {
    ["Size of _RuneRange"][::std::mem::size_of::<_RuneRange>() - 16usize];
    ["Alignment of _RuneRange"][::std::mem::align_of::<_RuneRange>() - 8usize];
    ["Offset of field: _RuneRange::__nranges"]
        [::std::mem::offset_of!(_RuneRange, __nranges) - 0usize];
    ["Offset of field: _RuneRange::__ranges"]
        [::std::mem::offset_of!(_RuneRange, __ranges) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RuneCharClass {
    pub __name: [::std::os::raw::c_char; 14usize],
    pub __mask: __uint32_t,
}
const _: () = {
    ["Size of _RuneCharClass"][::std::mem::size_of::<_RuneCharClass>() - 20usize];
    ["Alignment of _RuneCharClass"][::std::mem::align_of::<_RuneCharClass>() - 4usize];
    ["Offset of field: _RuneCharClass::__name"]
        [::std::mem::offset_of!(_RuneCharClass, __name) - 0usize];
    ["Offset of field: _RuneCharClass::__mask"]
        [::std::mem::offset_of!(_RuneCharClass, __mask) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _RuneLocale {
    pub __magic: [::std::os::raw::c_char; 8usize],
    pub __encoding: [::std::os::raw::c_char; 32usize],
    pub __sgetrune: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *const ::std::os::raw::c_char,
            arg2: __darwin_size_t,
            arg3: *mut *const ::std::os::raw::c_char,
        ) -> __darwin_rune_t,
    >,
    pub __sputrune: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: __darwin_rune_t,
            arg2: *mut ::std::os::raw::c_char,
            arg3: __darwin_size_t,
            arg4: *mut *mut ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int,
    >,
    pub __invalid_rune: __darwin_rune_t,
    pub __runetype: [__uint32_t; 256usize],
    pub __maplower: [__darwin_rune_t; 256usize],
    pub __mapupper: [__darwin_rune_t; 256usize],
    pub __runetype_ext: _RuneRange,
    pub __maplower_ext: _RuneRange,
    pub __mapupper_ext: _RuneRange,
    pub __variable: *mut ::std::os::raw::c_void,
    pub __variable_len: ::std::os::raw::c_int,
    pub __ncharclasses: ::std::os::raw::c_int,
    pub __charclasses: *mut _RuneCharClass,
}
const _: () = {
    ["Size of _RuneLocale"][::std::mem::size_of::<_RuneLocale>() - 3208usize];
    ["Alignment of _RuneLocale"][::std::mem::align_of::<_RuneLocale>() - 8usize];
    ["Offset of field: _RuneLocale::__magic"]
        [::std::mem::offset_of!(_RuneLocale, __magic) - 0usize];
    ["Offset of field: _RuneLocale::__encoding"]
        [::std::mem::offset_of!(_RuneLocale, __encoding) - 8usize];
    ["Offset of field: _RuneLocale::__sgetrune"]
        [::std::mem::offset_of!(_RuneLocale, __sgetrune) - 40usize];
    ["Offset of field: _RuneLocale::__sputrune"]
        [::std::mem::offset_of!(_RuneLocale, __sputrune) - 48usize];
    ["Offset of field: _RuneLocale::__invalid_rune"]
        [::std::mem::offset_of!(_RuneLocale, __invalid_rune) - 56usize];
    ["Offset of field: _RuneLocale::__runetype"]
        [::std::mem::offset_of!(_RuneLocale, __runetype) - 60usize];
    ["Offset of field: _RuneLocale::__maplower"]
        [::std::mem::offset_of!(_RuneLocale, __maplower) - 1084usize];
    ["Offset of field: _RuneLocale::__mapupper"]
        [::std::mem::offset_of!(_RuneLocale, __mapupper) - 2108usize];
    ["Offset of field: _RuneLocale::__runetype_ext"]
        [::std::mem::offset_of!(_RuneLocale, __runetype_ext) - 3136usize];
    ["Offset of field: _RuneLocale::__maplower_ext"]
        [::std::mem::offset_of!(_RuneLocale, __maplower_ext) - 3152usize];
    ["Offset of field: _RuneLocale::__mapupper_ext"]
        [::std::mem::offset_of!(_RuneLocale, __mapupper_ext) - 3168usize];
    ["Offset of field: _RuneLocale::__variable"]
        [::std::mem::offset_of!(_RuneLocale, __variable) - 3184usize];
    ["Offset of field: _RuneLocale::__variable_len"]
        [::std::mem::offset_of!(_RuneLocale, __variable_len) - 3192usize];
    ["Offset of field: _RuneLocale::__ncharclasses"]
        [::std::mem::offset_of!(_RuneLocale, __ncharclasses) - 3196usize];
    ["Offset of field: _RuneLocale::__charclasses"]
        [::std::mem::offset_of!(_RuneLocale, __charclasses) - 3200usize];
};
extern "C" {
    pub static mut _DefaultRuneLocale: _RuneLocale;
}
extern "C" {
    pub static mut _CurrentRuneLocale: *mut _RuneLocale;
}
extern "C" {
    pub fn ___runetype(arg1: __darwin_ct_rune_t) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn ___tolower(arg1: __darwin_ct_rune_t) -> __darwin_ct_rune_t;
}
extern "C" {
    pub fn ___toupper(arg1: __darwin_ct_rune_t) -> __darwin_ct_rune_t;
}
extern "C" {
    pub fn __maskrune(
        arg1: __darwin_ct_rune_t,
        arg2: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __toupper(arg1: __darwin_ct_rune_t) -> __darwin_ct_rune_t;
}
extern "C" {
    pub fn __tolower(arg1: __darwin_ct_rune_t) -> __darwin_ct_rune_t;
}
pub type wctrans_t = __darwin_wctrans_t;
pub type wctype_t = __darwin_wctype_t;
extern "C" {
    pub fn wctype(arg1: *const ::std::os::raw::c_char) -> wctype_t;
}
extern "C" {
    pub fn nextwctype(arg1: wint_t, arg2: wctype_t) -> wint_t;
}
extern "C" {
    pub fn towctrans(arg1: wint_t, arg2: wctrans_t) -> wint_t;
}
extern "C" {
    pub fn wctrans(arg1: *const ::std::os::raw::c_char) -> wctrans_t;
}
extern "C" {
    pub fn renameat(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn renamex_np(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn renameatx_np(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
        arg5: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
pub type fpos_t = __darwin_off_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sbuf {
    pub _base: *mut ::std::os::raw::c_uchar,
    pub _size: ::std::os::raw::c_int,
}
const _: () = {
    ["Size of __sbuf"][::std::mem::size_of::<__sbuf>() - 16usize];
    ["Alignment of __sbuf"][::std::mem::align_of::<__sbuf>() - 8usize];
    ["Offset of field: __sbuf::_base"][::std::mem::offset_of!(__sbuf, _base) - 0usize];
    ["Offset of field: __sbuf::_size"][::std::mem::offset_of!(__sbuf, _size) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sFILEX {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sFILE {
    pub _p: *mut ::std::os::raw::c_uchar,
    pub _r: ::std::os::raw::c_int,
    pub _w: ::std::os::raw::c_int,
    pub _flags: ::std::os::raw::c_short,
    pub _file: ::std::os::raw::c_short,
    pub _bf: __sbuf,
    pub _lbfsize: ::std::os::raw::c_int,
    pub _cookie: *mut ::std::os::raw::c_void,
    pub _close: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
    >,
    pub _read: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: *mut ::std::os::raw::c_char,
            arg3: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub _seek: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: fpos_t,
            arg3: ::std::os::raw::c_int,
        ) -> fpos_t,
    >,
    pub _write: ::std::option::Option<
        unsafe extern "C" fn(
            arg1: *mut ::std::os::raw::c_void,
            arg2: *const ::std::os::raw::c_char,
            arg3: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int,
    >,
    pub _ub: __sbuf,
    pub _extra: *mut __sFILEX,
    pub _ur: ::std::os::raw::c_int,
    pub _ubuf: [::std::os::raw::c_uchar; 3usize],
    pub _nbuf: [::std::os::raw::c_uchar; 1usize],
    pub _lb: __sbuf,
    pub _blksize: ::std::os::raw::c_int,
    pub _offset: fpos_t,
}
const _: () = {
    ["Size of __sFILE"][::std::mem::size_of::<__sFILE>() - 152usize];
    ["Alignment of __sFILE"][::std::mem::align_of::<__sFILE>() - 8usize];
    ["Offset of field: __sFILE::_p"][::std::mem::offset_of!(__sFILE, _p) - 0usize];
    ["Offset of field: __sFILE::_r"][::std::mem::offset_of!(__sFILE, _r) - 8usize];
    ["Offset of field: __sFILE::_w"][::std::mem::offset_of!(__sFILE, _w) - 12usize];
    ["Offset of field: __sFILE::_flags"][::std::mem::offset_of!(__sFILE, _flags) - 16usize];
    ["Offset of field: __sFILE::_file"][::std::mem::offset_of!(__sFILE, _file) - 18usize];
    ["Offset of field: __sFILE::_bf"][::std::mem::offset_of!(__sFILE, _bf) - 24usize];
    ["Offset of field: __sFILE::_lbfsize"][::std::mem::offset_of!(__sFILE, _lbfsize) - 40usize];
    ["Offset of field: __sFILE::_cookie"][::std::mem::offset_of!(__sFILE, _cookie) - 48usize];
    ["Offset of field: __sFILE::_close"][::std::mem::offset_of!(__sFILE, _close) - 56usize];
    ["Offset of field: __sFILE::_read"][::std::mem::offset_of!(__sFILE, _read) - 64usize];
    ["Offset of field: __sFILE::_seek"][::std::mem::offset_of!(__sFILE, _seek) - 72usize];
    ["Offset of field: __sFILE::_write"][::std::mem::offset_of!(__sFILE, _write) - 80usize];
    ["Offset of field: __sFILE::_ub"][::std::mem::offset_of!(__sFILE, _ub) - 88usize];
    ["Offset of field: __sFILE::_extra"][::std::mem::offset_of!(__sFILE, _extra) - 104usize];
    ["Offset of field: __sFILE::_ur"][::std::mem::offset_of!(__sFILE, _ur) - 112usize];
    ["Offset of field: __sFILE::_ubuf"][::std::mem::offset_of!(__sFILE, _ubuf) - 116usize];
    ["Offset of field: __sFILE::_nbuf"][::std::mem::offset_of!(__sFILE, _nbuf) - 119usize];
    ["Offset of field: __sFILE::_lb"][::std::mem::offset_of!(__sFILE, _lb) - 120usize];
    ["Offset of field: __sFILE::_blksize"][::std::mem::offset_of!(__sFILE, _blksize) - 136usize];
    ["Offset of field: __sFILE::_offset"][::std::mem::offset_of!(__sFILE, _offset) - 144usize];
};
pub type FILE = __sFILE;
extern "C" {
    pub static mut __stdinp: *mut FILE;
}
extern "C" {
    pub static mut __stdoutp: *mut FILE;
}
extern "C" {
    pub static mut __stderrp: *mut FILE;
}
extern "C" {
    pub fn clearerr(arg1: *mut FILE);
}
extern "C" {
    pub fn fclose(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn feof(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ferror(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fflush(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetc(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgetpos(arg1: *mut FILE, arg2: *mut fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fgets(
        arg1: *mut ::std::os::raw::c_char,
        arg2: ::std::os::raw::c_int,
        arg3: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fopen(
        __filename: *const ::std::os::raw::c_char,
        __mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fprintf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputc(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fputs(arg1: *const ::std::os::raw::c_char, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fread(
        __ptr: *mut ::std::os::raw::c_void,
        __size: usize,
        __nitems: usize,
        __stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn freopen(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fscanf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fseek(
        arg1: *mut FILE,
        arg2: ::std::os::raw::c_long,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fsetpos(arg1: *mut FILE, arg2: *const fpos_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftell(arg1: *mut FILE) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn fwrite(
        __ptr: *const ::std::os::raw::c_void,
        __size: usize,
        __nitems: usize,
        __stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn getc(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn gets(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn perror(arg1: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn printf(arg1: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn puts(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn remove(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rename(
        __old: *const ::std::os::raw::c_char,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn rewind(arg1: *mut FILE);
}
extern "C" {
    pub fn scanf(arg1: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuf(arg1: *mut FILE, arg2: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn setvbuf(
        arg1: *mut FILE,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: usize,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprintf(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sscanf(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn ungetc(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfprintf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        arg3: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vprintf(arg1: *const ::std::os::raw::c_char, arg2: va_list) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsprintf(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ctermid(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fdopen(arg1: ::std::os::raw::c_int, arg2: *const ::std::os::raw::c_char) -> *mut FILE;
}
extern "C" {
    pub fn fileno(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn pclose(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn popen(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn __srget(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __svfscanf(
        arg1: *mut FILE,
        arg2: *const ::std::os::raw::c_char,
        arg3: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn __swbuf(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn flockfile(arg1: *mut FILE);
}
extern "C" {
    pub fn ftrylockfile(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn funlockfile(arg1: *mut FILE);
}
extern "C" {
    pub fn getc_unlocked(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putc_unlocked(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putchar_unlocked(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getw(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn putw(arg1: ::std::os::raw::c_int, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn tempnam(
        __dir: *const ::std::os::raw::c_char,
        __prefix: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fseeko(
        __stream: *mut FILE,
        __offset: off_t,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ftello(__stream: *mut FILE) -> off_t;
}
extern "C" {
    pub fn snprintf(
        __str: *mut ::std::os::raw::c_char,
        __size: usize,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfscanf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        arg1: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vscanf(__format: *const ::std::os::raw::c_char, arg1: va_list) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsnprintf(
        __str: *mut ::std::os::raw::c_char,
        __size: usize,
        __format: *const ::std::os::raw::c_char,
        arg1: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsscanf(
        __str: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        arg1: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dprintf(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vdprintf(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getdelim(
        __linep: *mut *mut ::std::os::raw::c_char,
        __linecapp: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> isize;
}
extern "C" {
    pub fn getline(
        __linep: *mut *mut ::std::os::raw::c_char,
        __linecapp: *mut usize,
        __stream: *mut FILE,
    ) -> isize;
}
extern "C" {
    pub fn fmemopen(
        __buf: *mut ::std::os::raw::c_void,
        __size: usize,
        __mode: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn open_memstream(
        __bufp: *mut *mut ::std::os::raw::c_char,
        __sizep: *mut usize,
    ) -> *mut FILE;
}
extern "C" {
    pub static sys_nerr: ::std::os::raw::c_int;
}
extern "C" {
    pub static sys_errlist: [*const ::std::os::raw::c_char; 0usize];
}
extern "C" {
    pub fn asprintf(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ctermid_r(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fgetln(arg1: *mut FILE, arg2: *mut usize) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn fmtcheck(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn fpurge(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn setbuffer(
        arg1: *mut FILE,
        arg2: *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn setlinebuf(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vasprintf(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn funopen(
        arg1: *const ::std::os::raw::c_void,
        arg2: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *mut ::std::os::raw::c_char,
                arg3: ::std::os::raw::c_int,
            ) -> ::std::os::raw::c_int,
        >,
        arg3: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: *const ::std::os::raw::c_char,
                arg3: ::std::os::raw::c_int,
            ) -> ::std::os::raw::c_int,
        >,
        arg4: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: fpos_t,
                arg3: ::std::os::raw::c_int,
            ) -> fpos_t,
        >,
        arg5: ::std::option::Option<
            unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
        >,
    ) -> *mut FILE;
}
extern "C" {
    pub fn btowc(arg1: ::std::os::raw::c_int) -> wint_t;
}
extern "C" {
    pub fn fgetwc(arg1: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn fgetws(arg1: *mut u32, arg2: ::std::os::raw::c_int, arg3: *mut FILE) -> *mut u32;
}
extern "C" {
    pub fn fputwc(arg1: u32, arg2: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn fputws(arg1: *const u32, arg2: *mut FILE) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fwide(arg1: *mut FILE, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fwprintf(arg1: *mut FILE, arg2: *const u32, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fwscanf(arg1: *mut FILE, arg2: *const u32, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getwc(arg1: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn getwchar() -> wint_t;
}
extern "C" {
    pub fn mbrlen(arg1: *const ::std::os::raw::c_char, arg2: usize, arg3: *mut mbstate_t) -> usize;
}
extern "C" {
    pub fn mbrtowc(
        arg1: *mut u32,
        arg2: *const ::std::os::raw::c_char,
        arg3: usize,
        arg4: *mut mbstate_t,
    ) -> usize;
}
extern "C" {
    pub fn mbsinit(arg1: *const mbstate_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbsrtowcs(
        arg1: *mut u32,
        arg2: *mut *const ::std::os::raw::c_char,
        arg3: usize,
        arg4: *mut mbstate_t,
    ) -> usize;
}
extern "C" {
    pub fn putwc(arg1: u32, arg2: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn putwchar(arg1: u32) -> wint_t;
}
extern "C" {
    pub fn swprintf(arg1: *mut u32, arg2: usize, arg3: *const u32, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn swscanf(arg1: *const u32, arg2: *const u32, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetwc(arg1: wint_t, arg2: *mut FILE) -> wint_t;
}
extern "C" {
    pub fn vfwprintf(
        arg1: *mut FILE,
        arg2: *const u32,
        arg3: __darwin_va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vswprintf(
        arg1: *mut u32,
        arg2: usize,
        arg3: *const u32,
        arg4: __darwin_va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vwprintf(arg1: *const u32, arg2: __darwin_va_list) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcrtomb(arg1: *mut ::std::os::raw::c_char, arg2: u32, arg3: *mut mbstate_t) -> usize;
}
extern "C" {
    pub fn wcscat(arg1: *mut u32, arg2: *const u32) -> *mut u32;
}
extern "C" {
    pub fn wcschr(arg1: *const u32, arg2: u32) -> *mut u32;
}
extern "C" {
    pub fn wcscmp(arg1: *const u32, arg2: *const u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcscoll(arg1: *const u32, arg2: *const u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcscpy(arg1: *mut u32, arg2: *const u32) -> *mut u32;
}
extern "C" {
    pub fn wcscspn(arg1: *const u32, arg2: *const u32) -> usize;
}
extern "C" {
    pub fn wcsftime(arg1: *mut u32, arg2: usize, arg3: *const u32, arg4: *const tm) -> usize;
}
extern "C" {
    pub fn wcslen(arg1: *const u32) -> usize;
}
extern "C" {
    pub fn wcsncat(arg1: *mut u32, arg2: *const u32, arg3: usize) -> *mut u32;
}
extern "C" {
    pub fn wcsncmp(arg1: *const u32, arg2: *const u32, arg3: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsncpy(arg1: *mut u32, arg2: *const u32, arg3: usize) -> *mut u32;
}
extern "C" {
    pub fn wcspbrk(arg1: *const u32, arg2: *const u32) -> *mut u32;
}
extern "C" {
    pub fn wcsrchr(arg1: *const u32, arg2: u32) -> *mut u32;
}
extern "C" {
    pub fn wcsrtombs(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *mut *const u32,
        arg3: usize,
        arg4: *mut mbstate_t,
    ) -> usize;
}
extern "C" {
    pub fn wcsspn(arg1: *const u32, arg2: *const u32) -> usize;
}
extern "C" {
    pub fn wcsstr(arg1: *const u32, arg2: *const u32) -> *mut u32;
}
extern "C" {
    pub fn wcsxfrm(arg1: *mut u32, arg2: *const u32, arg3: usize) -> usize;
}
extern "C" {
    pub fn wctob(arg1: wint_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcstod(arg1: *const u32, arg2: *mut *mut u32) -> f64;
}
extern "C" {
    pub fn wcstok(arg1: *mut u32, arg2: *const u32, arg3: *mut *mut u32) -> *mut u32;
}
extern "C" {
    pub fn wcstol(
        arg1: *const u32,
        arg2: *mut *mut u32,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn wcstoul(
        arg1: *const u32,
        arg2: *mut *mut u32,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn wmemchr(arg1: *const u32, arg2: u32, arg3: usize) -> *mut u32;
}
extern "C" {
    pub fn wmemcmp(arg1: *const u32, arg2: *const u32, arg3: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wmemcpy(arg1: *mut u32, arg2: *const u32, arg3: usize) -> *mut u32;
}
extern "C" {
    pub fn wmemmove(arg1: *mut u32, arg2: *const u32, arg3: usize) -> *mut u32;
}
extern "C" {
    pub fn wmemset(arg1: *mut u32, arg2: u32, arg3: usize) -> *mut u32;
}
extern "C" {
    pub fn wprintf(arg1: *const u32, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wscanf(arg1: *const u32, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcswidth(arg1: *const u32, arg2: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcwidth(arg1: u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfwscanf(
        arg1: *mut FILE,
        arg2: *const u32,
        arg3: __darwin_va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vswscanf(
        arg1: *const u32,
        arg2: *const u32,
        arg3: __darwin_va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vwscanf(arg1: *const u32, arg2: __darwin_va_list) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcstof(arg1: *const u32, arg2: *mut *mut u32) -> f32;
}
extern "C" {
    pub fn wcstold(arg1: *const u32, arg2: *mut *mut u32) -> f64;
}
extern "C" {
    pub fn wcstoll(
        arg1: *const u32,
        arg2: *mut *mut u32,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn wcstoull(
        arg1: *const u32,
        arg2: *mut *mut u32,
        arg3: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn mbsnrtowcs(
        arg1: *mut u32,
        arg2: *mut *const ::std::os::raw::c_char,
        arg3: usize,
        arg4: usize,
        arg5: *mut mbstate_t,
    ) -> usize;
}
extern "C" {
    pub fn wcpcpy(arg1: *mut u32, arg2: *const u32) -> *mut u32;
}
extern "C" {
    pub fn wcpncpy(arg1: *mut u32, arg2: *const u32, arg3: usize) -> *mut u32;
}
extern "C" {
    pub fn wcsdup(arg1: *const u32) -> *mut u32;
}
extern "C" {
    pub fn wcscasecmp(arg1: *const u32, arg2: *const u32) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsncasecmp(arg1: *const u32, arg2: *const u32, n: usize) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsnlen(arg1: *const u32, arg2: usize) -> usize;
}
extern "C" {
    pub fn wcsnrtombs(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *mut *const u32,
        arg3: usize,
        arg4: usize,
        arg5: *mut mbstate_t,
    ) -> usize;
}
extern "C" {
    pub fn open_wmemstream(__bufp: *mut *mut u32, __sizep: *mut usize) -> *mut FILE;
}
extern "C" {
    pub fn fgetwln(arg1: *mut FILE, arg2: *mut usize) -> *mut u32;
}
extern "C" {
    pub fn wcslcat(arg1: *mut u32, arg2: *const u32, arg3: usize) -> usize;
}
extern "C" {
    pub fn wcslcpy(arg1: *mut u32, arg2: *const u32, arg3: usize) -> usize;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lconv {
    pub decimal_point: *mut ::std::os::raw::c_char,
    pub thousands_sep: *mut ::std::os::raw::c_char,
    pub grouping: *mut ::std::os::raw::c_char,
    pub int_curr_symbol: *mut ::std::os::raw::c_char,
    pub currency_symbol: *mut ::std::os::raw::c_char,
    pub mon_decimal_point: *mut ::std::os::raw::c_char,
    pub mon_thousands_sep: *mut ::std::os::raw::c_char,
    pub mon_grouping: *mut ::std::os::raw::c_char,
    pub positive_sign: *mut ::std::os::raw::c_char,
    pub negative_sign: *mut ::std::os::raw::c_char,
    pub int_frac_digits: ::std::os::raw::c_char,
    pub frac_digits: ::std::os::raw::c_char,
    pub p_cs_precedes: ::std::os::raw::c_char,
    pub p_sep_by_space: ::std::os::raw::c_char,
    pub n_cs_precedes: ::std::os::raw::c_char,
    pub n_sep_by_space: ::std::os::raw::c_char,
    pub p_sign_posn: ::std::os::raw::c_char,
    pub n_sign_posn: ::std::os::raw::c_char,
    pub int_p_cs_precedes: ::std::os::raw::c_char,
    pub int_n_cs_precedes: ::std::os::raw::c_char,
    pub int_p_sep_by_space: ::std::os::raw::c_char,
    pub int_n_sep_by_space: ::std::os::raw::c_char,
    pub int_p_sign_posn: ::std::os::raw::c_char,
    pub int_n_sign_posn: ::std::os::raw::c_char,
}
const _: () = {
    ["Size of lconv"][::std::mem::size_of::<lconv>() - 96usize];
    ["Alignment of lconv"][::std::mem::align_of::<lconv>() - 8usize];
    ["Offset of field: lconv::decimal_point"]
        [::std::mem::offset_of!(lconv, decimal_point) - 0usize];
    ["Offset of field: lconv::thousands_sep"]
        [::std::mem::offset_of!(lconv, thousands_sep) - 8usize];
    ["Offset of field: lconv::grouping"][::std::mem::offset_of!(lconv, grouping) - 16usize];
    ["Offset of field: lconv::int_curr_symbol"]
        [::std::mem::offset_of!(lconv, int_curr_symbol) - 24usize];
    ["Offset of field: lconv::currency_symbol"]
        [::std::mem::offset_of!(lconv, currency_symbol) - 32usize];
    ["Offset of field: lconv::mon_decimal_point"]
        [::std::mem::offset_of!(lconv, mon_decimal_point) - 40usize];
    ["Offset of field: lconv::mon_thousands_sep"]
        [::std::mem::offset_of!(lconv, mon_thousands_sep) - 48usize];
    ["Offset of field: lconv::mon_grouping"][::std::mem::offset_of!(lconv, mon_grouping) - 56usize];
    ["Offset of field: lconv::positive_sign"]
        [::std::mem::offset_of!(lconv, positive_sign) - 64usize];
    ["Offset of field: lconv::negative_sign"]
        [::std::mem::offset_of!(lconv, negative_sign) - 72usize];
    ["Offset of field: lconv::int_frac_digits"]
        [::std::mem::offset_of!(lconv, int_frac_digits) - 80usize];
    ["Offset of field: lconv::frac_digits"][::std::mem::offset_of!(lconv, frac_digits) - 81usize];
    ["Offset of field: lconv::p_cs_precedes"]
        [::std::mem::offset_of!(lconv, p_cs_precedes) - 82usize];
    ["Offset of field: lconv::p_sep_by_space"]
        [::std::mem::offset_of!(lconv, p_sep_by_space) - 83usize];
    ["Offset of field: lconv::n_cs_precedes"]
        [::std::mem::offset_of!(lconv, n_cs_precedes) - 84usize];
    ["Offset of field: lconv::n_sep_by_space"]
        [::std::mem::offset_of!(lconv, n_sep_by_space) - 85usize];
    ["Offset of field: lconv::p_sign_posn"][::std::mem::offset_of!(lconv, p_sign_posn) - 86usize];
    ["Offset of field: lconv::n_sign_posn"][::std::mem::offset_of!(lconv, n_sign_posn) - 87usize];
    ["Offset of field: lconv::int_p_cs_precedes"]
        [::std::mem::offset_of!(lconv, int_p_cs_precedes) - 88usize];
    ["Offset of field: lconv::int_n_cs_precedes"]
        [::std::mem::offset_of!(lconv, int_n_cs_precedes) - 89usize];
    ["Offset of field: lconv::int_p_sep_by_space"]
        [::std::mem::offset_of!(lconv, int_p_sep_by_space) - 90usize];
    ["Offset of field: lconv::int_n_sep_by_space"]
        [::std::mem::offset_of!(lconv, int_n_sep_by_space) - 91usize];
    ["Offset of field: lconv::int_p_sign_posn"]
        [::std::mem::offset_of!(lconv, int_p_sign_posn) - 92usize];
    ["Offset of field: lconv::int_n_sign_posn"]
        [::std::mem::offset_of!(lconv, int_n_sign_posn) - 93usize];
};
extern "C" {
    pub fn localeconv() -> *mut lconv;
}
extern "C" {
    pub fn setlocale(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xlocale {
    _unused: [u8; 0],
}
pub type locale_t = *mut _xlocale;
extern "C" {
    pub fn ___mb_cur_max() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ___mb_cur_max_l(arg1: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub static _c_locale: locale_t;
}
extern "C" {
    pub fn duplocale(arg1: locale_t) -> locale_t;
}
extern "C" {
    pub fn freelocale(arg1: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn localeconv_l(arg1: locale_t) -> *mut lconv;
}
extern "C" {
    pub fn newlocale(
        arg1: ::std::os::raw::c_int,
        arg2: *const ::std::os::raw::c_char,
        arg3: locale_t,
    ) -> locale_t;
}
extern "C" {
    pub fn querylocale(
        arg1: ::std::os::raw::c_int,
        arg2: locale_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn uselocale(arg1: locale_t) -> locale_t;
}
extern "C" {
    pub fn ___runetype_l(arg1: __darwin_ct_rune_t, arg2: locale_t) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn ___tolower_l(arg1: __darwin_ct_rune_t, arg2: locale_t) -> __darwin_ct_rune_t;
}
extern "C" {
    pub fn ___toupper_l(arg1: __darwin_ct_rune_t, arg2: locale_t) -> __darwin_ct_rune_t;
}
extern "C" {
    pub fn __maskrune_l(
        arg1: __darwin_ct_rune_t,
        arg2: ::std::os::raw::c_ulong,
        arg3: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wctype_l(arg1: *const ::std::os::raw::c_char, arg2: locale_t) -> wctype_t;
}
extern "C" {
    pub fn fprintf_l(
        arg1: *mut FILE,
        arg2: locale_t,
        arg3: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fscanf_l(
        arg1: *mut FILE,
        arg2: locale_t,
        arg3: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn printf_l(
        arg1: locale_t,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn scanf_l(
        arg1: locale_t,
        arg2: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sprintf_l(
        arg1: *mut ::std::os::raw::c_char,
        arg2: locale_t,
        arg3: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn sscanf_l(
        arg1: *const ::std::os::raw::c_char,
        arg2: locale_t,
        arg3: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfprintf_l(
        arg1: *mut FILE,
        arg2: locale_t,
        arg3: *const ::std::os::raw::c_char,
        arg4: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vprintf_l(
        arg1: locale_t,
        arg2: *const ::std::os::raw::c_char,
        arg3: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsprintf_l(
        arg1: *mut ::std::os::raw::c_char,
        arg2: locale_t,
        arg3: *const ::std::os::raw::c_char,
        arg4: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn snprintf_l(
        arg1: *mut ::std::os::raw::c_char,
        arg2: usize,
        arg3: locale_t,
        arg4: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfscanf_l(
        arg1: *mut FILE,
        arg2: locale_t,
        arg3: *const ::std::os::raw::c_char,
        arg4: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vscanf_l(
        arg1: locale_t,
        arg2: *const ::std::os::raw::c_char,
        arg3: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsnprintf_l(
        arg1: *mut ::std::os::raw::c_char,
        arg2: usize,
        arg3: locale_t,
        arg4: *const ::std::os::raw::c_char,
        arg5: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vsscanf_l(
        arg1: *const ::std::os::raw::c_char,
        arg2: locale_t,
        arg3: *const ::std::os::raw::c_char,
        arg4: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn dprintf_l(
        arg1: ::std::os::raw::c_int,
        arg2: locale_t,
        arg3: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vdprintf_l(
        arg1: ::std::os::raw::c_int,
        arg2: locale_t,
        arg3: *const ::std::os::raw::c_char,
        arg4: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn asprintf_l(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: locale_t,
        arg3: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vasprintf_l(
        arg1: *mut *mut ::std::os::raw::c_char,
        arg2: locale_t,
        arg3: *const ::std::os::raw::c_char,
        arg4: va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atof_l(arg1: *const ::std::os::raw::c_char, arg2: locale_t) -> f64;
}
extern "C" {
    pub fn atoi_l(arg1: *const ::std::os::raw::c_char, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn atol_l(arg1: *const ::std::os::raw::c_char, arg2: locale_t) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn atoll_l(
        arg1: *const ::std::os::raw::c_char,
        arg2: locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn mblen_l(
        arg1: *const ::std::os::raw::c_char,
        arg2: usize,
        arg3: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbstowcs_l(
        arg1: *mut u32,
        arg2: *const ::std::os::raw::c_char,
        arg3: usize,
        arg4: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn mbtowc_l(
        arg1: *mut u32,
        arg2: *const ::std::os::raw::c_char,
        arg3: usize,
        arg4: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strtod_l(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
        arg3: locale_t,
    ) -> f64;
}
extern "C" {
    pub fn strtof_l(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
        arg3: locale_t,
    ) -> f32;
}
extern "C" {
    pub fn strtol_l(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: locale_t,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn strtold_l(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
        arg3: locale_t,
    ) -> f64;
}
extern "C" {
    pub fn strtoll_l(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoq_l(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn strtoul_l(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: locale_t,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn strtoull_l(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: locale_t,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn strtouq_l(
        arg1: *const ::std::os::raw::c_char,
        arg2: *mut *mut ::std::os::raw::c_char,
        arg3: ::std::os::raw::c_int,
        arg4: locale_t,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn wcstombs_l(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const u32,
        arg3: usize,
        arg4: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn wctomb_l(
        arg1: *mut ::std::os::raw::c_char,
        arg2: u32,
        arg3: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcoll_l(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strxfrm_l(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: usize,
        arg4: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn strcasecmp_l(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strcasestr_l(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: locale_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn strncasecmp_l(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: usize,
        arg4: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn strftime_l(
        arg1: *mut ::std::os::raw::c_char,
        arg2: usize,
        arg3: *const ::std::os::raw::c_char,
        arg4: *const tm,
        arg5: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn strptime_l(
        arg1: *const ::std::os::raw::c_char,
        arg2: *const ::std::os::raw::c_char,
        arg3: *mut tm,
        arg4: locale_t,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn btowc_l(arg1: ::std::os::raw::c_int, arg2: locale_t) -> wint_t;
}
extern "C" {
    pub fn fgetwc_l(arg1: *mut FILE, arg2: locale_t) -> wint_t;
}
extern "C" {
    pub fn fgetws_l(
        arg1: *mut u32,
        arg2: ::std::os::raw::c_int,
        arg3: *mut FILE,
        arg4: locale_t,
    ) -> *mut u32;
}
extern "C" {
    pub fn fputwc_l(arg1: u32, arg2: *mut FILE, arg3: locale_t) -> wint_t;
}
extern "C" {
    pub fn fputws_l(arg1: *const u32, arg2: *mut FILE, arg3: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fwprintf_l(
        arg1: *mut FILE,
        arg2: locale_t,
        arg3: *const u32,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn fwscanf_l(
        arg1: *mut FILE,
        arg2: locale_t,
        arg3: *const u32,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn getwc_l(arg1: *mut FILE, arg2: locale_t) -> wint_t;
}
extern "C" {
    pub fn getwchar_l(arg1: locale_t) -> wint_t;
}
extern "C" {
    pub fn mbrlen_l(
        arg1: *const ::std::os::raw::c_char,
        arg2: usize,
        arg3: *mut mbstate_t,
        arg4: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn mbrtowc_l(
        arg1: *mut u32,
        arg2: *const ::std::os::raw::c_char,
        arg3: usize,
        arg4: *mut mbstate_t,
        arg5: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn mbsinit_l(arg1: *const mbstate_t, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn mbsrtowcs_l(
        arg1: *mut u32,
        arg2: *mut *const ::std::os::raw::c_char,
        arg3: usize,
        arg4: *mut mbstate_t,
        arg5: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn putwc_l(arg1: u32, arg2: *mut FILE, arg3: locale_t) -> wint_t;
}
extern "C" {
    pub fn putwchar_l(arg1: u32, arg2: locale_t) -> wint_t;
}
extern "C" {
    pub fn swprintf_l(
        arg1: *mut u32,
        n: usize,
        arg2: locale_t,
        arg3: *const u32,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn swscanf_l(
        arg1: *const u32,
        arg2: locale_t,
        arg3: *const u32,
        ...
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ungetwc_l(arg1: wint_t, arg2: *mut FILE, arg3: locale_t) -> wint_t;
}
extern "C" {
    pub fn vfwprintf_l(
        arg1: *mut FILE,
        arg2: locale_t,
        arg3: *const u32,
        arg4: __darwin_va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vswprintf_l(
        arg1: *mut u32,
        n: usize,
        arg2: locale_t,
        arg3: *const u32,
        arg4: __darwin_va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vwprintf_l(
        arg1: locale_t,
        arg2: *const u32,
        arg3: __darwin_va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcrtomb_l(
        arg1: *mut ::std::os::raw::c_char,
        arg2: u32,
        arg3: *mut mbstate_t,
        arg4: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn wcscoll_l(arg1: *const u32, arg2: *const u32, arg3: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsftime_l(
        arg1: *mut u32,
        arg2: usize,
        arg3: *const u32,
        arg4: *const tm,
        arg5: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn wcsrtombs_l(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *mut *const u32,
        arg3: usize,
        arg4: *mut mbstate_t,
        arg5: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn wcstod_l(arg1: *const u32, arg2: *mut *mut u32, arg3: locale_t) -> f64;
}
extern "C" {
    pub fn wcstol_l(
        arg1: *const u32,
        arg2: *mut *mut u32,
        arg3: ::std::os::raw::c_int,
        arg4: locale_t,
    ) -> ::std::os::raw::c_long;
}
extern "C" {
    pub fn wcstoul_l(
        arg1: *const u32,
        arg2: *mut *mut u32,
        arg3: ::std::os::raw::c_int,
        arg4: locale_t,
    ) -> ::std::os::raw::c_ulong;
}
extern "C" {
    pub fn wcswidth_l(arg1: *const u32, arg2: usize, arg3: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsxfrm_l(arg1: *mut u32, arg2: *const u32, arg3: usize, arg4: locale_t) -> usize;
}
extern "C" {
    pub fn wctob_l(arg1: wint_t, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcwidth_l(arg1: u32, arg2: locale_t) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wprintf_l(arg1: locale_t, arg2: *const u32, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wscanf_l(arg1: locale_t, arg2: *const u32, ...) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vfwscanf_l(
        arg1: *mut FILE,
        arg2: locale_t,
        arg3: *const u32,
        arg4: __darwin_va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vswscanf_l(
        arg1: *const u32,
        arg2: locale_t,
        arg3: *const u32,
        arg4: __darwin_va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn vwscanf_l(
        arg1: locale_t,
        arg2: *const u32,
        arg3: __darwin_va_list,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcstof_l(arg1: *const u32, arg2: *mut *mut u32, arg3: locale_t) -> f32;
}
extern "C" {
    pub fn wcstold_l(arg1: *const u32, arg2: *mut *mut u32, arg3: locale_t) -> f64;
}
extern "C" {
    pub fn wcstoll_l(
        arg1: *const u32,
        arg2: *mut *mut u32,
        arg3: ::std::os::raw::c_int,
        arg4: locale_t,
    ) -> ::std::os::raw::c_longlong;
}
extern "C" {
    pub fn wcstoull_l(
        arg1: *const u32,
        arg2: *mut *mut u32,
        arg3: ::std::os::raw::c_int,
        arg4: locale_t,
    ) -> ::std::os::raw::c_ulonglong;
}
extern "C" {
    pub fn mbsnrtowcs_l(
        arg1: *mut u32,
        arg2: *mut *const ::std::os::raw::c_char,
        arg3: usize,
        arg4: usize,
        arg5: *mut mbstate_t,
        arg6: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn wcscasecmp_l(
        arg1: *const u32,
        arg2: *const u32,
        arg3: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsncasecmp_l(
        arg1: *const u32,
        arg2: *const u32,
        n: usize,
        arg3: locale_t,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn wcsnrtombs_l(
        arg1: *mut ::std::os::raw::c_char,
        arg2: *mut *const u32,
        arg3: usize,
        arg4: usize,
        arg5: *mut mbstate_t,
        arg6: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn fgetwln_l(arg1: *mut FILE, arg2: *mut usize, arg3: locale_t) -> *mut u32;
}
extern "C" {
    pub fn nextwctype_l(arg1: wint_t, arg2: wctype_t, arg3: locale_t) -> wint_t;
}
extern "C" {
    pub fn towctrans_l(arg1: wint_t, arg2: wctrans_t, arg3: locale_t) -> wint_t;
}
extern "C" {
    pub fn wctrans_l(arg1: *const ::std::os::raw::c_char, arg2: locale_t) -> wctrans_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __nl_cat_d {
    pub __data: *mut ::std::os::raw::c_void,
    pub __size: ::std::os::raw::c_int,
}
const _: () = {
    ["Size of __nl_cat_d"][::std::mem::size_of::<__nl_cat_d>() - 16usize];
    ["Alignment of __nl_cat_d"][::std::mem::align_of::<__nl_cat_d>() - 8usize];
    ["Offset of field: __nl_cat_d::__data"][::std::mem::offset_of!(__nl_cat_d, __data) - 0usize];
    ["Offset of field: __nl_cat_d::__size"][::std::mem::offset_of!(__nl_cat_d, __size) - 8usize];
};
pub type nl_catd = *mut __nl_cat_d;
pub type nl_item = __darwin_nl_item;
extern "C" {
    pub fn catopen(arg1: *const ::std::os::raw::c_char, arg2: ::std::os::raw::c_int) -> nl_catd;
}
extern "C" {
    pub fn catgets(
        arg1: nl_catd,
        arg2: ::std::os::raw::c_int,
        arg3: ::std::os::raw::c_int,
        arg4: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
extern "C" {
    pub fn catclose(arg1: nl_catd) -> ::std::os::raw::c_int;
}
pub type InlineRefCounts = swift_InlineRefCounts;
pub type __swift_size_t = ::std::os::raw::c_ulong;
pub type __swift_ssize_t = std___make_signed_t<::std::os::raw::c_ulong>;
pub const heap_object_abi_LeastValidPointerValue: __swift_uintptr_t = 4294967296;
extern "C" {
    #[link_name = "\u{1}__ZN15heap_object_abiL18SwiftSpareBitsMaskE"]
    pub static heap_object_abi_SwiftSpareBitsMask: __swift_uintptr_t;
}
extern "C" {
    #[link_name = "\u{1}__ZN15heap_object_abiL20ObjCReservedBitsMaskE"]
    pub static heap_object_abi_ObjCReservedBitsMask: __swift_uintptr_t;
}
pub const heap_object_abi_ObjCReservedLowBits: ::std::os::raw::c_uint = 0;
extern "C" {
    #[link_name = "\u{1}__ZN15heap_object_abiL23BridgeObjectTagBitsMaskE"]
    pub static heap_object_abi_BridgeObjectTagBitsMask: __swift_uintptr_t;
}
pub type __builtin_va_list = *mut ::std::os::raw::c_char;
pub type __uint128_t = u128;
const _: () = {
    ["Size of template specialization: std___align_type_open0_unsigned_char_close0"]
        [::std::mem::size_of::<std___align_type>() - 1usize];
    ["Align of template specialization: std___align_type_open0_unsigned_char_close0"]
        [::std::mem::align_of::<std___align_type>() - 1usize];
};
const _: () = {
    ["Size of template specialization: std___align_type_open0_unsigned_short_close0"]
        [::std::mem::size_of::<std___align_type>() - 1usize];
    ["Align of template specialization: std___align_type_open0_unsigned_short_close0"]
        [::std::mem::align_of::<std___align_type>() - 1usize];
};
const _: () = {
    ["Size of template specialization: std___align_type_open0_unsigned_int_close0"]
        [::std::mem::size_of::<std___align_type>() - 1usize];
    ["Align of template specialization: std___align_type_open0_unsigned_int_close0"]
        [::std::mem::align_of::<std___align_type>() - 1usize];
};
const _: () = {
    ["Size of template specialization: std___align_type_open0_unsigned_long_close0"]
        [::std::mem::size_of::<std___align_type>() - 1usize];
    ["Align of template specialization: std___align_type_open0_unsigned_long_close0"]
        [::std::mem::align_of::<std___align_type>() - 1usize];
};
const _: () = {
    ["Size of template specialization: std___align_type_open0_unsigned_long_long_close0"]
        [::std::mem::size_of::<std___align_type>() - 1usize];
    ["Align of template specialization: std___align_type_open0_unsigned_long_long_close0"]
        [::std::mem::align_of::<std___align_type>() - 1usize];
};
const _: () = {
    ["Size of template specialization: std___align_type_open0_double_close0"]
        [::std::mem::size_of::<std___align_type>() - 1usize];
    ["Align of template specialization: std___align_type_open0_double_close0"]
        [::std::mem::align_of::<std___align_type>() - 1usize];
};
const _: () = {
    ["Size of template specialization: std___align_type_open0_long_double_close0"]
        [::std::mem::size_of::<std___align_type>() - 1usize];
    ["Align of template specialization: std___align_type_open0_long_double_close0"]
        [::std::mem::align_of::<std___align_type>() - 1usize];
};
const _: () = {
    ["Size of template specialization: std___align_type_open0_std___struct_double_close0"]
        [::std::mem::size_of::<std___align_type>() - 1usize];
    ["Align of template specialization: std___align_type_open0_std___struct_double_close0"]
        [::std::mem::align_of::<std___align_type>() - 1usize];
};
const _: () = {
    ["Size of template specialization: std___align_type_open0_std___struct_double4_close0"]
        [::std::mem::size_of::<std___align_type>() - 1usize];
    ["Align of template specialization: std___align_type_open0_std___struct_double4_close0"]
        [::std::mem::align_of::<std___align_type>() - 1usize];
};
const _: () = {
    ["Size of template specialization: std___align_type_open0_ptr_int_close0"]
        [::std::mem::size_of::<std___align_type>() - 1usize];
    ["Align of template specialization: std___align_type_open0_ptr_int_close0"]
        [::std::mem::align_of::<std___align_type>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_1 {
    pub _address: u8,
}
const _: () = {
    ["Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0"] [:: std :: mem :: size_of :: < std_basic_string > () - 24usize] ;
    ["Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0"] [:: std :: mem :: align_of :: < std_basic_string > () - 8usize] ;
};
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
const _: () = {
    ["Size of template specialization: std_basic_string_open0_wchar_t_std_char_traits_open1_wchar_t_close1_std_allocator_open1_wchar_t_close1_close0"] [:: std :: mem :: size_of :: < std_basic_string > () - 24usize] ;
    ["Align of template specialization: std_basic_string_open0_wchar_t_std_char_traits_open1_wchar_t_close1_std_allocator_open1_wchar_t_close1_close0"] [:: std :: mem :: align_of :: < std_basic_string > () - 8usize] ;
};
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
const _: () = {
    ["Size of template specialization: std_allocator_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
const _: () = {
    ["Size of template specialization: std_basic_string_open0_char16_t_std_char_traits_open1_char16_t_close1_std_allocator_open1_char16_t_close1_close0"] [:: std :: mem :: size_of :: < std_basic_string > () - 24usize] ;
    ["Align of template specialization: std_basic_string_open0_char16_t_std_char_traits_open1_char16_t_close1_std_allocator_open1_char16_t_close1_close0"] [:: std :: mem :: align_of :: < std_basic_string > () - 8usize] ;
};
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char16_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char16_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
const _: () = {
    ["Size of template specialization: std_allocator_open0_char16_t_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char16_t_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
const _: () = {
    ["Size of template specialization: std_basic_string_open0_char32_t_std_char_traits_open1_char32_t_close1_std_allocator_open1_char32_t_close1_close0"] [:: std :: mem :: size_of :: < std_basic_string > () - 24usize] ;
    ["Align of template specialization: std_basic_string_open0_char32_t_std_char_traits_open1_char32_t_close1_std_allocator_open1_char32_t_close1_close0"] [:: std :: mem :: align_of :: < std_basic_string > () - 8usize] ;
};
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char32_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char32_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
const _: () = {
    ["Size of template specialization: std_allocator_open0_char32_t_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char32_t_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
const _: () = {
    ["Size of template specialization: std_basic_ios_open0_char_std_char_traits_open1_char_close1_close0"] [:: std :: mem :: size_of :: < std_basic_ios > () - 152usize] ;
    ["Align of template specialization: std_basic_ios_open0_char_std_char_traits_open1_char_close1_close0"] [:: std :: mem :: align_of :: < std_basic_ios > () - 8usize] ;
};
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
const _: () = {
    ["Size of template specialization: std_basic_ios_open0_wchar_t_std_char_traits_open1_wchar_t_close1_close0"] [:: std :: mem :: size_of :: < std_basic_ios > () - 152usize] ;
    ["Align of template specialization: std_basic_ios_open0_wchar_t_std_char_traits_open1_wchar_t_close1_close0"] [:: std :: mem :: align_of :: < std_basic_ios > () - 8usize] ;
};
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
const _: () = {
    ["Size of template specialization: std_allocator_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
const _: () = {
    ["Size of template specialization: std_allocator_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
const _: () = {
    ["Size of template specialization: std_allocator_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
const _: () = {
    ["Size of template specialization: std_allocator_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
const _: () = {
    ["Size of template specialization: std_basic_streambuf_open0_char_std_char_traits_open1_char_close1_close0"] [:: std :: mem :: size_of :: < std_basic_streambuf < :: std :: os :: raw :: c_char > > () - 64usize] ;
    ["Align of template specialization: std_basic_streambuf_open0_char_std_char_traits_open1_char_close1_close0"] [:: std :: mem :: align_of :: < std_basic_streambuf < :: std :: os :: raw :: c_char > > () - 8usize] ;
};
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
const _: () = {
    ["Size of template specialization: std_basic_streambuf_open0_wchar_t_std_char_traits_open1_wchar_t_close1_close0"] [:: std :: mem :: size_of :: < std_basic_streambuf < u32 > > () - 64usize] ;
    ["Align of template specialization: std_basic_streambuf_open0_wchar_t_std_char_traits_open1_wchar_t_close1_close0"] [:: std :: mem :: align_of :: < std_basic_streambuf < u32 > > () - 8usize] ;
};
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
pub type type_ = ::std::os::raw::c_uint;
const _: () = {
    ["Size of template specialization: std_chrono_duration_open0_long_long_std_nano_close0"]
        [::std::mem::size_of::<std_chrono_duration<::std::os::raw::c_longlong>>() - 8usize];
    ["Align of template specialization: std_chrono_duration_open0_long_long_std_nano_close0"]
        [::std::mem::align_of::<std_chrono_duration<::std::os::raw::c_longlong>>() - 8usize];
};
const _: () = {
    ["Size of template specialization: std_chrono_duration_open0_long_long_std_micro_close0"]
        [::std::mem::size_of::<std_chrono_duration<::std::os::raw::c_longlong>>() - 8usize];
    ["Align of template specialization: std_chrono_duration_open0_long_long_std_micro_close0"]
        [::std::mem::align_of::<std_chrono_duration<::std::os::raw::c_longlong>>() - 8usize];
};
const _: () = {
    ["Size of template specialization: std_chrono_duration_open0_long_long_std_milli_close0"]
        [::std::mem::size_of::<std_chrono_duration<::std::os::raw::c_longlong>>() - 8usize];
    ["Align of template specialization: std_chrono_duration_open0_long_long_std_milli_close0"]
        [::std::mem::align_of::<std_chrono_duration<::std::os::raw::c_longlong>>() - 8usize];
};
const _: () = {
    ["Size of template specialization: std_chrono_duration_open0_long_long_std_ratio_open1_close1_close0"] [:: std :: mem :: size_of :: < std_chrono_duration < :: std :: os :: raw :: c_longlong > > () - 8usize] ;
    ["Align of template specialization: std_chrono_duration_open0_long_long_std_ratio_open1_close1_close0"] [:: std :: mem :: align_of :: < std_chrono_duration < :: std :: os :: raw :: c_longlong > > () - 8usize] ;
};
const _: () = {
    ["Size of template specialization: std_chrono_duration_open0_long_std_ratio_open1_close1_close0"] [:: std :: mem :: size_of :: < std_chrono_duration < :: std :: os :: raw :: c_long > > () - 8usize] ;
    ["Align of template specialization: std_chrono_duration_open0_long_std_ratio_open1_close1_close0"] [:: std :: mem :: align_of :: < std_chrono_duration < :: std :: os :: raw :: c_long > > () - 8usize] ;
};
const _: () = {
    ["Size of template specialization: std_chrono_duration_open0_long_std_ratio_open1_close1_close0"] [:: std :: mem :: size_of :: < std_chrono_duration < :: std :: os :: raw :: c_long > > () - 8usize] ;
    ["Align of template specialization: std_chrono_duration_open0_long_std_ratio_open1_close1_close0"] [:: std :: mem :: align_of :: < std_chrono_duration < :: std :: os :: raw :: c_long > > () - 8usize] ;
};
pub type rep = ::std::os::raw::c_longlong;
const _: () = {
    ["Size of template specialization: std_chrono_time_point_open0_std_chrono_steady_clock_std_chrono_steady_clock_duration_close0"] [:: std :: mem :: size_of :: < std_chrono_time_point < std_chrono_steady_clock_duration > > () - 8usize] ;
    ["Align of template specialization: std_chrono_time_point_open0_std_chrono_steady_clock_std_chrono_steady_clock_duration_close0"] [:: std :: mem :: align_of :: < std_chrono_time_point < std_chrono_steady_clock_duration > > () - 8usize] ;
};
pub type rep = ::std::os::raw::c_longlong;
const _: () = {
    ["Size of template specialization: std_chrono_time_point_open0_std_chrono_system_clock_std_chrono_duration_open1_long_long_std_ratio_open2_close2_close1_close0"] [:: std :: mem :: size_of :: < std_chrono_time_point < std_chrono_duration < :: std :: os :: raw :: c_longlong > > > () - 8usize] ;
    ["Align of template specialization: std_chrono_time_point_open0_std_chrono_system_clock_std_chrono_duration_open1_long_long_std_ratio_open2_close2_close1_close0"] [:: std :: mem :: align_of :: < std_chrono_time_point < std_chrono_duration < :: std :: os :: raw :: c_longlong > > > () - 8usize] ;
};
const _: () = {
    ["Size of template specialization: std_chrono_duration_open0_long_long_std_ratio_open1_close1_close0"] [:: std :: mem :: size_of :: < std_chrono_duration < :: std :: os :: raw :: c_longlong > > () - 8usize] ;
    ["Align of template specialization: std_chrono_duration_open0_long_long_std_ratio_open1_close1_close0"] [:: std :: mem :: align_of :: < std_chrono_duration < :: std :: os :: raw :: c_longlong > > () - 8usize] ;
};
const _: () = {
    ["Size of template specialization: std___cxx_atomic_impl_open0_bool__std___cxx_atomic_base_impl_open1_bool__close1_close0"] [:: std :: mem :: size_of :: < std___cxx_atomic_impl < std___cxx_atomic_base_impl > > () - 1usize] ;
    ["Align of template specialization: std___cxx_atomic_impl_open0_bool__std___cxx_atomic_base_impl_open1_bool__close1_close0"] [:: std :: mem :: align_of :: < std___cxx_atomic_impl < std___cxx_atomic_base_impl > > () - 1usize] ;
};
const _: () = {
    ["Size of template specialization: std___cxx_atomic_base_impl_open0_bool__close0"]
        [::std::mem::size_of::<std___cxx_atomic_base_impl>() - 1usize];
    ["Align of template specialization: std___cxx_atomic_base_impl_open0_bool__close0"]
        [::std::mem::align_of::<std___cxx_atomic_base_impl>() - 1usize];
};
pub type __int128_t = i128;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_2 {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_3 {
    pub _address: u8,
}
const _: () = {
    ["Size of template specialization: std_tuple_open0_close0"]
        [::std::mem::size_of::<std_tuple>() - 1usize];
    ["Align of template specialization: std_tuple_open0_close0"]
        [::std::mem::align_of::<std_tuple>() - 1usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _bindgen_ty_4 {
    pub _address: u8,
}
const _: () = {
    ["Size of template specialization: std___less_open0_void_void_close0"]
        [::std::mem::size_of::<std___less>() - 1usize];
    ["Align of template specialization: std___less_open0_void_void_close0"]
        [::std::mem::align_of::<std___less>() - 1usize];
};
const _: () = {
    ["Size of template specialization: std_iterator_open0_std_output_iterator_tag_void_void_void_void_close0"] [:: std :: mem :: size_of :: < std_iterator > () - 1usize] ;
    ["Align of template specialization: std_iterator_open0_std_output_iterator_tag_void_void_void_void_close0"] [:: std :: mem :: align_of :: < std_iterator > () - 1usize] ;
};
const _: () = {
    ["Size of template specialization: std_iterator_open0_std_output_iterator_tag_void_void_void_void_close0"] [:: std :: mem :: size_of :: < std_iterator > () - 1usize] ;
    ["Align of template specialization: std_iterator_open0_std_output_iterator_tag_void_void_void_void_close0"] [:: std :: mem :: align_of :: < std_iterator > () - 1usize] ;
};
const _: () = {
    ["Size of template specialization: std_iterator_open0_std_output_iterator_tag_void_void_void_void_close0"] [:: std :: mem :: size_of :: < std_iterator > () - 1usize] ;
    ["Align of template specialization: std_iterator_open0_std_output_iterator_tag_void_void_void_void_close0"] [:: std :: mem :: align_of :: < std_iterator > () - 1usize] ;
};
const _: () = {
    ["Size of template specialization: std_iterator_open0_std_output_iterator_tag_void_void_void_void_close0"] [:: std :: mem :: size_of :: < std_iterator > () - 1usize] ;
    ["Align of template specialization: std_iterator_open0_std_output_iterator_tag_void_void_void_void_close0"] [:: std :: mem :: align_of :: < std_iterator > () - 1usize] ;
};
const _: () = {
    ["Size of template specialization: std_iterator_open0_std_output_iterator_tag_void_void_void_void_close0"] [:: std :: mem :: size_of :: < std_iterator > () - 1usize] ;
    ["Align of template specialization: std_iterator_open0_std_output_iterator_tag_void_void_void_void_close0"] [:: std :: mem :: align_of :: < std_iterator > () - 1usize] ;
};
const _: () = {
    ["Size of template specialization: std_iterator_open0_std_output_iterator_tag_void_void_void_void_close0"] [:: std :: mem :: size_of :: < std_iterator > () - 1usize] ;
    ["Align of template specialization: std_iterator_open0_std_output_iterator_tag_void_void_void_void_close0"] [:: std :: mem :: align_of :: < std_iterator > () - 1usize] ;
};
const _: () = {
    ["Size of template specialization: std_basic_string_view_open0_char_std_char_traits_open1_char_close1_close0"] [:: std :: mem :: size_of :: < std_basic_string_view < :: std :: os :: raw :: c_char > > () - 16usize] ;
    ["Align of template specialization: std_basic_string_view_open0_char_std_char_traits_open1_char_close1_close0"] [:: std :: mem :: align_of :: < std_basic_string_view < :: std :: os :: raw :: c_char > > () - 8usize] ;
};
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
const _: () = {
    ["Size of template specialization: std_basic_string_view_open0_char16_t_std_char_traits_open1_char16_t_close1_close0"] [:: std :: mem :: size_of :: < std_basic_string_view < u16 > > () - 16usize] ;
    ["Align of template specialization: std_basic_string_view_open0_char16_t_std_char_traits_open1_char16_t_close1_close0"] [:: std :: mem :: align_of :: < std_basic_string_view < u16 > > () - 8usize] ;
};
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char16_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char16_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
const _: () = {
    ["Size of template specialization: std_basic_string_view_open0_char32_t_std_char_traits_open1_char32_t_close1_close0"] [:: std :: mem :: size_of :: < std_basic_string_view < u32 > > () - 16usize] ;
    ["Align of template specialization: std_basic_string_view_open0_char32_t_std_char_traits_open1_char32_t_close1_close0"] [:: std :: mem :: align_of :: < std_basic_string_view < u32 > > () - 8usize] ;
};
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char32_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char32_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
const _: () = {
    ["Size of template specialization: std_basic_string_view_open0_wchar_t_std_char_traits_open1_wchar_t_close1_close0"] [:: std :: mem :: size_of :: < std_basic_string_view < u32 > > () - 16usize] ;
    ["Align of template specialization: std_basic_string_view_open0_wchar_t_std_char_traits_open1_wchar_t_close1_close0"] [:: std :: mem :: align_of :: < std_basic_string_view < u32 > > () - 8usize] ;
};
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
pub type char_type = u16;
pub type char_type = u32;
const _: () = {
    ["Size of template specialization: std_basic_string_view_open0_char_std_char_traits_open1_char_close1_close0"] [:: std :: mem :: size_of :: < std_basic_string_view < :: std :: os :: raw :: c_char > > () - 16usize] ;
    ["Align of template specialization: std_basic_string_view_open0_char_std_char_traits_open1_char_close1_close0"] [:: std :: mem :: align_of :: < std_basic_string_view < :: std :: os :: raw :: c_char > > () - 8usize] ;
};
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
const _: () = {
    ["Size of template specialization: std_basic_string_view_open0_char16_t_std_char_traits_open1_char16_t_close1_close0"] [:: std :: mem :: size_of :: < std_basic_string_view < u16 > > () - 16usize] ;
    ["Align of template specialization: std_basic_string_view_open0_char16_t_std_char_traits_open1_char16_t_close1_close0"] [:: std :: mem :: align_of :: < std_basic_string_view < u16 > > () - 8usize] ;
};
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char16_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char16_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
const _: () = {
    ["Size of template specialization: std_basic_string_view_open0_char32_t_std_char_traits_open1_char32_t_close1_close0"] [:: std :: mem :: size_of :: < std_basic_string_view < u32 > > () - 16usize] ;
    ["Align of template specialization: std_basic_string_view_open0_char32_t_std_char_traits_open1_char32_t_close1_close0"] [:: std :: mem :: align_of :: < std_basic_string_view < u32 > > () - 8usize] ;
};
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char32_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char32_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
const _: () = {
    ["Size of template specialization: std_basic_string_view_open0_wchar_t_std_char_traits_open1_wchar_t_close1_close0"] [:: std :: mem :: size_of :: < std_basic_string_view < u32 > > () - 16usize] ;
    ["Align of template specialization: std_basic_string_view_open0_wchar_t_std_char_traits_open1_wchar_t_close1_close0"] [:: std :: mem :: align_of :: < std_basic_string_view < u32 > > () - 8usize] ;
};
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
const _: () = {
    ["Size of template specialization: std_unique_lock_open0_std_mutex_close0"]
        [::std::mem::size_of::<std_unique_lock<std_mutex>>() - 16usize];
    ["Align of template specialization: std_unique_lock_open0_std_mutex_close0"]
        [::std::mem::align_of::<std_unique_lock<std_mutex>>() - 8usize];
};
const _: () = {
    ["Size of template specialization: std_unique_lock_open0_std_mutex_close0"]
        [::std::mem::size_of::<std_unique_lock<std_mutex>>() - 16usize];
    ["Align of template specialization: std_unique_lock_open0_std_mutex_close0"]
        [::std::mem::align_of::<std_unique_lock<std_mutex>>() - 8usize];
};
const _: () = {
    ["Size of template specialization: std_chrono_time_point_open0_std_chrono_system_clock_std_chrono_nanoseconds_close0"] [:: std :: mem :: size_of :: < std_chrono_time_point < std_chrono_nanoseconds > > () - 8usize] ;
    ["Align of template specialization: std_chrono_time_point_open0_std_chrono_system_clock_std_chrono_nanoseconds_close0"] [:: std :: mem :: align_of :: < std_chrono_time_point < std_chrono_nanoseconds > > () - 8usize] ;
};
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
const _: () = {
    ["Size of template specialization: std_ctype_open0_char_close0"]
        [::std::mem::size_of::<std_ctype>() - 32usize];
    ["Align of template specialization: std_ctype_open0_char_close0"]
        [::std::mem::align_of::<std_ctype>() - 8usize];
};
const _: () = {
    ["Size of template specialization: std_ctype_open0_char_close0"]
        [::std::mem::size_of::<std_ctype>() - 32usize];
    ["Align of template specialization: std_ctype_open0_char_close0"]
        [::std::mem::align_of::<std_ctype>() - 8usize];
};
const _: () = {
    ["Size of template specialization: std_ctype_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_ctype>() - 16usize];
    ["Align of template specialization: std_ctype_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_ctype>() - 8usize];
};
const _: () = {
    ["Size of template specialization: std_ctype_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_ctype>() - 16usize];
    ["Align of template specialization: std_ctype_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_ctype>() - 8usize];
};
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
const _: () = {
    ["Size of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_wchar_t_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
const _: () = {
    ["Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0"] [:: std :: mem :: size_of :: < std_basic_string > () - 24usize] ;
    ["Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0"] [:: std :: mem :: align_of :: < std_basic_string > () - 8usize] ;
};
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
const _: () = {
    ["Size of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0"] [:: std :: mem :: size_of :: < std_basic_string > () - 24usize] ;
    ["Align of template specialization: std_basic_string_open0_char_std_char_traits_open1_char_close1_std_allocator_open1_char_close1_close0"] [:: std :: mem :: align_of :: < std_basic_string > () - 8usize] ;
};
const _: () = {
    ["Size of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::size_of::<std_char_traits>() - 1usize];
    ["Align of template specialization: std_char_traits_open0_char_close0"]
        [::std::mem::align_of::<std_char_traits>() - 1usize];
};
const _: () = {
    ["Size of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::size_of::<std_allocator>() - 1usize];
    ["Align of template specialization: std_allocator_open0_char_close0"]
        [::std::mem::align_of::<std_allocator>() - 1usize];
};
pub type value_type = bool;
const _: () = {
    ["Size of template specialization: std_unique_ptr_open0_void_std___builtin_new_allocator___builtin_new_deleter_close0"] [:: std :: mem :: size_of :: < std_unique_ptr > () - 24usize] ;
    ["Align of template specialization: std_unique_ptr_open0_void_std___builtin_new_allocator___builtin_new_deleter_close0"] [:: std :: mem :: align_of :: < std_unique_ptr > () - 8usize] ;
};
const _: () = {
    ["Size of template specialization: swift_RefCounts_open0_swift_InlineRefCountBits_close0"]
        [::std::mem::size_of::<swift_RefCounts>() - 8usize];
    ["Align of template specialization: swift_RefCounts_open0_swift_InlineRefCountBits_close0"]
        [::std::mem::align_of::<swift_RefCounts>() - 8usize];
};
const _: () = {
    ["Size of template specialization: swift_RefCounts_open0_swift_SideTableRefCountBits_close0"]
        [::std::mem::size_of::<swift_RefCounts>() - 16usize];
    ["Align of template specialization: swift_RefCounts_open0_swift_SideTableRefCountBits_close0"] [:: std :: mem :: align_of :: < swift_RefCounts > () - 16usize] ;
};
const _: () = {
    ["Size of template specialization: std___make_signed_t_open0_unsigned_long_close0"]
        [::std::mem::size_of::<std___make_signed_t<::std::os::raw::c_ulong>>() - 8usize];
    ["Align of template specialization: std___make_signed_t_open0_unsigned_long_close0"]
        [::std::mem::align_of::<std___make_signed_t<::std::os::raw::c_ulong>>() - 8usize];
};
pub const Immortal_t_Immortal: Immortal_t = 0;
pub type Immortal_t = ::std::os::raw::c_uint;
