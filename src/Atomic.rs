/* automatically generated by rust-bindgen 0.69.4 */

#![allow(
    dead_code,
    non_snake_case,
    non_camel_case_types,
    non_upper_case_globals,
    improper_ctypes
)]
pub type _Tp = ();

#[allow(non_snake_case, non_camel_case_types, non_upper_case_globals)]
pub mod root {
    #[repr(C)]
    #[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
    pub struct __BindgenBitfieldUnit<Storage> {
        storage: Storage,
    }
    impl<Storage> __BindgenBitfieldUnit<Storage> {
        #[inline]
        pub const fn new(storage: Storage) -> Self {
            Self { storage }
        }
    }
    impl<Storage> __BindgenBitfieldUnit<Storage>
    where
        Storage: AsRef<[u8]> + AsMut<[u8]>,
    {
        #[inline]
        pub fn get_bit(&self, index: usize) -> bool {
            debug_assert!(index / 8 < self.storage.as_ref().len());
            let byte_index = index / 8;
            let byte = self.storage.as_ref()[byte_index];
            let bit_index = if cfg!(target_endian = "big") {
                7 - (index % 8)
            } else {
                index % 8
            };
            let mask = 1 << bit_index;
            byte & mask == mask
        }
        #[inline]
        pub fn set_bit(&mut self, index: usize, val: bool) {
            debug_assert!(index / 8 < self.storage.as_ref().len());
            let byte_index = index / 8;
            let byte = &mut self.storage.as_mut()[byte_index];
            let bit_index = if cfg!(target_endian = "big") {
                7 - (index % 8)
            } else {
                index % 8
            };
            let mask = 1 << bit_index;
            if val {
                *byte |= mask;
            } else {
                *byte &= !mask;
            }
        }
        #[inline]
        pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
            debug_assert!(bit_width <= 64);
            debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
            debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
            let mut val = 0;
            for i in 0..(bit_width as usize) {
                if self.get_bit(i + bit_offset) {
                    let index = if cfg!(target_endian = "big") {
                        bit_width as usize - 1 - i
                    } else {
                        i
                    };
                    val |= 1 << index;
                }
            }
            val
        }
        #[inline]
        pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
            debug_assert!(bit_width <= 64);
            debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
            debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
            for i in 0..(bit_width as usize) {
                let mask = 1 << i;
                let val_bit_is_set = val & mask == mask;
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                self.set_bit(index + bit_offset, val_bit_is_set);
            }
        }
    }
    #[derive(PartialEq, Copy, Clone, Hash, Debug, Default)]
    #[repr(transparent)]
    pub struct __BindgenFloat16(pub u16);
    #[allow(unused_imports)]
    use self::super::root;
    pub const _LIBCPP_ABI_VERSION: u32 = 1;
    pub const _LIBCPP_HARDENING_MODE_DEFAULT: u32 = 2;
    pub const _LIBCPP_VERSION: u32 = 180100;
    pub const _LIBCPP_STD_VER: u32 = 14;
    pub const _LIBCPP_OBJECT_FORMAT_MACHO: u32 = 1;
    pub const _LIBCPP_HARDENING_MODE_NONE: u32 = 2;
    pub const _LIBCPP_HARDENING_MODE_FAST: u32 = 4;
    pub const _LIBCPP_HARDENING_MODE_EXTENSIVE: u32 = 16;
    pub const _LIBCPP_HARDENING_MODE_DEBUG: u32 = 8;
    pub const _LIBCPP_HARDENING_MODE: u32 = 2;
    pub const _LIBCPP_LOCALE__L_EXTENSIONS: u32 = 1;
    pub const SWIFT_COMPILER_IS_MSVC: u32 = 0;
    pub const SWIFT_BUG_REPORT_URL: &[u8; 47] = b"https://swift.org/contributing/#reporting-bugs\0";
    pub const SWIFT_BUG_REPORT_MESSAGE_BASE: &[u8; 69] =
        b"submit a bug report (https://swift.org/contributing/#reporting-bugs)\0";
    pub const SWIFT_BUG_REPORT_MESSAGE: &[u8; 76] =
        b"please submit a bug report (https://swift.org/contributing/#reporting-bugs)\0";
    pub const SWIFT_CRASH_BUG_REPORT_MESSAGE : & [u8 ; 109] = b"Please submit a bug report (https://swift.org/contributing/#reporting-bugs) and include the crash backtrace.\0" ;
    pub const SWIFT_POINTER_IS_8_BYTES: u32 = 1;
    pub const SWIFT_POINTER_IS_4_BYTES: u32 = 0;
    pub const SWIFT_OBJC_INTEROP: u32 = 1;
    pub const SWIFT_HAS_ISA_MASKING: u32 = 1;
    pub const SWIFT_HAS_OPAQUE_ISAS: u32 = 0;
    pub const SWIFT_STDLIB_HAS_MALLOC_TYPE: u32 = 0;
    pub const SWIFT_CLASS_IS_SWIFT_MASK: u32 = 2;
    pub const SWIFT_IMAGE_EXPORTS_swiftCore: u32 = 0;
    pub const SWIFT_IMAGE_EXPORTS_swift_Concurrency: u32 = 0;
    pub const SWIFT_IMAGE_EXPORTS_swiftDistributed: u32 = 0;
    pub const SWIFT_IMAGE_EXPORTS_swift_Differentiation: u32 = 0;
    pub const SWIFT_COMPACT_ABSOLUTE_FUNCTION_POINTER: u32 = 0;
    pub const SWIFT_PTRAUTH: u32 = 0;
    pub const DYNAMIC_TARGETS_ENABLED: u32 = 0;
    pub const TARGET_OS_MAC: u32 = 1;
    pub const TARGET_OS_OSX: u32 = 1;
    pub const TARGET_OS_IPHONE: u32 = 0;
    pub const TARGET_OS_IOS: u32 = 0;
    pub const TARGET_OS_WATCH: u32 = 0;
    pub const TARGET_OS_TV: u32 = 0;
    pub const TARGET_OS_MACCATALYST: u32 = 0;
    pub const TARGET_OS_UIKITFORMAC: u32 = 0;
    pub const TARGET_OS_SIMULATOR: u32 = 0;
    pub const TARGET_OS_EMBEDDED: u32 = 0;
    pub const TARGET_OS_UNIX: u32 = 0;
    pub const TARGET_OS_RTKIT: u32 = 0;
    pub const TARGET_RT_LITTLE_ENDIAN: u32 = 1;
    pub const TARGET_RT_BIG_ENDIAN: u32 = 0;
    pub const TARGET_RT_64_BIT: u32 = 1;
    pub const TARGET_RT_MAC_CFM: u32 = 0;
    pub const TARGET_RT_MAC_MACHO: u32 = 1;
    pub const TARGET_CPU_ARM64: u32 = 1;
    pub const TARGET_OS_VISION: u32 = 0;
    pub const TARGET_OS_DRIVERKIT: u32 = 0;
    pub const TARGET_OS_WIN32: u32 = 0;
    pub const TARGET_OS_WINDOWS: u32 = 0;
    pub const TARGET_OS_LINUX: u32 = 0;
    pub const TARGET_CPU_PPC: u32 = 0;
    pub const TARGET_CPU_PPC64: u32 = 0;
    pub const TARGET_CPU_68K: u32 = 0;
    pub const TARGET_CPU_X86: u32 = 0;
    pub const TARGET_CPU_X86_64: u32 = 0;
    pub const TARGET_CPU_ARM: u32 = 0;
    pub const TARGET_CPU_MIPS: u32 = 0;
    pub const TARGET_CPU_SPARC: u32 = 0;
    pub const TARGET_CPU_ALPHA: u32 = 0;
    pub const TARGET_IPHONE_SIMULATOR: u32 = 0;
    pub const TARGET_OS_NANO: u32 = 0;
    pub const SWIFT_BACKTRACE_ON_CRASH_SUPPORTED: u32 = 1;
    pub const SWIFT_BACKTRACE_SECTION: &[u8; 24] = b"__DATA,swift5_backtrace\0";
    pub const SWIFT_PAGE_SIZE: u32 = 16384;
    pub const __has_safe_buffers: u32 = 1;
    pub const __DARWIN_ONLY_64_BIT_INO_T: u32 = 1;
    pub const __DARWIN_ONLY_UNIX_CONFORMANCE: u32 = 1;
    pub const __DARWIN_ONLY_VERS_1050: u32 = 1;
    pub const __DARWIN_UNIX03: u32 = 1;
    pub const __DARWIN_64_BIT_INO_T: u32 = 1;
    pub const __DARWIN_VERS_1050: u32 = 1;
    pub const __DARWIN_NON_CANCELABLE: u32 = 0;
    pub const __DARWIN_SUF_EXTSN: &[u8; 14] = b"$DARWIN_EXTSN\0";
    pub const __DARWIN_C_ANSI: u32 = 4096;
    pub const __DARWIN_C_FULL: u32 = 900000;
    pub const __DARWIN_C_LEVEL: u32 = 900000;
    pub const __DARWIN_NO_LONG_LONG: u32 = 0;
    pub const _DARWIN_FEATURE_64_BIT_INODE: u32 = 1;
    pub const _DARWIN_FEATURE_ONLY_64_BIT_INODE: u32 = 1;
    pub const _DARWIN_FEATURE_ONLY_VERS_1050: u32 = 1;
    pub const _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE: u32 = 1;
    pub const _DARWIN_FEATURE_UNIX_CONFORMANCE: u32 = 3;
    pub const __has_ptrcheck: u32 = 0;
    pub const __API_TO_BE_DEPRECATED: u32 = 100000;
    pub const __API_TO_BE_DEPRECATED_MACOS: u32 = 100000;
    pub const __API_TO_BE_DEPRECATED_IOS: u32 = 100000;
    pub const __API_TO_BE_DEPRECATED_MACCATALYST: u32 = 100000;
    pub const __API_TO_BE_DEPRECATED_WATCHOS: u32 = 100000;
    pub const __API_TO_BE_DEPRECATED_TVOS: u32 = 100000;
    pub const __API_TO_BE_DEPRECATED_DRIVERKIT: u32 = 100000;
    pub const __API_TO_BE_DEPRECATED_VISIONOS: u32 = 100000;
    pub const __MAC_10_0: u32 = 1000;
    pub const __MAC_10_1: u32 = 1010;
    pub const __MAC_10_2: u32 = 1020;
    pub const __MAC_10_3: u32 = 1030;
    pub const __MAC_10_4: u32 = 1040;
    pub const __MAC_10_5: u32 = 1050;
    pub const __MAC_10_6: u32 = 1060;
    pub const __MAC_10_7: u32 = 1070;
    pub const __MAC_10_8: u32 = 1080;
    pub const __MAC_10_9: u32 = 1090;
    pub const __MAC_10_10: u32 = 101000;
    pub const __MAC_10_10_2: u32 = 101002;
    pub const __MAC_10_10_3: u32 = 101003;
    pub const __MAC_10_11: u32 = 101100;
    pub const __MAC_10_11_2: u32 = 101102;
    pub const __MAC_10_11_3: u32 = 101103;
    pub const __MAC_10_11_4: u32 = 101104;
    pub const __MAC_10_12: u32 = 101200;
    pub const __MAC_10_12_1: u32 = 101201;
    pub const __MAC_10_12_2: u32 = 101202;
    pub const __MAC_10_12_4: u32 = 101204;
    pub const __MAC_10_13: u32 = 101300;
    pub const __MAC_10_13_1: u32 = 101301;
    pub const __MAC_10_13_2: u32 = 101302;
    pub const __MAC_10_13_4: u32 = 101304;
    pub const __MAC_10_14: u32 = 101400;
    pub const __MAC_10_14_1: u32 = 101401;
    pub const __MAC_10_14_4: u32 = 101404;
    pub const __MAC_10_14_5: u32 = 101405;
    pub const __MAC_10_14_6: u32 = 101406;
    pub const __MAC_10_15: u32 = 101500;
    pub const __MAC_10_15_1: u32 = 101501;
    pub const __MAC_10_15_4: u32 = 101504;
    pub const __MAC_10_16: u32 = 101600;
    pub const __MAC_11_0: u32 = 110000;
    pub const __MAC_11_1: u32 = 110100;
    pub const __MAC_11_3: u32 = 110300;
    pub const __MAC_11_4: u32 = 110400;
    pub const __MAC_11_5: u32 = 110500;
    pub const __MAC_11_6: u32 = 110600;
    pub const __MAC_12_0: u32 = 120000;
    pub const __MAC_12_1: u32 = 120100;
    pub const __MAC_12_2: u32 = 120200;
    pub const __MAC_12_3: u32 = 120300;
    pub const __MAC_12_4: u32 = 120400;
    pub const __MAC_12_5: u32 = 120500;
    pub const __MAC_12_6: u32 = 120600;
    pub const __MAC_12_7: u32 = 120700;
    pub const __MAC_13_0: u32 = 130000;
    pub const __MAC_13_1: u32 = 130100;
    pub const __MAC_13_2: u32 = 130200;
    pub const __MAC_13_3: u32 = 130300;
    pub const __MAC_13_4: u32 = 130400;
    pub const __MAC_13_5: u32 = 130500;
    pub const __MAC_13_6: u32 = 130600;
    pub const __MAC_14_0: u32 = 140000;
    pub const __MAC_14_1: u32 = 140100;
    pub const __MAC_14_2: u32 = 140200;
    pub const __MAC_14_3: u32 = 140300;
    pub const __MAC_14_4: u32 = 140400;
    pub const __MAC_14_5: u32 = 140500;
    pub const __MAC_15_0: u32 = 150000;
    pub const __IPHONE_2_0: u32 = 20000;
    pub const __IPHONE_2_1: u32 = 20100;
    pub const __IPHONE_2_2: u32 = 20200;
    pub const __IPHONE_3_0: u32 = 30000;
    pub const __IPHONE_3_1: u32 = 30100;
    pub const __IPHONE_3_2: u32 = 30200;
    pub const __IPHONE_4_0: u32 = 40000;
    pub const __IPHONE_4_1: u32 = 40100;
    pub const __IPHONE_4_2: u32 = 40200;
    pub const __IPHONE_4_3: u32 = 40300;
    pub const __IPHONE_5_0: u32 = 50000;
    pub const __IPHONE_5_1: u32 = 50100;
    pub const __IPHONE_6_0: u32 = 60000;
    pub const __IPHONE_6_1: u32 = 60100;
    pub const __IPHONE_7_0: u32 = 70000;
    pub const __IPHONE_7_1: u32 = 70100;
    pub const __IPHONE_8_0: u32 = 80000;
    pub const __IPHONE_8_1: u32 = 80100;
    pub const __IPHONE_8_2: u32 = 80200;
    pub const __IPHONE_8_3: u32 = 80300;
    pub const __IPHONE_8_4: u32 = 80400;
    pub const __IPHONE_9_0: u32 = 90000;
    pub const __IPHONE_9_1: u32 = 90100;
    pub const __IPHONE_9_2: u32 = 90200;
    pub const __IPHONE_9_3: u32 = 90300;
    pub const __IPHONE_10_0: u32 = 100000;
    pub const __IPHONE_10_1: u32 = 100100;
    pub const __IPHONE_10_2: u32 = 100200;
    pub const __IPHONE_10_3: u32 = 100300;
    pub const __IPHONE_11_0: u32 = 110000;
    pub const __IPHONE_11_1: u32 = 110100;
    pub const __IPHONE_11_2: u32 = 110200;
    pub const __IPHONE_11_3: u32 = 110300;
    pub const __IPHONE_11_4: u32 = 110400;
    pub const __IPHONE_12_0: u32 = 120000;
    pub const __IPHONE_12_1: u32 = 120100;
    pub const __IPHONE_12_2: u32 = 120200;
    pub const __IPHONE_12_3: u32 = 120300;
    pub const __IPHONE_12_4: u32 = 120400;
    pub const __IPHONE_13_0: u32 = 130000;
    pub const __IPHONE_13_1: u32 = 130100;
    pub const __IPHONE_13_2: u32 = 130200;
    pub const __IPHONE_13_3: u32 = 130300;
    pub const __IPHONE_13_4: u32 = 130400;
    pub const __IPHONE_13_5: u32 = 130500;
    pub const __IPHONE_13_6: u32 = 130600;
    pub const __IPHONE_13_7: u32 = 130700;
    pub const __IPHONE_14_0: u32 = 140000;
    pub const __IPHONE_14_1: u32 = 140100;
    pub const __IPHONE_14_2: u32 = 140200;
    pub const __IPHONE_14_3: u32 = 140300;
    pub const __IPHONE_14_5: u32 = 140500;
    pub const __IPHONE_14_4: u32 = 140400;
    pub const __IPHONE_14_6: u32 = 140600;
    pub const __IPHONE_14_7: u32 = 140700;
    pub const __IPHONE_14_8: u32 = 140800;
    pub const __IPHONE_15_0: u32 = 150000;
    pub const __IPHONE_15_1: u32 = 150100;
    pub const __IPHONE_15_2: u32 = 150200;
    pub const __IPHONE_15_3: u32 = 150300;
    pub const __IPHONE_15_4: u32 = 150400;
    pub const __IPHONE_15_5: u32 = 150500;
    pub const __IPHONE_15_6: u32 = 150600;
    pub const __IPHONE_15_7: u32 = 150700;
    pub const __IPHONE_15_8: u32 = 150800;
    pub const __IPHONE_16_0: u32 = 160000;
    pub const __IPHONE_16_1: u32 = 160100;
    pub const __IPHONE_16_2: u32 = 160200;
    pub const __IPHONE_16_3: u32 = 160300;
    pub const __IPHONE_16_4: u32 = 160400;
    pub const __IPHONE_16_5: u32 = 160500;
    pub const __IPHONE_16_6: u32 = 160600;
    pub const __IPHONE_16_7: u32 = 160700;
    pub const __IPHONE_17_0: u32 = 170000;
    pub const __IPHONE_17_1: u32 = 170100;
    pub const __IPHONE_17_2: u32 = 170200;
    pub const __IPHONE_17_3: u32 = 170300;
    pub const __IPHONE_17_4: u32 = 170400;
    pub const __IPHONE_17_5: u32 = 170500;
    pub const __IPHONE_18_0: u32 = 180000;
    pub const __WATCHOS_1_0: u32 = 10000;
    pub const __WATCHOS_2_0: u32 = 20000;
    pub const __WATCHOS_2_1: u32 = 20100;
    pub const __WATCHOS_2_2: u32 = 20200;
    pub const __WATCHOS_3_0: u32 = 30000;
    pub const __WATCHOS_3_1: u32 = 30100;
    pub const __WATCHOS_3_1_1: u32 = 30101;
    pub const __WATCHOS_3_2: u32 = 30200;
    pub const __WATCHOS_4_0: u32 = 40000;
    pub const __WATCHOS_4_1: u32 = 40100;
    pub const __WATCHOS_4_2: u32 = 40200;
    pub const __WATCHOS_4_3: u32 = 40300;
    pub const __WATCHOS_5_0: u32 = 50000;
    pub const __WATCHOS_5_1: u32 = 50100;
    pub const __WATCHOS_5_2: u32 = 50200;
    pub const __WATCHOS_5_3: u32 = 50300;
    pub const __WATCHOS_6_0: u32 = 60000;
    pub const __WATCHOS_6_1: u32 = 60100;
    pub const __WATCHOS_6_2: u32 = 60200;
    pub const __WATCHOS_7_0: u32 = 70000;
    pub const __WATCHOS_7_1: u32 = 70100;
    pub const __WATCHOS_7_2: u32 = 70200;
    pub const __WATCHOS_7_3: u32 = 70300;
    pub const __WATCHOS_7_4: u32 = 70400;
    pub const __WATCHOS_7_5: u32 = 70500;
    pub const __WATCHOS_7_6: u32 = 70600;
    pub const __WATCHOS_8_0: u32 = 80000;
    pub const __WATCHOS_8_1: u32 = 80100;
    pub const __WATCHOS_8_3: u32 = 80300;
    pub const __WATCHOS_8_4: u32 = 80400;
    pub const __WATCHOS_8_5: u32 = 80500;
    pub const __WATCHOS_8_6: u32 = 80600;
    pub const __WATCHOS_8_7: u32 = 80700;
    pub const __WATCHOS_8_8: u32 = 80800;
    pub const __WATCHOS_9_0: u32 = 90000;
    pub const __WATCHOS_9_1: u32 = 90100;
    pub const __WATCHOS_9_2: u32 = 90200;
    pub const __WATCHOS_9_3: u32 = 90300;
    pub const __WATCHOS_9_4: u32 = 90400;
    pub const __WATCHOS_9_5: u32 = 90500;
    pub const __WATCHOS_9_6: u32 = 90600;
    pub const __WATCHOS_10_0: u32 = 100000;
    pub const __WATCHOS_10_1: u32 = 100100;
    pub const __WATCHOS_10_2: u32 = 100200;
    pub const __WATCHOS_10_3: u32 = 100300;
    pub const __WATCHOS_10_4: u32 = 100400;
    pub const __WATCHOS_10_5: u32 = 100500;
    pub const __WATCHOS_11_0: u32 = 110000;
    pub const __TVOS_9_0: u32 = 90000;
    pub const __TVOS_9_1: u32 = 90100;
    pub const __TVOS_9_2: u32 = 90200;
    pub const __TVOS_10_0: u32 = 100000;
    pub const __TVOS_10_0_1: u32 = 100001;
    pub const __TVOS_10_1: u32 = 100100;
    pub const __TVOS_10_2: u32 = 100200;
    pub const __TVOS_11_0: u32 = 110000;
    pub const __TVOS_11_1: u32 = 110100;
    pub const __TVOS_11_2: u32 = 110200;
    pub const __TVOS_11_3: u32 = 110300;
    pub const __TVOS_11_4: u32 = 110400;
    pub const __TVOS_12_0: u32 = 120000;
    pub const __TVOS_12_1: u32 = 120100;
    pub const __TVOS_12_2: u32 = 120200;
    pub const __TVOS_12_3: u32 = 120300;
    pub const __TVOS_12_4: u32 = 120400;
    pub const __TVOS_13_0: u32 = 130000;
    pub const __TVOS_13_2: u32 = 130200;
    pub const __TVOS_13_3: u32 = 130300;
    pub const __TVOS_13_4: u32 = 130400;
    pub const __TVOS_14_0: u32 = 140000;
    pub const __TVOS_14_1: u32 = 140100;
    pub const __TVOS_14_2: u32 = 140200;
    pub const __TVOS_14_3: u32 = 140300;
    pub const __TVOS_14_5: u32 = 140500;
    pub const __TVOS_14_6: u32 = 140600;
    pub const __TVOS_14_7: u32 = 140700;
    pub const __TVOS_15_0: u32 = 150000;
    pub const __TVOS_15_1: u32 = 150100;
    pub const __TVOS_15_2: u32 = 150200;
    pub const __TVOS_15_3: u32 = 150300;
    pub const __TVOS_15_4: u32 = 150400;
    pub const __TVOS_15_5: u32 = 150500;
    pub const __TVOS_15_6: u32 = 150600;
    pub const __TVOS_16_0: u32 = 160000;
    pub const __TVOS_16_1: u32 = 160100;
    pub const __TVOS_16_2: u32 = 160200;
    pub const __TVOS_16_3: u32 = 160300;
    pub const __TVOS_16_4: u32 = 160400;
    pub const __TVOS_16_5: u32 = 160500;
    pub const __TVOS_16_6: u32 = 160600;
    pub const __TVOS_17_0: u32 = 170000;
    pub const __TVOS_17_1: u32 = 170100;
    pub const __TVOS_17_2: u32 = 170200;
    pub const __TVOS_17_3: u32 = 170300;
    pub const __TVOS_17_4: u32 = 170400;
    pub const __TVOS_17_5: u32 = 170500;
    pub const __TVOS_18_0: u32 = 180000;
    pub const __BRIDGEOS_2_0: u32 = 20000;
    pub const __BRIDGEOS_3_0: u32 = 30000;
    pub const __BRIDGEOS_3_1: u32 = 30100;
    pub const __BRIDGEOS_3_4: u32 = 30400;
    pub const __BRIDGEOS_4_0: u32 = 40000;
    pub const __BRIDGEOS_4_1: u32 = 40100;
    pub const __BRIDGEOS_5_0: u32 = 50000;
    pub const __BRIDGEOS_5_1: u32 = 50100;
    pub const __BRIDGEOS_5_3: u32 = 50300;
    pub const __BRIDGEOS_6_0: u32 = 60000;
    pub const __BRIDGEOS_6_2: u32 = 60200;
    pub const __BRIDGEOS_6_4: u32 = 60400;
    pub const __BRIDGEOS_6_5: u32 = 60500;
    pub const __BRIDGEOS_6_6: u32 = 60600;
    pub const __BRIDGEOS_7_0: u32 = 70000;
    pub const __BRIDGEOS_7_1: u32 = 70100;
    pub const __BRIDGEOS_7_2: u32 = 70200;
    pub const __BRIDGEOS_7_3: u32 = 70300;
    pub const __BRIDGEOS_7_4: u32 = 70400;
    pub const __BRIDGEOS_7_6: u32 = 70600;
    pub const __BRIDGEOS_8_0: u32 = 80000;
    pub const __BRIDGEOS_8_1: u32 = 80100;
    pub const __BRIDGEOS_8_2: u32 = 80200;
    pub const __BRIDGEOS_8_3: u32 = 80300;
    pub const __BRIDGEOS_8_4: u32 = 80400;
    pub const __BRIDGEOS_8_5: u32 = 80500;
    pub const __BRIDGEOS_9_0: u32 = 90000;
    pub const __DRIVERKIT_19_0: u32 = 190000;
    pub const __DRIVERKIT_20_0: u32 = 200000;
    pub const __DRIVERKIT_21_0: u32 = 210000;
    pub const __DRIVERKIT_22_0: u32 = 220000;
    pub const __DRIVERKIT_22_4: u32 = 220400;
    pub const __DRIVERKIT_22_5: u32 = 220500;
    pub const __DRIVERKIT_22_6: u32 = 220600;
    pub const __DRIVERKIT_23_0: u32 = 230000;
    pub const __DRIVERKIT_23_1: u32 = 230100;
    pub const __DRIVERKIT_23_2: u32 = 230200;
    pub const __DRIVERKIT_23_3: u32 = 230300;
    pub const __DRIVERKIT_23_4: u32 = 230400;
    pub const __DRIVERKIT_23_5: u32 = 230500;
    pub const __DRIVERKIT_24_0: u32 = 240000;
    pub const __VISIONOS_1_0: u32 = 10000;
    pub const __VISIONOS_1_1: u32 = 10100;
    pub const __VISIONOS_1_2: u32 = 10200;
    pub const __VISIONOS_2_0: u32 = 20000;
    pub const MAC_OS_X_VERSION_10_0: u32 = 1000;
    pub const MAC_OS_X_VERSION_10_1: u32 = 1010;
    pub const MAC_OS_X_VERSION_10_2: u32 = 1020;
    pub const MAC_OS_X_VERSION_10_3: u32 = 1030;
    pub const MAC_OS_X_VERSION_10_4: u32 = 1040;
    pub const MAC_OS_X_VERSION_10_5: u32 = 1050;
    pub const MAC_OS_X_VERSION_10_6: u32 = 1060;
    pub const MAC_OS_X_VERSION_10_7: u32 = 1070;
    pub const MAC_OS_X_VERSION_10_8: u32 = 1080;
    pub const MAC_OS_X_VERSION_10_9: u32 = 1090;
    pub const MAC_OS_X_VERSION_10_10: u32 = 101000;
    pub const MAC_OS_X_VERSION_10_10_2: u32 = 101002;
    pub const MAC_OS_X_VERSION_10_10_3: u32 = 101003;
    pub const MAC_OS_X_VERSION_10_11: u32 = 101100;
    pub const MAC_OS_X_VERSION_10_11_2: u32 = 101102;
    pub const MAC_OS_X_VERSION_10_11_3: u32 = 101103;
    pub const MAC_OS_X_VERSION_10_11_4: u32 = 101104;
    pub const MAC_OS_X_VERSION_10_12: u32 = 101200;
    pub const MAC_OS_X_VERSION_10_12_1: u32 = 101201;
    pub const MAC_OS_X_VERSION_10_12_2: u32 = 101202;
    pub const MAC_OS_X_VERSION_10_12_4: u32 = 101204;
    pub const MAC_OS_X_VERSION_10_13: u32 = 101300;
    pub const MAC_OS_X_VERSION_10_13_1: u32 = 101301;
    pub const MAC_OS_X_VERSION_10_13_2: u32 = 101302;
    pub const MAC_OS_X_VERSION_10_13_4: u32 = 101304;
    pub const MAC_OS_X_VERSION_10_14: u32 = 101400;
    pub const MAC_OS_X_VERSION_10_14_1: u32 = 101401;
    pub const MAC_OS_X_VERSION_10_14_4: u32 = 101404;
    pub const MAC_OS_X_VERSION_10_14_5: u32 = 101405;
    pub const MAC_OS_X_VERSION_10_14_6: u32 = 101406;
    pub const MAC_OS_X_VERSION_10_15: u32 = 101500;
    pub const MAC_OS_X_VERSION_10_15_1: u32 = 101501;
    pub const MAC_OS_X_VERSION_10_15_4: u32 = 101504;
    pub const MAC_OS_X_VERSION_10_16: u32 = 101600;
    pub const MAC_OS_VERSION_11_0: u32 = 110000;
    pub const MAC_OS_VERSION_11_1: u32 = 110100;
    pub const MAC_OS_VERSION_11_3: u32 = 110300;
    pub const MAC_OS_VERSION_11_4: u32 = 110400;
    pub const MAC_OS_VERSION_11_5: u32 = 110500;
    pub const MAC_OS_VERSION_11_6: u32 = 110600;
    pub const MAC_OS_VERSION_12_0: u32 = 120000;
    pub const MAC_OS_VERSION_12_1: u32 = 120100;
    pub const MAC_OS_VERSION_12_2: u32 = 120200;
    pub const MAC_OS_VERSION_12_3: u32 = 120300;
    pub const MAC_OS_VERSION_12_4: u32 = 120400;
    pub const MAC_OS_VERSION_12_5: u32 = 120500;
    pub const MAC_OS_VERSION_12_6: u32 = 120600;
    pub const MAC_OS_VERSION_12_7: u32 = 120700;
    pub const MAC_OS_VERSION_13_0: u32 = 130000;
    pub const MAC_OS_VERSION_13_1: u32 = 130100;
    pub const MAC_OS_VERSION_13_2: u32 = 130200;
    pub const MAC_OS_VERSION_13_3: u32 = 130300;
    pub const MAC_OS_VERSION_13_4: u32 = 130400;
    pub const MAC_OS_VERSION_13_5: u32 = 130500;
    pub const MAC_OS_VERSION_13_6: u32 = 130600;
    pub const MAC_OS_VERSION_14_0: u32 = 140000;
    pub const MAC_OS_VERSION_14_1: u32 = 140100;
    pub const MAC_OS_VERSION_14_2: u32 = 140200;
    pub const MAC_OS_VERSION_14_3: u32 = 140300;
    pub const MAC_OS_VERSION_14_4: u32 = 140400;
    pub const MAC_OS_VERSION_14_5: u32 = 140500;
    pub const MAC_OS_VERSION_15_0: u32 = 150000;
    pub const __MAC_OS_X_VERSION_MAX_ALLOWED: u32 = 150000;
    pub const __ENABLE_LEGACY_MAC_AVAILABILITY: u32 = 1;
    pub const USE_CLANG_TYPES: u32 = 0;
    pub const __PTHREAD_SIZE__: u32 = 8176;
    pub const __PTHREAD_ATTR_SIZE__: u32 = 56;
    pub const __PTHREAD_MUTEXATTR_SIZE__: u32 = 8;
    pub const __PTHREAD_MUTEX_SIZE__: u32 = 56;
    pub const __PTHREAD_CONDATTR_SIZE__: u32 = 8;
    pub const __PTHREAD_COND_SIZE__: u32 = 40;
    pub const __PTHREAD_ONCE_SIZE__: u32 = 8;
    pub const __PTHREAD_RWLOCK_SIZE__: u32 = 192;
    pub const __PTHREAD_RWLOCKATTR_SIZE__: u32 = 16;
    pub const __DARWIN_WCHAR_MIN: i32 = -2147483648;
    pub const _FORTIFY_SOURCE: u32 = 2;
    pub const __DARWIN_NSIG: u32 = 32;
    pub const NSIG: u32 = 32;
    pub const _ARM_SIGNAL_: u32 = 1;
    pub const SIGHUP: u32 = 1;
    pub const SIGINT: u32 = 2;
    pub const SIGQUIT: u32 = 3;
    pub const SIGILL: u32 = 4;
    pub const SIGTRAP: u32 = 5;
    pub const SIGABRT: u32 = 6;
    pub const SIGIOT: u32 = 6;
    pub const SIGEMT: u32 = 7;
    pub const SIGFPE: u32 = 8;
    pub const SIGKILL: u32 = 9;
    pub const SIGBUS: u32 = 10;
    pub const SIGSEGV: u32 = 11;
    pub const SIGSYS: u32 = 12;
    pub const SIGPIPE: u32 = 13;
    pub const SIGALRM: u32 = 14;
    pub const SIGTERM: u32 = 15;
    pub const SIGURG: u32 = 16;
    pub const SIGSTOP: u32 = 17;
    pub const SIGTSTP: u32 = 18;
    pub const SIGCONT: u32 = 19;
    pub const SIGCHLD: u32 = 20;
    pub const SIGTTIN: u32 = 21;
    pub const SIGTTOU: u32 = 22;
    pub const SIGIO: u32 = 23;
    pub const SIGXCPU: u32 = 24;
    pub const SIGXFSZ: u32 = 25;
    pub const SIGVTALRM: u32 = 26;
    pub const SIGPROF: u32 = 27;
    pub const SIGWINCH: u32 = 28;
    pub const SIGINFO: u32 = 29;
    pub const SIGUSR1: u32 = 30;
    pub const SIGUSR2: u32 = 31;
    pub const __DARWIN_OPAQUE_ARM_THREAD_STATE64: u32 = 0;
    pub const USE_CLANG_STDDEF: u32 = 0;
    pub const SIGEV_NONE: u32 = 0;
    pub const SIGEV_SIGNAL: u32 = 1;
    pub const SIGEV_THREAD: u32 = 3;
    pub const ILL_NOOP: u32 = 0;
    pub const ILL_ILLOPC: u32 = 1;
    pub const ILL_ILLTRP: u32 = 2;
    pub const ILL_PRVOPC: u32 = 3;
    pub const ILL_ILLOPN: u32 = 4;
    pub const ILL_ILLADR: u32 = 5;
    pub const ILL_PRVREG: u32 = 6;
    pub const ILL_COPROC: u32 = 7;
    pub const ILL_BADSTK: u32 = 8;
    pub const FPE_NOOP: u32 = 0;
    pub const FPE_FLTDIV: u32 = 1;
    pub const FPE_FLTOVF: u32 = 2;
    pub const FPE_FLTUND: u32 = 3;
    pub const FPE_FLTRES: u32 = 4;
    pub const FPE_FLTINV: u32 = 5;
    pub const FPE_FLTSUB: u32 = 6;
    pub const FPE_INTDIV: u32 = 7;
    pub const FPE_INTOVF: u32 = 8;
    pub const SEGV_NOOP: u32 = 0;
    pub const SEGV_MAPERR: u32 = 1;
    pub const SEGV_ACCERR: u32 = 2;
    pub const BUS_NOOP: u32 = 0;
    pub const BUS_ADRALN: u32 = 1;
    pub const BUS_ADRERR: u32 = 2;
    pub const BUS_OBJERR: u32 = 3;
    pub const TRAP_BRKPT: u32 = 1;
    pub const TRAP_TRACE: u32 = 2;
    pub const CLD_NOOP: u32 = 0;
    pub const CLD_EXITED: u32 = 1;
    pub const CLD_KILLED: u32 = 2;
    pub const CLD_DUMPED: u32 = 3;
    pub const CLD_TRAPPED: u32 = 4;
    pub const CLD_STOPPED: u32 = 5;
    pub const CLD_CONTINUED: u32 = 6;
    pub const POLL_IN: u32 = 1;
    pub const POLL_OUT: u32 = 2;
    pub const POLL_MSG: u32 = 3;
    pub const POLL_ERR: u32 = 4;
    pub const POLL_PRI: u32 = 5;
    pub const POLL_HUP: u32 = 6;
    pub const SA_ONSTACK: u32 = 1;
    pub const SA_RESTART: u32 = 2;
    pub const SA_RESETHAND: u32 = 4;
    pub const SA_NOCLDSTOP: u32 = 8;
    pub const SA_NODEFER: u32 = 16;
    pub const SA_NOCLDWAIT: u32 = 32;
    pub const SA_SIGINFO: u32 = 64;
    pub const SA_USERTRAMP: u32 = 256;
    pub const SA_64REGSET: u32 = 512;
    pub const SA_USERSPACE_MASK: u32 = 127;
    pub const SIG_BLOCK: u32 = 1;
    pub const SIG_UNBLOCK: u32 = 2;
    pub const SIG_SETMASK: u32 = 3;
    pub const SI_USER: u32 = 65537;
    pub const SI_QUEUE: u32 = 65538;
    pub const SI_TIMER: u32 = 65539;
    pub const SI_ASYNCIO: u32 = 65540;
    pub const SI_MESGQ: u32 = 65541;
    pub const SS_ONSTACK: u32 = 1;
    pub const SS_DISABLE: u32 = 4;
    pub const MINSIGSTKSZ: u32 = 32768;
    pub const SIGSTKSZ: u32 = 131072;
    pub const SV_ONSTACK: u32 = 1;
    pub const SV_INTERRUPT: u32 = 2;
    pub const SV_RESETHAND: u32 = 4;
    pub const SV_NODEFER: u32 = 16;
    pub const SV_NOCLDSTOP: u32 = 8;
    pub const SV_SIGINFO: u32 = 64;
    pub const __WORDSIZE: u32 = 64;
    pub const INT8_MAX: u32 = 127;
    pub const INT16_MAX: u32 = 32767;
    pub const INT32_MAX: u32 = 2147483647;
    pub const INT64_MAX: u64 = 9223372036854775807;
    pub const INT8_MIN: i32 = -128;
    pub const INT16_MIN: i32 = -32768;
    pub const INT32_MIN: i32 = -2147483648;
    pub const INT64_MIN: i64 = -9223372036854775808;
    pub const UINT8_MAX: u32 = 255;
    pub const UINT16_MAX: u32 = 65535;
    pub const UINT32_MAX: u32 = 4294967295;
    pub const UINT64_MAX: i32 = -1;
    pub const INT_LEAST8_MIN: i32 = -128;
    pub const INT_LEAST16_MIN: i32 = -32768;
    pub const INT_LEAST32_MIN: i32 = -2147483648;
    pub const INT_LEAST64_MIN: i64 = -9223372036854775808;
    pub const INT_LEAST8_MAX: u32 = 127;
    pub const INT_LEAST16_MAX: u32 = 32767;
    pub const INT_LEAST32_MAX: u32 = 2147483647;
    pub const INT_LEAST64_MAX: u64 = 9223372036854775807;
    pub const UINT_LEAST8_MAX: u32 = 255;
    pub const UINT_LEAST16_MAX: u32 = 65535;
    pub const UINT_LEAST32_MAX: u32 = 4294967295;
    pub const UINT_LEAST64_MAX: i32 = -1;
    pub const INT_FAST8_MIN: i32 = -128;
    pub const INT_FAST16_MIN: i32 = -32768;
    pub const INT_FAST32_MIN: i32 = -2147483648;
    pub const INT_FAST64_MIN: i64 = -9223372036854775808;
    pub const INT_FAST8_MAX: u32 = 127;
    pub const INT_FAST16_MAX: u32 = 32767;
    pub const INT_FAST32_MAX: u32 = 2147483647;
    pub const INT_FAST64_MAX: u64 = 9223372036854775807;
    pub const UINT_FAST8_MAX: u32 = 255;
    pub const UINT_FAST16_MAX: u32 = 65535;
    pub const UINT_FAST32_MAX: u32 = 4294967295;
    pub const UINT_FAST64_MAX: i32 = -1;
    pub const INTPTR_MAX: u64 = 9223372036854775807;
    pub const INTPTR_MIN: i64 = -9223372036854775808;
    pub const UINTPTR_MAX: i32 = -1;
    pub const SIZE_MAX: i32 = -1;
    pub const WINT_MIN: i32 = -2147483648;
    pub const WINT_MAX: u32 = 2147483647;
    pub const SIG_ATOMIC_MIN: i32 = -2147483648;
    pub const SIG_ATOMIC_MAX: u32 = 2147483647;
    pub const PRIO_PROCESS: u32 = 0;
    pub const PRIO_PGRP: u32 = 1;
    pub const PRIO_USER: u32 = 2;
    pub const PRIO_DARWIN_THREAD: u32 = 3;
    pub const PRIO_DARWIN_PROCESS: u32 = 4;
    pub const PRIO_MIN: i32 = -20;
    pub const PRIO_MAX: u32 = 20;
    pub const PRIO_DARWIN_BG: u32 = 4096;
    pub const PRIO_DARWIN_NONUI: u32 = 4097;
    pub const RUSAGE_SELF: u32 = 0;
    pub const RUSAGE_CHILDREN: i32 = -1;
    pub const RUSAGE_INFO_V0: u32 = 0;
    pub const RUSAGE_INFO_V1: u32 = 1;
    pub const RUSAGE_INFO_V2: u32 = 2;
    pub const RUSAGE_INFO_V3: u32 = 3;
    pub const RUSAGE_INFO_V4: u32 = 4;
    pub const RUSAGE_INFO_V5: u32 = 5;
    pub const RUSAGE_INFO_V6: u32 = 6;
    pub const RUSAGE_INFO_CURRENT: u32 = 6;
    pub const RU_PROC_RUNS_RESLIDE: u32 = 1;
    pub const RLIMIT_CPU: u32 = 0;
    pub const RLIMIT_FSIZE: u32 = 1;
    pub const RLIMIT_DATA: u32 = 2;
    pub const RLIMIT_STACK: u32 = 3;
    pub const RLIMIT_CORE: u32 = 4;
    pub const RLIMIT_AS: u32 = 5;
    pub const RLIMIT_RSS: u32 = 5;
    pub const RLIMIT_MEMLOCK: u32 = 6;
    pub const RLIMIT_NPROC: u32 = 7;
    pub const RLIMIT_NOFILE: u32 = 8;
    pub const RLIM_NLIMITS: u32 = 9;
    pub const _RLIMIT_POSIX_FLAG: u32 = 4096;
    pub const RLIMIT_WAKEUPS_MONITOR: u32 = 1;
    pub const RLIMIT_CPU_USAGE_MONITOR: u32 = 2;
    pub const RLIMIT_THREAD_CPULIMITS: u32 = 3;
    pub const RLIMIT_FOOTPRINT_INTERVAL: u32 = 4;
    pub const WAKEMON_ENABLE: u32 = 1;
    pub const WAKEMON_DISABLE: u32 = 2;
    pub const WAKEMON_GET_PARAMS: u32 = 4;
    pub const WAKEMON_SET_DEFAULTS: u32 = 8;
    pub const WAKEMON_MAKE_FATAL: u32 = 16;
    pub const CPUMON_MAKE_FATAL: u32 = 4096;
    pub const FOOTPRINT_INTERVAL_RESET: u32 = 1;
    pub const IOPOL_TYPE_DISK: u32 = 0;
    pub const IOPOL_TYPE_VFS_ATIME_UPDATES: u32 = 2;
    pub const IOPOL_TYPE_VFS_MATERIALIZE_DATALESS_FILES: u32 = 3;
    pub const IOPOL_TYPE_VFS_STATFS_NO_DATA_VOLUME: u32 = 4;
    pub const IOPOL_TYPE_VFS_TRIGGER_RESOLVE: u32 = 5;
    pub const IOPOL_TYPE_VFS_IGNORE_CONTENT_PROTECTION: u32 = 6;
    pub const IOPOL_TYPE_VFS_IGNORE_PERMISSIONS: u32 = 7;
    pub const IOPOL_TYPE_VFS_SKIP_MTIME_UPDATE: u32 = 8;
    pub const IOPOL_TYPE_VFS_ALLOW_LOW_SPACE_WRITES: u32 = 9;
    pub const IOPOL_TYPE_VFS_DISALLOW_RW_FOR_O_EVTONLY: u32 = 10;
    pub const IOPOL_SCOPE_PROCESS: u32 = 0;
    pub const IOPOL_SCOPE_THREAD: u32 = 1;
    pub const IOPOL_SCOPE_DARWIN_BG: u32 = 2;
    pub const IOPOL_DEFAULT: u32 = 0;
    pub const IOPOL_IMPORTANT: u32 = 1;
    pub const IOPOL_PASSIVE: u32 = 2;
    pub const IOPOL_THROTTLE: u32 = 3;
    pub const IOPOL_UTILITY: u32 = 4;
    pub const IOPOL_STANDARD: u32 = 5;
    pub const IOPOL_APPLICATION: u32 = 5;
    pub const IOPOL_NORMAL: u32 = 1;
    pub const IOPOL_ATIME_UPDATES_DEFAULT: u32 = 0;
    pub const IOPOL_ATIME_UPDATES_OFF: u32 = 1;
    pub const IOPOL_MATERIALIZE_DATALESS_FILES_DEFAULT: u32 = 0;
    pub const IOPOL_MATERIALIZE_DATALESS_FILES_OFF: u32 = 1;
    pub const IOPOL_MATERIALIZE_DATALESS_FILES_ON: u32 = 2;
    pub const IOPOL_VFS_STATFS_NO_DATA_VOLUME_DEFAULT: u32 = 0;
    pub const IOPOL_VFS_STATFS_FORCE_NO_DATA_VOLUME: u32 = 1;
    pub const IOPOL_VFS_TRIGGER_RESOLVE_DEFAULT: u32 = 0;
    pub const IOPOL_VFS_TRIGGER_RESOLVE_OFF: u32 = 1;
    pub const IOPOL_VFS_CONTENT_PROTECTION_DEFAULT: u32 = 0;
    pub const IOPOL_VFS_CONTENT_PROTECTION_IGNORE: u32 = 1;
    pub const IOPOL_VFS_IGNORE_PERMISSIONS_OFF: u32 = 0;
    pub const IOPOL_VFS_IGNORE_PERMISSIONS_ON: u32 = 1;
    pub const IOPOL_VFS_SKIP_MTIME_UPDATE_OFF: u32 = 0;
    pub const IOPOL_VFS_SKIP_MTIME_UPDATE_ON: u32 = 1;
    pub const IOPOL_VFS_ALLOW_LOW_SPACE_WRITES_OFF: u32 = 0;
    pub const IOPOL_VFS_ALLOW_LOW_SPACE_WRITES_ON: u32 = 1;
    pub const IOPOL_VFS_DISALLOW_RW_FOR_O_EVTONLY_DEFAULT: u32 = 0;
    pub const IOPOL_VFS_DISALLOW_RW_FOR_O_EVTONLY_ON: u32 = 1;
    pub const IOPOL_VFS_NOCACHE_WRITE_FS_BLKSIZE_DEFAULT: u32 = 0;
    pub const IOPOL_VFS_NOCACHE_WRITE_FS_BLKSIZE_ON: u32 = 1;
    pub const WNOHANG: u32 = 1;
    pub const WUNTRACED: u32 = 2;
    pub const WCOREFLAG: u32 = 128;
    pub const _WSTOPPED: u32 = 127;
    pub const WEXITED: u32 = 4;
    pub const WSTOPPED: u32 = 8;
    pub const WCONTINUED: u32 = 16;
    pub const WNOWAIT: u32 = 32;
    pub const WAIT_ANY: i32 = -1;
    pub const WAIT_MYPGRP: u32 = 0;
    pub const _QUAD_HIGHWORD: u32 = 1;
    pub const _QUAD_LOWWORD: u32 = 0;
    pub const __DARWIN_LITTLE_ENDIAN: u32 = 1234;
    pub const __DARWIN_BIG_ENDIAN: u32 = 4321;
    pub const __DARWIN_PDP_ENDIAN: u32 = 3412;
    pub const LITTLE_ENDIAN: u32 = 1234;
    pub const BIG_ENDIAN: u32 = 4321;
    pub const PDP_ENDIAN: u32 = 3412;
    pub const __DARWIN_BYTE_ORDER: u32 = 1234;
    pub const BYTE_ORDER: u32 = 1234;
    pub const EXIT_FAILURE: u32 = 1;
    pub const EXIT_SUCCESS: u32 = 0;
    pub const RAND_MAX: u32 = 2147483647;
    pub const _LIBCPP_AVAILABILITY_HAS_INIT_PRIMARY_EXCEPTION: u32 = 0;
    pub const _LIBCPP_AVAILABILITY_HAS_FILESYSTEM_LIBRARY: u32 = 1;
    pub const _LIBCPP_AVAILABILITY_HAS_TO_CHARS_FLOATING_POINT: u32 = 1;
    pub const _LIBCPP_AVAILABILITY_HAS_SYNC: u32 = 1;
    pub const _LIBCPP_AVAILABILITY_HAS_VERBOSE_ABORT: u32 = 0;
    pub const _LIBCPP_AVAILABILITY_HAS_PMR: u32 = 1;
    pub const _LIBCPP_AVAILABILITY_HAS_TZDB: u32 = 0;
    pub const _LIBCPP_AVAILABILITY_HAS_PRINT: u32 = 0;
    pub const _LIBCPP_AVAILABILITY_HAS_ADDITIONAL_IOSTREAM_EXPLICIT_INSTANTIATIONS_1: u32 = 1;
    pub const __cpp_lib_chrono_udls: u32 = 201304;
    pub const __cpp_lib_complex_udls: u32 = 201309;
    pub const __cpp_lib_exchange_function: u32 = 201304;
    pub const __cpp_lib_generic_associative_lookup: u32 = 201304;
    pub const __cpp_lib_integer_sequence: u32 = 201304;
    pub const __cpp_lib_integral_constant_callable: u32 = 201304;
    pub const __cpp_lib_is_final: u32 = 201402;
    pub const __cpp_lib_is_null_pointer: u32 = 201309;
    pub const __cpp_lib_make_reverse_iterator: u32 = 201402;
    pub const __cpp_lib_make_unique: u32 = 201304;
    pub const __cpp_lib_null_iterators: u32 = 201304;
    pub const __cpp_lib_quoted_string_io: u32 = 201304;
    pub const __cpp_lib_result_of_sfinae: u32 = 201210;
    pub const __cpp_lib_robust_nonmodifying_seq_ops: u32 = 201304;
    pub const __cpp_lib_shared_timed_mutex: u32 = 201402;
    pub const __cpp_lib_string_udls: u32 = 201304;
    pub const __cpp_lib_transformation_trait_aliases: u32 = 201304;
    pub const __cpp_lib_transparent_operators: u32 = 201210;
    pub const __cpp_lib_tuple_element_t: u32 = 201402;
    pub const __cpp_lib_tuples_by_type: u32 = 201304;
    pub const __DARWIN_CLK_TCK: u32 = 100;
    pub const USE_CLANG_LIMITS: u32 = 0;
    pub const MB_LEN_MAX: u32 = 6;
    pub const CLK_TCK: u32 = 100;
    pub const CHAR_BIT: u32 = 8;
    pub const SCHAR_MAX: u32 = 127;
    pub const SCHAR_MIN: i32 = -128;
    pub const UCHAR_MAX: u32 = 255;
    pub const CHAR_MAX: u32 = 127;
    pub const CHAR_MIN: i32 = -128;
    pub const USHRT_MAX: u32 = 65535;
    pub const SHRT_MAX: u32 = 32767;
    pub const SHRT_MIN: i32 = -32768;
    pub const UINT_MAX: u32 = 4294967295;
    pub const INT_MAX: u32 = 2147483647;
    pub const INT_MIN: i32 = -2147483648;
    pub const ULONG_MAX: i32 = -1;
    pub const LONG_MAX: u64 = 9223372036854775807;
    pub const LONG_MIN: i64 = -9223372036854775808;
    pub const ULLONG_MAX: i32 = -1;
    pub const LLONG_MAX: u64 = 9223372036854775807;
    pub const LLONG_MIN: i64 = -9223372036854775808;
    pub const LONG_BIT: u32 = 64;
    pub const SSIZE_MAX: u64 = 9223372036854775807;
    pub const WORD_BIT: u32 = 32;
    pub const SIZE_T_MAX: i32 = -1;
    pub const UQUAD_MAX: i32 = -1;
    pub const QUAD_MAX: u64 = 9223372036854775807;
    pub const QUAD_MIN: i64 = -9223372036854775808;
    pub const ARG_MAX: u32 = 1048576;
    pub const CHILD_MAX: u32 = 266;
    pub const GID_MAX: u32 = 2147483647;
    pub const LINK_MAX: u32 = 32767;
    pub const MAX_CANON: u32 = 1024;
    pub const MAX_INPUT: u32 = 1024;
    pub const NAME_MAX: u32 = 255;
    pub const NGROUPS_MAX: u32 = 16;
    pub const UID_MAX: u32 = 2147483647;
    pub const OPEN_MAX: u32 = 10240;
    pub const PATH_MAX: u32 = 1024;
    pub const PIPE_BUF: u32 = 512;
    pub const BC_BASE_MAX: u32 = 99;
    pub const BC_DIM_MAX: u32 = 2048;
    pub const BC_SCALE_MAX: u32 = 99;
    pub const BC_STRING_MAX: u32 = 1000;
    pub const CHARCLASS_NAME_MAX: u32 = 14;
    pub const COLL_WEIGHTS_MAX: u32 = 2;
    pub const EQUIV_CLASS_MAX: u32 = 2;
    pub const EXPR_NEST_MAX: u32 = 32;
    pub const LINE_MAX: u32 = 2048;
    pub const RE_DUP_MAX: u32 = 255;
    pub const NZERO: u32 = 20;
    pub const _POSIX_ARG_MAX: u32 = 4096;
    pub const _POSIX_CHILD_MAX: u32 = 25;
    pub const _POSIX_LINK_MAX: u32 = 8;
    pub const _POSIX_MAX_CANON: u32 = 255;
    pub const _POSIX_MAX_INPUT: u32 = 255;
    pub const _POSIX_NAME_MAX: u32 = 14;
    pub const _POSIX_NGROUPS_MAX: u32 = 8;
    pub const _POSIX_OPEN_MAX: u32 = 20;
    pub const _POSIX_PATH_MAX: u32 = 256;
    pub const _POSIX_PIPE_BUF: u32 = 512;
    pub const _POSIX_SSIZE_MAX: u32 = 32767;
    pub const _POSIX_STREAM_MAX: u32 = 8;
    pub const _POSIX_TZNAME_MAX: u32 = 6;
    pub const _POSIX2_BC_BASE_MAX: u32 = 99;
    pub const _POSIX2_BC_DIM_MAX: u32 = 2048;
    pub const _POSIX2_BC_SCALE_MAX: u32 = 99;
    pub const _POSIX2_BC_STRING_MAX: u32 = 1000;
    pub const _POSIX2_EQUIV_CLASS_MAX: u32 = 2;
    pub const _POSIX2_EXPR_NEST_MAX: u32 = 32;
    pub const _POSIX2_LINE_MAX: u32 = 2048;
    pub const _POSIX2_RE_DUP_MAX: u32 = 255;
    pub const _POSIX_AIO_LISTIO_MAX: u32 = 2;
    pub const _POSIX_AIO_MAX: u32 = 1;
    pub const _POSIX_DELAYTIMER_MAX: u32 = 32;
    pub const _POSIX_MQ_OPEN_MAX: u32 = 8;
    pub const _POSIX_MQ_PRIO_MAX: u32 = 32;
    pub const _POSIX_RTSIG_MAX: u32 = 8;
    pub const _POSIX_SEM_NSEMS_MAX: u32 = 256;
    pub const _POSIX_SEM_VALUE_MAX: u32 = 32767;
    pub const _POSIX_SIGQUEUE_MAX: u32 = 32;
    pub const _POSIX_TIMER_MAX: u32 = 32;
    pub const _POSIX_CLOCKRES_MIN: u32 = 20000000;
    pub const _POSIX_THREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
    pub const _POSIX_THREAD_KEYS_MAX: u32 = 128;
    pub const _POSIX_THREAD_THREADS_MAX: u32 = 64;
    pub const PTHREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
    pub const PTHREAD_KEYS_MAX: u32 = 512;
    pub const PTHREAD_STACK_MIN: u32 = 16384;
    pub const _POSIX_HOST_NAME_MAX: u32 = 255;
    pub const _POSIX_LOGIN_NAME_MAX: u32 = 9;
    pub const _POSIX_SS_REPL_MAX: u32 = 4;
    pub const _POSIX_SYMLINK_MAX: u32 = 255;
    pub const _POSIX_SYMLOOP_MAX: u32 = 8;
    pub const _POSIX_TRACE_EVENT_NAME_MAX: u32 = 30;
    pub const _POSIX_TRACE_NAME_MAX: u32 = 8;
    pub const _POSIX_TRACE_SYS_MAX: u32 = 8;
    pub const _POSIX_TRACE_USER_EVENT_MAX: u32 = 32;
    pub const _POSIX_TTY_NAME_MAX: u32 = 9;
    pub const _POSIX2_CHARCLASS_NAME_MAX: u32 = 14;
    pub const _POSIX2_COLL_WEIGHTS_MAX: u32 = 2;
    pub const _POSIX_RE_DUP_MAX: u32 = 255;
    pub const OFF_MIN: i64 = -9223372036854775808;
    pub const OFF_MAX: u64 = 9223372036854775807;
    pub const PASS_MAX: u32 = 128;
    pub const NL_ARGMAX: u32 = 9;
    pub const NL_LANGMAX: u32 = 14;
    pub const NL_MSGMAX: u32 = 32767;
    pub const NL_NMAX: u32 = 1;
    pub const NL_SETMAX: u32 = 255;
    pub const NL_TEXTMAX: u32 = 2048;
    pub const _XOPEN_IOV_MAX: u32 = 16;
    pub const IOV_MAX: u32 = 1024;
    pub const _XOPEN_NAME_MAX: u32 = 255;
    pub const _XOPEN_PATH_MAX: u32 = 1024;
    pub const TIME_UTC: u32 = 1;
    pub const EPERM: u32 = 1;
    pub const ENOENT: u32 = 2;
    pub const ESRCH: u32 = 3;
    pub const EINTR: u32 = 4;
    pub const EIO: u32 = 5;
    pub const ENXIO: u32 = 6;
    pub const E2BIG: u32 = 7;
    pub const ENOEXEC: u32 = 8;
    pub const EBADF: u32 = 9;
    pub const ECHILD: u32 = 10;
    pub const EDEADLK: u32 = 11;
    pub const ENOMEM: u32 = 12;
    pub const EACCES: u32 = 13;
    pub const EFAULT: u32 = 14;
    pub const ENOTBLK: u32 = 15;
    pub const EBUSY: u32 = 16;
    pub const EEXIST: u32 = 17;
    pub const EXDEV: u32 = 18;
    pub const ENODEV: u32 = 19;
    pub const ENOTDIR: u32 = 20;
    pub const EISDIR: u32 = 21;
    pub const EINVAL: u32 = 22;
    pub const ENFILE: u32 = 23;
    pub const EMFILE: u32 = 24;
    pub const ENOTTY: u32 = 25;
    pub const ETXTBSY: u32 = 26;
    pub const EFBIG: u32 = 27;
    pub const ENOSPC: u32 = 28;
    pub const ESPIPE: u32 = 29;
    pub const EROFS: u32 = 30;
    pub const EMLINK: u32 = 31;
    pub const EPIPE: u32 = 32;
    pub const EDOM: u32 = 33;
    pub const ERANGE: u32 = 34;
    pub const EAGAIN: u32 = 35;
    pub const EWOULDBLOCK: u32 = 35;
    pub const EINPROGRESS: u32 = 36;
    pub const EALREADY: u32 = 37;
    pub const ENOTSOCK: u32 = 38;
    pub const EDESTADDRREQ: u32 = 39;
    pub const EMSGSIZE: u32 = 40;
    pub const EPROTOTYPE: u32 = 41;
    pub const ENOPROTOOPT: u32 = 42;
    pub const EPROTONOSUPPORT: u32 = 43;
    pub const ESOCKTNOSUPPORT: u32 = 44;
    pub const ENOTSUP: u32 = 45;
    pub const EPFNOSUPPORT: u32 = 46;
    pub const EAFNOSUPPORT: u32 = 47;
    pub const EADDRINUSE: u32 = 48;
    pub const EADDRNOTAVAIL: u32 = 49;
    pub const ENETDOWN: u32 = 50;
    pub const ENETUNREACH: u32 = 51;
    pub const ENETRESET: u32 = 52;
    pub const ECONNABORTED: u32 = 53;
    pub const ECONNRESET: u32 = 54;
    pub const ENOBUFS: u32 = 55;
    pub const EISCONN: u32 = 56;
    pub const ENOTCONN: u32 = 57;
    pub const ESHUTDOWN: u32 = 58;
    pub const ETOOMANYREFS: u32 = 59;
    pub const ETIMEDOUT: u32 = 60;
    pub const ECONNREFUSED: u32 = 61;
    pub const ELOOP: u32 = 62;
    pub const ENAMETOOLONG: u32 = 63;
    pub const EHOSTDOWN: u32 = 64;
    pub const EHOSTUNREACH: u32 = 65;
    pub const ENOTEMPTY: u32 = 66;
    pub const EPROCLIM: u32 = 67;
    pub const EUSERS: u32 = 68;
    pub const EDQUOT: u32 = 69;
    pub const ESTALE: u32 = 70;
    pub const EREMOTE: u32 = 71;
    pub const EBADRPC: u32 = 72;
    pub const ERPCMISMATCH: u32 = 73;
    pub const EPROGUNAVAIL: u32 = 74;
    pub const EPROGMISMATCH: u32 = 75;
    pub const EPROCUNAVAIL: u32 = 76;
    pub const ENOLCK: u32 = 77;
    pub const ENOSYS: u32 = 78;
    pub const EFTYPE: u32 = 79;
    pub const EAUTH: u32 = 80;
    pub const ENEEDAUTH: u32 = 81;
    pub const EPWROFF: u32 = 82;
    pub const EDEVERR: u32 = 83;
    pub const EOVERFLOW: u32 = 84;
    pub const EBADEXEC: u32 = 85;
    pub const EBADARCH: u32 = 86;
    pub const ESHLIBVERS: u32 = 87;
    pub const EBADMACHO: u32 = 88;
    pub const ECANCELED: u32 = 89;
    pub const EIDRM: u32 = 90;
    pub const ENOMSG: u32 = 91;
    pub const EILSEQ: u32 = 92;
    pub const ENOATTR: u32 = 93;
    pub const EBADMSG: u32 = 94;
    pub const EMULTIHOP: u32 = 95;
    pub const ENODATA: u32 = 96;
    pub const ENOLINK: u32 = 97;
    pub const ENOSR: u32 = 98;
    pub const ENOSTR: u32 = 99;
    pub const EPROTO: u32 = 100;
    pub const ETIME: u32 = 101;
    pub const EOPNOTSUPP: u32 = 102;
    pub const ENOPOLICY: u32 = 103;
    pub const ENOTRECOVERABLE: u32 = 104;
    pub const EOWNERDEAD: u32 = 105;
    pub const EQFULL: u32 = 106;
    pub const ELAST: u32 = 106;
    pub const FP_NAN: u32 = 1;
    pub const FP_INFINITE: u32 = 2;
    pub const FP_ZERO: u32 = 3;
    pub const FP_NORMAL: u32 = 4;
    pub const FP_SUBNORMAL: u32 = 5;
    pub const FP_SUPERNORMAL: u32 = 6;
    pub const FP_FAST_FMA: u32 = 1;
    pub const FP_FAST_FMAF: u32 = 1;
    pub const FP_FAST_FMAL: u32 = 1;
    pub const FP_ILOGB0: i32 = -2147483648;
    pub const FP_ILOGBNAN: i32 = -2147483648;
    pub const MATH_ERRNO: u32 = 1;
    pub const MATH_ERREXCEPT: u32 = 2;
    pub const M_E: f64 = 2.718281828459045;
    pub const M_LOG2E: f64 = 1.4426950408889634;
    pub const M_LOG10E: f64 = 0.4342944819032518;
    pub const M_LN2: f64 = 0.6931471805599453;
    pub const M_LN10: f64 = 2.302585092994046;
    pub const M_PI: f64 = 3.141592653589793;
    pub const M_PI_2: f64 = 1.5707963267948966;
    pub const M_PI_4: f64 = 0.7853981633974483;
    pub const M_1_PI: f64 = 0.3183098861837907;
    pub const M_2_PI: f64 = 0.6366197723675814;
    pub const M_2_SQRTPI: f64 = 1.1283791670955126;
    pub const M_SQRT2: f64 = 1.4142135623730951;
    pub const M_SQRT1_2: f64 = 0.7071067811865476;
    pub const FP_SNAN: u32 = 1;
    pub const FP_QNAN: u32 = 1;
    pub const DOMAIN: u32 = 1;
    pub const SING: u32 = 2;
    pub const OVERFLOW: u32 = 3;
    pub const UNDERFLOW: u32 = 4;
    pub const TLOSS: u32 = 5;
    pub const PLOSS: u32 = 6;
    pub const _PTHREAD_MUTEX_SIG_init: u32 = 850045863;
    pub const _PTHREAD_ERRORCHECK_MUTEX_SIG_init: u32 = 850045857;
    pub const _PTHREAD_RECURSIVE_MUTEX_SIG_init: u32 = 850045858;
    pub const _PTHREAD_FIRSTFIT_MUTEX_SIG_init: u32 = 850045859;
    pub const _PTHREAD_COND_SIG_init: u32 = 1018212795;
    pub const _PTHREAD_ONCE_SIG_init: u32 = 816954554;
    pub const _PTHREAD_RWLOCK_SIG_init: u32 = 766030772;
    pub const SCHED_OTHER: u32 = 1;
    pub const SCHED_FIFO: u32 = 4;
    pub const SCHED_RR: u32 = 2;
    pub const __SCHED_PARAM_SIZE__: u32 = 4;
    pub const QOS_MIN_RELATIVE_PRIORITY: i32 = -15;
    pub const PTHREAD_CREATE_JOINABLE: u32 = 1;
    pub const PTHREAD_CREATE_DETACHED: u32 = 2;
    pub const PTHREAD_INHERIT_SCHED: u32 = 1;
    pub const PTHREAD_EXPLICIT_SCHED: u32 = 2;
    pub const PTHREAD_CANCEL_ENABLE: u32 = 1;
    pub const PTHREAD_CANCEL_DISABLE: u32 = 0;
    pub const PTHREAD_CANCEL_DEFERRED: u32 = 2;
    pub const PTHREAD_CANCEL_ASYNCHRONOUS: u32 = 0;
    pub const PTHREAD_SCOPE_SYSTEM: u32 = 1;
    pub const PTHREAD_SCOPE_PROCESS: u32 = 2;
    pub const PTHREAD_PROCESS_SHARED: u32 = 1;
    pub const PTHREAD_PROCESS_PRIVATE: u32 = 2;
    pub const PTHREAD_PRIO_NONE: u32 = 0;
    pub const PTHREAD_PRIO_INHERIT: u32 = 1;
    pub const PTHREAD_PRIO_PROTECT: u32 = 2;
    pub const PTHREAD_MUTEX_NORMAL: u32 = 0;
    pub const PTHREAD_MUTEX_ERRORCHECK: u32 = 1;
    pub const PTHREAD_MUTEX_RECURSIVE: u32 = 2;
    pub const PTHREAD_MUTEX_DEFAULT: u32 = 0;
    pub const PTHREAD_MUTEX_POLICY_FAIRSHARE_NP: u32 = 1;
    pub const PTHREAD_MUTEX_POLICY_FIRSTFIT_NP: u32 = 3;
    pub const SWIFT_HAS_MSVC_ARM_ATOMICS: u32 = 1;
    pub type max_align_t = f64;
    pub type __int8_t = ::std::os::raw::c_schar;
    pub type __uint8_t = ::std::os::raw::c_uchar;
    pub type __int16_t = ::std::os::raw::c_short;
    pub type __uint16_t = ::std::os::raw::c_ushort;
    pub type __int32_t = ::std::os::raw::c_int;
    pub type __uint32_t = ::std::os::raw::c_uint;
    pub type __int64_t = ::std::os::raw::c_longlong;
    pub type __uint64_t = ::std::os::raw::c_ulonglong;
    pub type __darwin_intptr_t = ::std::os::raw::c_long;
    pub type __darwin_natural_t = ::std::os::raw::c_uint;
    pub type __darwin_ct_rune_t = ::std::os::raw::c_int;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union __mbstate_t {
        pub __mbstate8: [::std::os::raw::c_char; 128usize],
        pub _mbstateL: ::std::os::raw::c_longlong,
    }
    const _: () = {
        ["Size of __mbstate_t"][::std::mem::size_of::<__mbstate_t>() - 128usize];
        ["Alignment of __mbstate_t"][::std::mem::align_of::<__mbstate_t>() - 8usize];
        ["Offset of field: __mbstate_t::__mbstate8"]
            [::std::mem::offset_of!(__mbstate_t, __mbstate8) - 0usize];
        ["Offset of field: __mbstate_t::_mbstateL"]
            [::std::mem::offset_of!(__mbstate_t, _mbstateL) - 0usize];
    };
    pub type __darwin_mbstate_t = root::__mbstate_t;
    pub type __darwin_ptrdiff_t = ::std::os::raw::c_long;
    pub type __darwin_size_t = ::std::os::raw::c_ulong;
    pub type __darwin_va_list = root::__builtin_va_list;
    pub type __darwin_wchar_t = ::std::os::raw::c_int;
    pub type __darwin_rune_t = root::__darwin_wchar_t;
    pub type __darwin_wint_t = ::std::os::raw::c_int;
    pub type __darwin_clock_t = ::std::os::raw::c_ulong;
    pub type __darwin_socklen_t = root::__uint32_t;
    pub type __darwin_ssize_t = ::std::os::raw::c_long;
    pub type __darwin_time_t = ::std::os::raw::c_long;
    pub type __darwin_blkcnt_t = root::__int64_t;
    pub type __darwin_blksize_t = root::__int32_t;
    pub type __darwin_dev_t = root::__int32_t;
    pub type __darwin_fsblkcnt_t = ::std::os::raw::c_uint;
    pub type __darwin_fsfilcnt_t = ::std::os::raw::c_uint;
    pub type __darwin_gid_t = root::__uint32_t;
    pub type __darwin_id_t = root::__uint32_t;
    pub type __darwin_ino64_t = root::__uint64_t;
    pub type __darwin_ino_t = root::__darwin_ino64_t;
    pub type __darwin_mach_port_name_t = root::__darwin_natural_t;
    pub type __darwin_mach_port_t = root::__darwin_mach_port_name_t;
    pub type __darwin_mode_t = root::__uint16_t;
    pub type __darwin_off_t = root::__int64_t;
    pub type __darwin_pid_t = root::__int32_t;
    pub type __darwin_sigset_t = root::__uint32_t;
    pub type __darwin_suseconds_t = root::__int32_t;
    pub type __darwin_uid_t = root::__uint32_t;
    pub type __darwin_useconds_t = root::__uint32_t;
    pub type __darwin_uuid_t = [::std::os::raw::c_uchar; 16usize];
    pub type __darwin_uuid_string_t = [::std::os::raw::c_char; 37usize];
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __darwin_pthread_handler_rec {
        pub __routine:
            ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
        pub __arg: *mut ::std::os::raw::c_void,
        pub __next: *mut root::__darwin_pthread_handler_rec,
    }
    const _: () = {
        ["Size of __darwin_pthread_handler_rec"]
            [::std::mem::size_of::<__darwin_pthread_handler_rec>() - 24usize];
        ["Alignment of __darwin_pthread_handler_rec"]
            [::std::mem::align_of::<__darwin_pthread_handler_rec>() - 8usize];
        ["Offset of field: __darwin_pthread_handler_rec::__routine"]
            [::std::mem::offset_of!(__darwin_pthread_handler_rec, __routine) - 0usize];
        ["Offset of field: __darwin_pthread_handler_rec::__arg"]
            [::std::mem::offset_of!(__darwin_pthread_handler_rec, __arg) - 8usize];
        ["Offset of field: __darwin_pthread_handler_rec::__next"]
            [::std::mem::offset_of!(__darwin_pthread_handler_rec, __next) - 16usize];
    };
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _opaque_pthread_attr_t {
        pub __sig: ::std::os::raw::c_long,
        pub __opaque: [::std::os::raw::c_char; 56usize],
    }
    const _: () = {
        ["Size of _opaque_pthread_attr_t"]
            [::std::mem::size_of::<_opaque_pthread_attr_t>() - 64usize];
        ["Alignment of _opaque_pthread_attr_t"]
            [::std::mem::align_of::<_opaque_pthread_attr_t>() - 8usize];
        ["Offset of field: _opaque_pthread_attr_t::__sig"]
            [::std::mem::offset_of!(_opaque_pthread_attr_t, __sig) - 0usize];
        ["Offset of field: _opaque_pthread_attr_t::__opaque"]
            [::std::mem::offset_of!(_opaque_pthread_attr_t, __opaque) - 8usize];
    };
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _opaque_pthread_cond_t {
        pub __sig: ::std::os::raw::c_long,
        pub __opaque: [::std::os::raw::c_char; 40usize],
    }
    const _: () = {
        ["Size of _opaque_pthread_cond_t"]
            [::std::mem::size_of::<_opaque_pthread_cond_t>() - 48usize];
        ["Alignment of _opaque_pthread_cond_t"]
            [::std::mem::align_of::<_opaque_pthread_cond_t>() - 8usize];
        ["Offset of field: _opaque_pthread_cond_t::__sig"]
            [::std::mem::offset_of!(_opaque_pthread_cond_t, __sig) - 0usize];
        ["Offset of field: _opaque_pthread_cond_t::__opaque"]
            [::std::mem::offset_of!(_opaque_pthread_cond_t, __opaque) - 8usize];
    };
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _opaque_pthread_condattr_t {
        pub __sig: ::std::os::raw::c_long,
        pub __opaque: [::std::os::raw::c_char; 8usize],
    }
    const _: () = {
        ["Size of _opaque_pthread_condattr_t"]
            [::std::mem::size_of::<_opaque_pthread_condattr_t>() - 16usize];
        ["Alignment of _opaque_pthread_condattr_t"]
            [::std::mem::align_of::<_opaque_pthread_condattr_t>() - 8usize];
        ["Offset of field: _opaque_pthread_condattr_t::__sig"]
            [::std::mem::offset_of!(_opaque_pthread_condattr_t, __sig) - 0usize];
        ["Offset of field: _opaque_pthread_condattr_t::__opaque"]
            [::std::mem::offset_of!(_opaque_pthread_condattr_t, __opaque) - 8usize];
    };
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _opaque_pthread_mutex_t {
        pub __sig: ::std::os::raw::c_long,
        pub __opaque: [::std::os::raw::c_char; 56usize],
    }
    const _: () = {
        ["Size of _opaque_pthread_mutex_t"]
            [::std::mem::size_of::<_opaque_pthread_mutex_t>() - 64usize];
        ["Alignment of _opaque_pthread_mutex_t"]
            [::std::mem::align_of::<_opaque_pthread_mutex_t>() - 8usize];
        ["Offset of field: _opaque_pthread_mutex_t::__sig"]
            [::std::mem::offset_of!(_opaque_pthread_mutex_t, __sig) - 0usize];
        ["Offset of field: _opaque_pthread_mutex_t::__opaque"]
            [::std::mem::offset_of!(_opaque_pthread_mutex_t, __opaque) - 8usize];
    };
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _opaque_pthread_mutexattr_t {
        pub __sig: ::std::os::raw::c_long,
        pub __opaque: [::std::os::raw::c_char; 8usize],
    }
    const _: () = {
        ["Size of _opaque_pthread_mutexattr_t"]
            [::std::mem::size_of::<_opaque_pthread_mutexattr_t>() - 16usize];
        ["Alignment of _opaque_pthread_mutexattr_t"]
            [::std::mem::align_of::<_opaque_pthread_mutexattr_t>() - 8usize];
        ["Offset of field: _opaque_pthread_mutexattr_t::__sig"]
            [::std::mem::offset_of!(_opaque_pthread_mutexattr_t, __sig) - 0usize];
        ["Offset of field: _opaque_pthread_mutexattr_t::__opaque"]
            [::std::mem::offset_of!(_opaque_pthread_mutexattr_t, __opaque) - 8usize];
    };
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _opaque_pthread_once_t {
        pub __sig: ::std::os::raw::c_long,
        pub __opaque: [::std::os::raw::c_char; 8usize],
    }
    const _: () = {
        ["Size of _opaque_pthread_once_t"]
            [::std::mem::size_of::<_opaque_pthread_once_t>() - 16usize];
        ["Alignment of _opaque_pthread_once_t"]
            [::std::mem::align_of::<_opaque_pthread_once_t>() - 8usize];
        ["Offset of field: _opaque_pthread_once_t::__sig"]
            [::std::mem::offset_of!(_opaque_pthread_once_t, __sig) - 0usize];
        ["Offset of field: _opaque_pthread_once_t::__opaque"]
            [::std::mem::offset_of!(_opaque_pthread_once_t, __opaque) - 8usize];
    };
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _opaque_pthread_rwlock_t {
        pub __sig: ::std::os::raw::c_long,
        pub __opaque: [::std::os::raw::c_char; 192usize],
    }
    const _: () = {
        ["Size of _opaque_pthread_rwlock_t"]
            [::std::mem::size_of::<_opaque_pthread_rwlock_t>() - 200usize];
        ["Alignment of _opaque_pthread_rwlock_t"]
            [::std::mem::align_of::<_opaque_pthread_rwlock_t>() - 8usize];
        ["Offset of field: _opaque_pthread_rwlock_t::__sig"]
            [::std::mem::offset_of!(_opaque_pthread_rwlock_t, __sig) - 0usize];
        ["Offset of field: _opaque_pthread_rwlock_t::__opaque"]
            [::std::mem::offset_of!(_opaque_pthread_rwlock_t, __opaque) - 8usize];
    };
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _opaque_pthread_rwlockattr_t {
        pub __sig: ::std::os::raw::c_long,
        pub __opaque: [::std::os::raw::c_char; 16usize],
    }
    const _: () = {
        ["Size of _opaque_pthread_rwlockattr_t"]
            [::std::mem::size_of::<_opaque_pthread_rwlockattr_t>() - 24usize];
        ["Alignment of _opaque_pthread_rwlockattr_t"]
            [::std::mem::align_of::<_opaque_pthread_rwlockattr_t>() - 8usize];
        ["Offset of field: _opaque_pthread_rwlockattr_t::__sig"]
            [::std::mem::offset_of!(_opaque_pthread_rwlockattr_t, __sig) - 0usize];
        ["Offset of field: _opaque_pthread_rwlockattr_t::__opaque"]
            [::std::mem::offset_of!(_opaque_pthread_rwlockattr_t, __opaque) - 8usize];
    };
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _opaque_pthread_t {
        pub __sig: ::std::os::raw::c_long,
        pub __cleanup_stack: *mut root::__darwin_pthread_handler_rec,
        pub __opaque: [::std::os::raw::c_char; 8176usize],
    }
    const _: () = {
        ["Size of _opaque_pthread_t"][::std::mem::size_of::<_opaque_pthread_t>() - 8192usize];
        ["Alignment of _opaque_pthread_t"][::std::mem::align_of::<_opaque_pthread_t>() - 8usize];
        ["Offset of field: _opaque_pthread_t::__sig"]
            [::std::mem::offset_of!(_opaque_pthread_t, __sig) - 0usize];
        ["Offset of field: _opaque_pthread_t::__cleanup_stack"]
            [::std::mem::offset_of!(_opaque_pthread_t, __cleanup_stack) - 8usize];
        ["Offset of field: _opaque_pthread_t::__opaque"]
            [::std::mem::offset_of!(_opaque_pthread_t, __opaque) - 16usize];
    };
    pub type __darwin_pthread_attr_t = root::_opaque_pthread_attr_t;
    pub type __darwin_pthread_cond_t = root::_opaque_pthread_cond_t;
    pub type __darwin_pthread_condattr_t = root::_opaque_pthread_condattr_t;
    pub type __darwin_pthread_key_t = ::std::os::raw::c_ulong;
    pub type __darwin_pthread_mutex_t = root::_opaque_pthread_mutex_t;
    pub type __darwin_pthread_mutexattr_t = root::_opaque_pthread_mutexattr_t;
    pub type __darwin_pthread_once_t = root::_opaque_pthread_once_t;
    pub type __darwin_pthread_rwlock_t = root::_opaque_pthread_rwlock_t;
    pub type __darwin_pthread_rwlockattr_t = root::_opaque_pthread_rwlockattr_t;
    pub type __darwin_pthread_t = *mut root::_opaque_pthread_t;
    pub type __darwin_nl_item = ::std::os::raw::c_int;
    pub type __darwin_wctrans_t = ::std::os::raw::c_int;
    pub type __darwin_wctype_t = root::__uint32_t;
    pub const idtype_t_P_ALL: root::idtype_t = 0;
    pub const idtype_t_P_PID: root::idtype_t = 1;
    pub const idtype_t_P_PGID: root::idtype_t = 2;
    pub type idtype_t = ::std::os::raw::c_uint;
    pub type pid_t = root::__darwin_pid_t;
    pub type id_t = root::__darwin_id_t;
    pub type sig_atomic_t = ::std::os::raw::c_int;
    pub type u_int8_t = ::std::os::raw::c_uchar;
    pub type u_int16_t = ::std::os::raw::c_ushort;
    pub type u_int32_t = ::std::os::raw::c_uint;
    pub type u_int64_t = ::std::os::raw::c_ulonglong;
    pub type register_t = i64;
    pub type user_addr_t = root::u_int64_t;
    pub type user_size_t = root::u_int64_t;
    pub type user_ssize_t = i64;
    pub type user_long_t = i64;
    pub type user_ulong_t = root::u_int64_t;
    pub type user_time_t = i64;
    pub type user_off_t = i64;
    pub type syscall_arg_t = root::u_int64_t;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __darwin_arm_exception_state {
        pub __exception: root::__uint32_t,
        pub __fsr: root::__uint32_t,
        pub __far: root::__uint32_t,
    }
    const _: () = {
        ["Size of __darwin_arm_exception_state"]
            [::std::mem::size_of::<__darwin_arm_exception_state>() - 12usize];
        ["Alignment of __darwin_arm_exception_state"]
            [::std::mem::align_of::<__darwin_arm_exception_state>() - 4usize];
        ["Offset of field: __darwin_arm_exception_state::__exception"]
            [::std::mem::offset_of!(__darwin_arm_exception_state, __exception) - 0usize];
        ["Offset of field: __darwin_arm_exception_state::__fsr"]
            [::std::mem::offset_of!(__darwin_arm_exception_state, __fsr) - 4usize];
        ["Offset of field: __darwin_arm_exception_state::__far"]
            [::std::mem::offset_of!(__darwin_arm_exception_state, __far) - 8usize];
    };
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __darwin_arm_exception_state64 {
        pub __far: root::__uint64_t,
        pub __esr: root::__uint32_t,
        pub __exception: root::__uint32_t,
    }
    const _: () = {
        ["Size of __darwin_arm_exception_state64"]
            [::std::mem::size_of::<__darwin_arm_exception_state64>() - 16usize];
        ["Alignment of __darwin_arm_exception_state64"]
            [::std::mem::align_of::<__darwin_arm_exception_state64>() - 8usize];
        ["Offset of field: __darwin_arm_exception_state64::__far"]
            [::std::mem::offset_of!(__darwin_arm_exception_state64, __far) - 0usize];
        ["Offset of field: __darwin_arm_exception_state64::__esr"]
            [::std::mem::offset_of!(__darwin_arm_exception_state64, __esr) - 8usize];
        ["Offset of field: __darwin_arm_exception_state64::__exception"]
            [::std::mem::offset_of!(__darwin_arm_exception_state64, __exception) - 12usize];
    };
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __darwin_arm_exception_state64_v2 {
        pub __far: root::__uint64_t,
        pub __esr: root::__uint64_t,
    }
    const _: () = {
        ["Size of __darwin_arm_exception_state64_v2"]
            [::std::mem::size_of::<__darwin_arm_exception_state64_v2>() - 16usize];
        ["Alignment of __darwin_arm_exception_state64_v2"]
            [::std::mem::align_of::<__darwin_arm_exception_state64_v2>() - 8usize];
        ["Offset of field: __darwin_arm_exception_state64_v2::__far"]
            [::std::mem::offset_of!(__darwin_arm_exception_state64_v2, __far) - 0usize];
        ["Offset of field: __darwin_arm_exception_state64_v2::__esr"]
            [::std::mem::offset_of!(__darwin_arm_exception_state64_v2, __esr) - 8usize];
    };
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __darwin_arm_thread_state {
        pub __r: [root::__uint32_t; 13usize],
        pub __sp: root::__uint32_t,
        pub __lr: root::__uint32_t,
        pub __pc: root::__uint32_t,
        pub __cpsr: root::__uint32_t,
    }
    const _: () = {
        ["Size of __darwin_arm_thread_state"]
            [::std::mem::size_of::<__darwin_arm_thread_state>() - 68usize];
        ["Alignment of __darwin_arm_thread_state"]
            [::std::mem::align_of::<__darwin_arm_thread_state>() - 4usize];
        ["Offset of field: __darwin_arm_thread_state::__r"]
            [::std::mem::offset_of!(__darwin_arm_thread_state, __r) - 0usize];
        ["Offset of field: __darwin_arm_thread_state::__sp"]
            [::std::mem::offset_of!(__darwin_arm_thread_state, __sp) - 52usize];
        ["Offset of field: __darwin_arm_thread_state::__lr"]
            [::std::mem::offset_of!(__darwin_arm_thread_state, __lr) - 56usize];
        ["Offset of field: __darwin_arm_thread_state::__pc"]
            [::std::mem::offset_of!(__darwin_arm_thread_state, __pc) - 60usize];
        ["Offset of field: __darwin_arm_thread_state::__cpsr"]
            [::std::mem::offset_of!(__darwin_arm_thread_state, __cpsr) - 64usize];
    };
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __darwin_arm_thread_state64 {
        pub __x: [root::__uint64_t; 29usize],
        pub __fp: root::__uint64_t,
        pub __lr: root::__uint64_t,
        pub __sp: root::__uint64_t,
        pub __pc: root::__uint64_t,
        pub __cpsr: root::__uint32_t,
        pub __pad: root::__uint32_t,
    }
    const _: () = {
        ["Size of __darwin_arm_thread_state64"]
            [::std::mem::size_of::<__darwin_arm_thread_state64>() - 272usize];
        ["Alignment of __darwin_arm_thread_state64"]
            [::std::mem::align_of::<__darwin_arm_thread_state64>() - 8usize];
        ["Offset of field: __darwin_arm_thread_state64::__x"]
            [::std::mem::offset_of!(__darwin_arm_thread_state64, __x) - 0usize];
        ["Offset of field: __darwin_arm_thread_state64::__fp"]
            [::std::mem::offset_of!(__darwin_arm_thread_state64, __fp) - 232usize];
        ["Offset of field: __darwin_arm_thread_state64::__lr"]
            [::std::mem::offset_of!(__darwin_arm_thread_state64, __lr) - 240usize];
        ["Offset of field: __darwin_arm_thread_state64::__sp"]
            [::std::mem::offset_of!(__darwin_arm_thread_state64, __sp) - 248usize];
        ["Offset of field: __darwin_arm_thread_state64::__pc"]
            [::std::mem::offset_of!(__darwin_arm_thread_state64, __pc) - 256usize];
        ["Offset of field: __darwin_arm_thread_state64::__cpsr"]
            [::std::mem::offset_of!(__darwin_arm_thread_state64, __cpsr) - 264usize];
        ["Offset of field: __darwin_arm_thread_state64::__pad"]
            [::std::mem::offset_of!(__darwin_arm_thread_state64, __pad) - 268usize];
    };
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __darwin_arm_vfp_state {
        pub __r: [root::__uint32_t; 64usize],
        pub __fpscr: root::__uint32_t,
    }
    const _: () = {
        ["Size of __darwin_arm_vfp_state"]
            [::std::mem::size_of::<__darwin_arm_vfp_state>() - 260usize];
        ["Alignment of __darwin_arm_vfp_state"]
            [::std::mem::align_of::<__darwin_arm_vfp_state>() - 4usize];
        ["Offset of field: __darwin_arm_vfp_state::__r"]
            [::std::mem::offset_of!(__darwin_arm_vfp_state, __r) - 0usize];
        ["Offset of field: __darwin_arm_vfp_state::__fpscr"]
            [::std::mem::offset_of!(__darwin_arm_vfp_state, __fpscr) - 256usize];
    };
    #[repr(C)]
    #[repr(align(16))]
    #[derive(Debug, Copy, Clone)]
    pub struct __darwin_arm_neon_state64 {
        pub __v: [root::__uint128_t; 32usize],
        pub __fpsr: root::__uint32_t,
        pub __fpcr: root::__uint32_t,
    }
    const _: () = {
        ["Size of __darwin_arm_neon_state64"]
            [::std::mem::size_of::<__darwin_arm_neon_state64>() - 528usize];
        ["Alignment of __darwin_arm_neon_state64"]
            [::std::mem::align_of::<__darwin_arm_neon_state64>() - 16usize];
        ["Offset of field: __darwin_arm_neon_state64::__v"]
            [::std::mem::offset_of!(__darwin_arm_neon_state64, __v) - 0usize];
        ["Offset of field: __darwin_arm_neon_state64::__fpsr"]
            [::std::mem::offset_of!(__darwin_arm_neon_state64, __fpsr) - 512usize];
        ["Offset of field: __darwin_arm_neon_state64::__fpcr"]
            [::std::mem::offset_of!(__darwin_arm_neon_state64, __fpcr) - 516usize];
    };
    #[repr(C)]
    #[repr(align(16))]
    #[derive(Debug, Copy, Clone)]
    pub struct __darwin_arm_neon_state {
        pub __v: [root::__uint128_t; 16usize],
        pub __fpsr: root::__uint32_t,
        pub __fpcr: root::__uint32_t,
    }
    const _: () = {
        ["Size of __darwin_arm_neon_state"]
            [::std::mem::size_of::<__darwin_arm_neon_state>() - 272usize];
        ["Alignment of __darwin_arm_neon_state"]
            [::std::mem::align_of::<__darwin_arm_neon_state>() - 16usize];
        ["Offset of field: __darwin_arm_neon_state::__v"]
            [::std::mem::offset_of!(__darwin_arm_neon_state, __v) - 0usize];
        ["Offset of field: __darwin_arm_neon_state::__fpsr"]
            [::std::mem::offset_of!(__darwin_arm_neon_state, __fpsr) - 256usize];
        ["Offset of field: __darwin_arm_neon_state::__fpcr"]
            [::std::mem::offset_of!(__darwin_arm_neon_state, __fpcr) - 260usize];
    };
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __arm_pagein_state {
        pub __pagein_error: ::std::os::raw::c_int,
    }
    const _: () = {
        ["Size of __arm_pagein_state"][::std::mem::size_of::<__arm_pagein_state>() - 4usize];
        ["Alignment of __arm_pagein_state"][::std::mem::align_of::<__arm_pagein_state>() - 4usize];
        ["Offset of field: __arm_pagein_state::__pagein_error"]
            [::std::mem::offset_of!(__arm_pagein_state, __pagein_error) - 0usize];
    };
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __arm_legacy_debug_state {
        pub __bvr: [root::__uint32_t; 16usize],
        pub __bcr: [root::__uint32_t; 16usize],
        pub __wvr: [root::__uint32_t; 16usize],
        pub __wcr: [root::__uint32_t; 16usize],
    }
    const _: () = {
        ["Size of __arm_legacy_debug_state"]
            [::std::mem::size_of::<__arm_legacy_debug_state>() - 256usize];
        ["Alignment of __arm_legacy_debug_state"]
            [::std::mem::align_of::<__arm_legacy_debug_state>() - 4usize];
        ["Offset of field: __arm_legacy_debug_state::__bvr"]
            [::std::mem::offset_of!(__arm_legacy_debug_state, __bvr) - 0usize];
        ["Offset of field: __arm_legacy_debug_state::__bcr"]
            [::std::mem::offset_of!(__arm_legacy_debug_state, __bcr) - 64usize];
        ["Offset of field: __arm_legacy_debug_state::__wvr"]
            [::std::mem::offset_of!(__arm_legacy_debug_state, __wvr) - 128usize];
        ["Offset of field: __arm_legacy_debug_state::__wcr"]
            [::std::mem::offset_of!(__arm_legacy_debug_state, __wcr) - 192usize];
    };
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __darwin_arm_debug_state32 {
        pub __bvr: [root::__uint32_t; 16usize],
        pub __bcr: [root::__uint32_t; 16usize],
        pub __wvr: [root::__uint32_t; 16usize],
        pub __wcr: [root::__uint32_t; 16usize],
        pub __mdscr_el1: root::__uint64_t,
    }
    const _: () = {
        ["Size of __darwin_arm_debug_state32"]
            [::std::mem::size_of::<__darwin_arm_debug_state32>() - 264usize];
        ["Alignment of __darwin_arm_debug_state32"]
            [::std::mem::align_of::<__darwin_arm_debug_state32>() - 8usize];
        ["Offset of field: __darwin_arm_debug_state32::__bvr"]
            [::std::mem::offset_of!(__darwin_arm_debug_state32, __bvr) - 0usize];
        ["Offset of field: __darwin_arm_debug_state32::__bcr"]
            [::std::mem::offset_of!(__darwin_arm_debug_state32, __bcr) - 64usize];
        ["Offset of field: __darwin_arm_debug_state32::__wvr"]
            [::std::mem::offset_of!(__darwin_arm_debug_state32, __wvr) - 128usize];
        ["Offset of field: __darwin_arm_debug_state32::__wcr"]
            [::std::mem::offset_of!(__darwin_arm_debug_state32, __wcr) - 192usize];
        ["Offset of field: __darwin_arm_debug_state32::__mdscr_el1"]
            [::std::mem::offset_of!(__darwin_arm_debug_state32, __mdscr_el1) - 256usize];
    };
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __darwin_arm_debug_state64 {
        pub __bvr: [root::__uint64_t; 16usize],
        pub __bcr: [root::__uint64_t; 16usize],
        pub __wvr: [root::__uint64_t; 16usize],
        pub __wcr: [root::__uint64_t; 16usize],
        pub __mdscr_el1: root::__uint64_t,
    }
    const _: () = {
        ["Size of __darwin_arm_debug_state64"]
            [::std::mem::size_of::<__darwin_arm_debug_state64>() - 520usize];
        ["Alignment of __darwin_arm_debug_state64"]
            [::std::mem::align_of::<__darwin_arm_debug_state64>() - 8usize];
        ["Offset of field: __darwin_arm_debug_state64::__bvr"]
            [::std::mem::offset_of!(__darwin_arm_debug_state64, __bvr) - 0usize];
        ["Offset of field: __darwin_arm_debug_state64::__bcr"]
            [::std::mem::offset_of!(__darwin_arm_debug_state64, __bcr) - 128usize];
        ["Offset of field: __darwin_arm_debug_state64::__wvr"]
            [::std::mem::offset_of!(__darwin_arm_debug_state64, __wvr) - 256usize];
        ["Offset of field: __darwin_arm_debug_state64::__wcr"]
            [::std::mem::offset_of!(__darwin_arm_debug_state64, __wcr) - 384usize];
        ["Offset of field: __darwin_arm_debug_state64::__mdscr_el1"]
            [::std::mem::offset_of!(__darwin_arm_debug_state64, __mdscr_el1) - 512usize];
    };
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __darwin_arm_cpmu_state64 {
        pub __ctrs: [root::__uint64_t; 16usize],
    }
    const _: () = {
        ["Size of __darwin_arm_cpmu_state64"]
            [::std::mem::size_of::<__darwin_arm_cpmu_state64>() - 128usize];
        ["Alignment of __darwin_arm_cpmu_state64"]
            [::std::mem::align_of::<__darwin_arm_cpmu_state64>() - 8usize];
        ["Offset of field: __darwin_arm_cpmu_state64::__ctrs"]
            [::std::mem::offset_of!(__darwin_arm_cpmu_state64, __ctrs) - 0usize];
    };
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __darwin_mcontext32 {
        pub __es: root::__darwin_arm_exception_state,
        pub __ss: root::__darwin_arm_thread_state,
        pub __fs: root::__darwin_arm_vfp_state,
    }
    const _: () = {
        ["Size of __darwin_mcontext32"][::std::mem::size_of::<__darwin_mcontext32>() - 340usize];
        ["Alignment of __darwin_mcontext32"]
            [::std::mem::align_of::<__darwin_mcontext32>() - 4usize];
        ["Offset of field: __darwin_mcontext32::__es"]
            [::std::mem::offset_of!(__darwin_mcontext32, __es) - 0usize];
        ["Offset of field: __darwin_mcontext32::__ss"]
            [::std::mem::offset_of!(__darwin_mcontext32, __ss) - 12usize];
        ["Offset of field: __darwin_mcontext32::__fs"]
            [::std::mem::offset_of!(__darwin_mcontext32, __fs) - 80usize];
    };
    #[repr(C)]
    #[repr(align(16))]
    #[derive(Debug, Copy, Clone)]
    pub struct __darwin_mcontext64 {
        pub __es: root::__darwin_arm_exception_state64,
        pub __ss: root::__darwin_arm_thread_state64,
        pub __ns: root::__darwin_arm_neon_state64,
    }
    const _: () = {
        ["Size of __darwin_mcontext64"][::std::mem::size_of::<__darwin_mcontext64>() - 816usize];
        ["Alignment of __darwin_mcontext64"]
            [::std::mem::align_of::<__darwin_mcontext64>() - 16usize];
        ["Offset of field: __darwin_mcontext64::__es"]
            [::std::mem::offset_of!(__darwin_mcontext64, __es) - 0usize];
        ["Offset of field: __darwin_mcontext64::__ss"]
            [::std::mem::offset_of!(__darwin_mcontext64, __ss) - 16usize];
        ["Offset of field: __darwin_mcontext64::__ns"]
            [::std::mem::offset_of!(__darwin_mcontext64, __ns) - 288usize];
    };
    pub type mcontext_t = *mut root::__darwin_mcontext64;
    pub type pthread_attr_t = root::__darwin_pthread_attr_t;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __darwin_sigaltstack {
        pub ss_sp: *mut ::std::os::raw::c_void,
        pub ss_size: root::__darwin_size_t,
        pub ss_flags: ::std::os::raw::c_int,
    }
    const _: () = {
        ["Size of __darwin_sigaltstack"][::std::mem::size_of::<__darwin_sigaltstack>() - 24usize];
        ["Alignment of __darwin_sigaltstack"]
            [::std::mem::align_of::<__darwin_sigaltstack>() - 8usize];
        ["Offset of field: __darwin_sigaltstack::ss_sp"]
            [::std::mem::offset_of!(__darwin_sigaltstack, ss_sp) - 0usize];
        ["Offset of field: __darwin_sigaltstack::ss_size"]
            [::std::mem::offset_of!(__darwin_sigaltstack, ss_size) - 8usize];
        ["Offset of field: __darwin_sigaltstack::ss_flags"]
            [::std::mem::offset_of!(__darwin_sigaltstack, ss_flags) - 16usize];
    };
    pub type stack_t = root::__darwin_sigaltstack;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __darwin_ucontext {
        pub uc_onstack: ::std::os::raw::c_int,
        pub uc_sigmask: root::__darwin_sigset_t,
        pub uc_stack: root::__darwin_sigaltstack,
        pub uc_link: *mut root::__darwin_ucontext,
        pub uc_mcsize: root::__darwin_size_t,
        pub uc_mcontext: *mut root::__darwin_mcontext64,
    }
    const _: () = {
        ["Size of __darwin_ucontext"][::std::mem::size_of::<__darwin_ucontext>() - 56usize];
        ["Alignment of __darwin_ucontext"][::std::mem::align_of::<__darwin_ucontext>() - 8usize];
        ["Offset of field: __darwin_ucontext::uc_onstack"]
            [::std::mem::offset_of!(__darwin_ucontext, uc_onstack) - 0usize];
        ["Offset of field: __darwin_ucontext::uc_sigmask"]
            [::std::mem::offset_of!(__darwin_ucontext, uc_sigmask) - 4usize];
        ["Offset of field: __darwin_ucontext::uc_stack"]
            [::std::mem::offset_of!(__darwin_ucontext, uc_stack) - 8usize];
        ["Offset of field: __darwin_ucontext::uc_link"]
            [::std::mem::offset_of!(__darwin_ucontext, uc_link) - 32usize];
        ["Offset of field: __darwin_ucontext::uc_mcsize"]
            [::std::mem::offset_of!(__darwin_ucontext, uc_mcsize) - 40usize];
        ["Offset of field: __darwin_ucontext::uc_mcontext"]
            [::std::mem::offset_of!(__darwin_ucontext, uc_mcontext) - 48usize];
    };
    pub type ucontext_t = root::__darwin_ucontext;
    pub type sigset_t = root::__darwin_sigset_t;
    pub type uid_t = root::__darwin_uid_t;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union sigval {
        pub sival_int: ::std::os::raw::c_int,
        pub sival_ptr: *mut ::std::os::raw::c_void,
    }
    const _: () = {
        ["Size of sigval"][::std::mem::size_of::<sigval>() - 8usize];
        ["Alignment of sigval"][::std::mem::align_of::<sigval>() - 8usize];
        ["Offset of field: sigval::sival_int"][::std::mem::offset_of!(sigval, sival_int) - 0usize];
        ["Offset of field: sigval::sival_ptr"][::std::mem::offset_of!(sigval, sival_ptr) - 0usize];
    };
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct sigevent {
        pub sigev_notify: ::std::os::raw::c_int,
        pub sigev_signo: ::std::os::raw::c_int,
        pub sigev_value: root::sigval,
        pub sigev_notify_function: ::std::option::Option<unsafe extern "C" fn(arg1: root::sigval)>,
        pub sigev_notify_attributes: *mut root::pthread_attr_t,
    }
    const _: () = {
        ["Size of sigevent"][::std::mem::size_of::<sigevent>() - 32usize];
        ["Alignment of sigevent"][::std::mem::align_of::<sigevent>() - 8usize];
        ["Offset of field: sigevent::sigev_notify"]
            [::std::mem::offset_of!(sigevent, sigev_notify) - 0usize];
        ["Offset of field: sigevent::sigev_signo"]
            [::std::mem::offset_of!(sigevent, sigev_signo) - 4usize];
        ["Offset of field: sigevent::sigev_value"]
            [::std::mem::offset_of!(sigevent, sigev_value) - 8usize];
        ["Offset of field: sigevent::sigev_notify_function"]
            [::std::mem::offset_of!(sigevent, sigev_notify_function) - 16usize];
        ["Offset of field: sigevent::sigev_notify_attributes"]
            [::std::mem::offset_of!(sigevent, sigev_notify_attributes) - 24usize];
    };
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct __siginfo {
        pub si_signo: ::std::os::raw::c_int,
        pub si_errno: ::std::os::raw::c_int,
        pub si_code: ::std::os::raw::c_int,
        pub si_pid: root::pid_t,
        pub si_uid: root::uid_t,
        pub si_status: ::std::os::raw::c_int,
        pub si_addr: *mut ::std::os::raw::c_void,
        pub si_value: root::sigval,
        pub si_band: ::std::os::raw::c_long,
        pub __pad: [::std::os::raw::c_ulong; 7usize],
    }
    const _: () = {
        ["Size of __siginfo"][::std::mem::size_of::<__siginfo>() - 104usize];
        ["Alignment of __siginfo"][::std::mem::align_of::<__siginfo>() - 8usize];
        ["Offset of field: __siginfo::si_signo"]
            [::std::mem::offset_of!(__siginfo, si_signo) - 0usize];
        ["Offset of field: __siginfo::si_errno"]
            [::std::mem::offset_of!(__siginfo, si_errno) - 4usize];
        ["Offset of field: __siginfo::si_code"]
            [::std::mem::offset_of!(__siginfo, si_code) - 8usize];
        ["Offset of field: __siginfo::si_pid"][::std::mem::offset_of!(__siginfo, si_pid) - 12usize];
        ["Offset of field: __siginfo::si_uid"][::std::mem::offset_of!(__siginfo, si_uid) - 16usize];
        ["Offset of field: __siginfo::si_status"]
            [::std::mem::offset_of!(__siginfo, si_status) - 20usize];
        ["Offset of field: __siginfo::si_addr"]
            [::std::mem::offset_of!(__siginfo, si_addr) - 24usize];
        ["Offset of field: __siginfo::si_value"]
            [::std::mem::offset_of!(__siginfo, si_value) - 32usize];
        ["Offset of field: __siginfo::si_band"]
            [::std::mem::offset_of!(__siginfo, si_band) - 40usize];
        ["Offset of field: __siginfo::__pad"][::std::mem::offset_of!(__siginfo, __pad) - 48usize];
    };
    pub type siginfo_t = root::__siginfo;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union __sigaction_u {
        pub __sa_handler: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
        pub __sa_sigaction: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: ::std::os::raw::c_int,
                arg2: *mut root::__siginfo,
                arg3: *mut ::std::os::raw::c_void,
            ),
        >,
    }
    const _: () = {
        ["Size of __sigaction_u"][::std::mem::size_of::<__sigaction_u>() - 8usize];
        ["Alignment of __sigaction_u"][::std::mem::align_of::<__sigaction_u>() - 8usize];
        ["Offset of field: __sigaction_u::__sa_handler"]
            [::std::mem::offset_of!(__sigaction_u, __sa_handler) - 0usize];
        ["Offset of field: __sigaction_u::__sa_sigaction"]
            [::std::mem::offset_of!(__sigaction_u, __sa_sigaction) - 0usize];
    };
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct __sigaction {
        pub __sigaction_u: root::__sigaction_u,
        pub sa_tramp: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *mut ::std::os::raw::c_void,
                arg2: ::std::os::raw::c_int,
                arg3: ::std::os::raw::c_int,
                arg4: *mut root::siginfo_t,
                arg5: *mut ::std::os::raw::c_void,
            ),
        >,
        pub sa_mask: root::sigset_t,
        pub sa_flags: ::std::os::raw::c_int,
    }
    const _: () = {
        ["Size of __sigaction"][::std::mem::size_of::<__sigaction>() - 24usize];
        ["Alignment of __sigaction"][::std::mem::align_of::<__sigaction>() - 8usize];
        ["Offset of field: __sigaction::__sigaction_u"]
            [::std::mem::offset_of!(__sigaction, __sigaction_u) - 0usize];
        ["Offset of field: __sigaction::sa_tramp"]
            [::std::mem::offset_of!(__sigaction, sa_tramp) - 8usize];
        ["Offset of field: __sigaction::sa_mask"]
            [::std::mem::offset_of!(__sigaction, sa_mask) - 16usize];
        ["Offset of field: __sigaction::sa_flags"]
            [::std::mem::offset_of!(__sigaction, sa_flags) - 20usize];
    };
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub struct sigaction {
        pub __sigaction_u: root::__sigaction_u,
        pub sa_mask: root::sigset_t,
        pub sa_flags: ::std::os::raw::c_int,
    }
    const _: () = {
        ["Size of sigaction"][::std::mem::size_of::<sigaction>() - 16usize];
        ["Alignment of sigaction"][::std::mem::align_of::<sigaction>() - 8usize];
        ["Offset of field: sigaction::__sigaction_u"]
            [::std::mem::offset_of!(sigaction, __sigaction_u) - 0usize];
        ["Offset of field: sigaction::sa_mask"]
            [::std::mem::offset_of!(sigaction, sa_mask) - 8usize];
        ["Offset of field: sigaction::sa_flags"]
            [::std::mem::offset_of!(sigaction, sa_flags) - 12usize];
    };
    pub type sig_t = ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct sigvec {
        pub sv_handler: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
        pub sv_mask: ::std::os::raw::c_int,
        pub sv_flags: ::std::os::raw::c_int,
    }
    const _: () = {
        ["Size of sigvec"][::std::mem::size_of::<sigvec>() - 16usize];
        ["Alignment of sigvec"][::std::mem::align_of::<sigvec>() - 8usize];
        ["Offset of field: sigvec::sv_handler"]
            [::std::mem::offset_of!(sigvec, sv_handler) - 0usize];
        ["Offset of field: sigvec::sv_mask"][::std::mem::offset_of!(sigvec, sv_mask) - 8usize];
        ["Offset of field: sigvec::sv_flags"][::std::mem::offset_of!(sigvec, sv_flags) - 12usize];
    };
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct sigstack {
        pub ss_sp: *mut ::std::os::raw::c_char,
        pub ss_onstack: ::std::os::raw::c_int,
    }
    const _: () = {
        ["Size of sigstack"][::std::mem::size_of::<sigstack>() - 16usize];
        ["Alignment of sigstack"][::std::mem::align_of::<sigstack>() - 8usize];
        ["Offset of field: sigstack::ss_sp"][::std::mem::offset_of!(sigstack, ss_sp) - 0usize];
        ["Offset of field: sigstack::ss_onstack"]
            [::std::mem::offset_of!(sigstack, ss_onstack) - 8usize];
    };
    extern "C" {
        pub fn signal(
            arg1: ::std::os::raw::c_int,
            arg2: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
        ) -> ::std::option::Option<
            unsafe extern "C" fn(
                arg1: ::std::os::raw::c_int,
                arg2: ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>,
            ),
        >;
    }
    pub type int_least8_t = i8;
    pub type int_least16_t = i16;
    pub type int_least32_t = i32;
    pub type int_least64_t = i64;
    pub type uint_least8_t = u8;
    pub type uint_least16_t = u16;
    pub type uint_least32_t = u32;
    pub type uint_least64_t = u64;
    pub type int_fast8_t = i8;
    pub type int_fast16_t = i16;
    pub type int_fast32_t = i32;
    pub type int_fast64_t = i64;
    pub type uint_fast8_t = u8;
    pub type uint_fast16_t = u16;
    pub type uint_fast32_t = u32;
    pub type uint_fast64_t = u64;
    pub type intmax_t = ::std::os::raw::c_long;
    pub type uintmax_t = ::std::os::raw::c_ulong;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct timeval {
        pub tv_sec: root::__darwin_time_t,
        pub tv_usec: root::__darwin_suseconds_t,
    }
    const _: () = {
        ["Size of timeval"][::std::mem::size_of::<timeval>() - 16usize];
        ["Alignment of timeval"][::std::mem::align_of::<timeval>() - 8usize];
        ["Offset of field: timeval::tv_sec"][::std::mem::offset_of!(timeval, tv_sec) - 0usize];
        ["Offset of field: timeval::tv_usec"][::std::mem::offset_of!(timeval, tv_usec) - 8usize];
    };
    pub type rlim_t = root::__uint64_t;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct rusage {
        pub ru_utime: root::timeval,
        pub ru_stime: root::timeval,
        pub ru_maxrss: ::std::os::raw::c_long,
        pub ru_ixrss: ::std::os::raw::c_long,
        pub ru_idrss: ::std::os::raw::c_long,
        pub ru_isrss: ::std::os::raw::c_long,
        pub ru_minflt: ::std::os::raw::c_long,
        pub ru_majflt: ::std::os::raw::c_long,
        pub ru_nswap: ::std::os::raw::c_long,
        pub ru_inblock: ::std::os::raw::c_long,
        pub ru_oublock: ::std::os::raw::c_long,
        pub ru_msgsnd: ::std::os::raw::c_long,
        pub ru_msgrcv: ::std::os::raw::c_long,
        pub ru_nsignals: ::std::os::raw::c_long,
        pub ru_nvcsw: ::std::os::raw::c_long,
        pub ru_nivcsw: ::std::os::raw::c_long,
    }
    const _: () = {
        ["Size of rusage"][::std::mem::size_of::<rusage>() - 144usize];
        ["Alignment of rusage"][::std::mem::align_of::<rusage>() - 8usize];
        ["Offset of field: rusage::ru_utime"][::std::mem::offset_of!(rusage, ru_utime) - 0usize];
        ["Offset of field: rusage::ru_stime"][::std::mem::offset_of!(rusage, ru_stime) - 16usize];
        ["Offset of field: rusage::ru_maxrss"][::std::mem::offset_of!(rusage, ru_maxrss) - 32usize];
        ["Offset of field: rusage::ru_ixrss"][::std::mem::offset_of!(rusage, ru_ixrss) - 40usize];
        ["Offset of field: rusage::ru_idrss"][::std::mem::offset_of!(rusage, ru_idrss) - 48usize];
        ["Offset of field: rusage::ru_isrss"][::std::mem::offset_of!(rusage, ru_isrss) - 56usize];
        ["Offset of field: rusage::ru_minflt"][::std::mem::offset_of!(rusage, ru_minflt) - 64usize];
        ["Offset of field: rusage::ru_majflt"][::std::mem::offset_of!(rusage, ru_majflt) - 72usize];
        ["Offset of field: rusage::ru_nswap"][::std::mem::offset_of!(rusage, ru_nswap) - 80usize];
        ["Offset of field: rusage::ru_inblock"]
            [::std::mem::offset_of!(rusage, ru_inblock) - 88usize];
        ["Offset of field: rusage::ru_oublock"]
            [::std::mem::offset_of!(rusage, ru_oublock) - 96usize];
        ["Offset of field: rusage::ru_msgsnd"]
            [::std::mem::offset_of!(rusage, ru_msgsnd) - 104usize];
        ["Offset of field: rusage::ru_msgrcv"]
            [::std::mem::offset_of!(rusage, ru_msgrcv) - 112usize];
        ["Offset of field: rusage::ru_nsignals"]
            [::std::mem::offset_of!(rusage, ru_nsignals) - 120usize];
        ["Offset of field: rusage::ru_nvcsw"][::std::mem::offset_of!(rusage, ru_nvcsw) - 128usize];
        ["Offset of field: rusage::ru_nivcsw"]
            [::std::mem::offset_of!(rusage, ru_nivcsw) - 136usize];
    };
    pub type rusage_info_t = *mut ::std::os::raw::c_void;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct rusage_info_v0 {
        pub ri_uuid: [u8; 16usize],
        pub ri_user_time: u64,
        pub ri_system_time: u64,
        pub ri_pkg_idle_wkups: u64,
        pub ri_interrupt_wkups: u64,
        pub ri_pageins: u64,
        pub ri_wired_size: u64,
        pub ri_resident_size: u64,
        pub ri_phys_footprint: u64,
        pub ri_proc_start_abstime: u64,
        pub ri_proc_exit_abstime: u64,
    }
    const _: () = {
        ["Size of rusage_info_v0"][::std::mem::size_of::<rusage_info_v0>() - 96usize];
        ["Alignment of rusage_info_v0"][::std::mem::align_of::<rusage_info_v0>() - 8usize];
        ["Offset of field: rusage_info_v0::ri_uuid"]
            [::std::mem::offset_of!(rusage_info_v0, ri_uuid) - 0usize];
        ["Offset of field: rusage_info_v0::ri_user_time"]
            [::std::mem::offset_of!(rusage_info_v0, ri_user_time) - 16usize];
        ["Offset of field: rusage_info_v0::ri_system_time"]
            [::std::mem::offset_of!(rusage_info_v0, ri_system_time) - 24usize];
        ["Offset of field: rusage_info_v0::ri_pkg_idle_wkups"]
            [::std::mem::offset_of!(rusage_info_v0, ri_pkg_idle_wkups) - 32usize];
        ["Offset of field: rusage_info_v0::ri_interrupt_wkups"]
            [::std::mem::offset_of!(rusage_info_v0, ri_interrupt_wkups) - 40usize];
        ["Offset of field: rusage_info_v0::ri_pageins"]
            [::std::mem::offset_of!(rusage_info_v0, ri_pageins) - 48usize];
        ["Offset of field: rusage_info_v0::ri_wired_size"]
            [::std::mem::offset_of!(rusage_info_v0, ri_wired_size) - 56usize];
        ["Offset of field: rusage_info_v0::ri_resident_size"]
            [::std::mem::offset_of!(rusage_info_v0, ri_resident_size) - 64usize];
        ["Offset of field: rusage_info_v0::ri_phys_footprint"]
            [::std::mem::offset_of!(rusage_info_v0, ri_phys_footprint) - 72usize];
        ["Offset of field: rusage_info_v0::ri_proc_start_abstime"]
            [::std::mem::offset_of!(rusage_info_v0, ri_proc_start_abstime) - 80usize];
        ["Offset of field: rusage_info_v0::ri_proc_exit_abstime"]
            [::std::mem::offset_of!(rusage_info_v0, ri_proc_exit_abstime) - 88usize];
    };
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct rusage_info_v1 {
        pub ri_uuid: [u8; 16usize],
        pub ri_user_time: u64,
        pub ri_system_time: u64,
        pub ri_pkg_idle_wkups: u64,
        pub ri_interrupt_wkups: u64,
        pub ri_pageins: u64,
        pub ri_wired_size: u64,
        pub ri_resident_size: u64,
        pub ri_phys_footprint: u64,
        pub ri_proc_start_abstime: u64,
        pub ri_proc_exit_abstime: u64,
        pub ri_child_user_time: u64,
        pub ri_child_system_time: u64,
        pub ri_child_pkg_idle_wkups: u64,
        pub ri_child_interrupt_wkups: u64,
        pub ri_child_pageins: u64,
        pub ri_child_elapsed_abstime: u64,
    }
    const _: () = {
        ["Size of rusage_info_v1"][::std::mem::size_of::<rusage_info_v1>() - 144usize];
        ["Alignment of rusage_info_v1"][::std::mem::align_of::<rusage_info_v1>() - 8usize];
        ["Offset of field: rusage_info_v1::ri_uuid"]
            [::std::mem::offset_of!(rusage_info_v1, ri_uuid) - 0usize];
        ["Offset of field: rusage_info_v1::ri_user_time"]
            [::std::mem::offset_of!(rusage_info_v1, ri_user_time) - 16usize];
        ["Offset of field: rusage_info_v1::ri_system_time"]
            [::std::mem::offset_of!(rusage_info_v1, ri_system_time) - 24usize];
        ["Offset of field: rusage_info_v1::ri_pkg_idle_wkups"]
            [::std::mem::offset_of!(rusage_info_v1, ri_pkg_idle_wkups) - 32usize];
        ["Offset of field: rusage_info_v1::ri_interrupt_wkups"]
            [::std::mem::offset_of!(rusage_info_v1, ri_interrupt_wkups) - 40usize];
        ["Offset of field: rusage_info_v1::ri_pageins"]
            [::std::mem::offset_of!(rusage_info_v1, ri_pageins) - 48usize];
        ["Offset of field: rusage_info_v1::ri_wired_size"]
            [::std::mem::offset_of!(rusage_info_v1, ri_wired_size) - 56usize];
        ["Offset of field: rusage_info_v1::ri_resident_size"]
            [::std::mem::offset_of!(rusage_info_v1, ri_resident_size) - 64usize];
        ["Offset of field: rusage_info_v1::ri_phys_footprint"]
            [::std::mem::offset_of!(rusage_info_v1, ri_phys_footprint) - 72usize];
        ["Offset of field: rusage_info_v1::ri_proc_start_abstime"]
            [::std::mem::offset_of!(rusage_info_v1, ri_proc_start_abstime) - 80usize];
        ["Offset of field: rusage_info_v1::ri_proc_exit_abstime"]
            [::std::mem::offset_of!(rusage_info_v1, ri_proc_exit_abstime) - 88usize];
        ["Offset of field: rusage_info_v1::ri_child_user_time"]
            [::std::mem::offset_of!(rusage_info_v1, ri_child_user_time) - 96usize];
        ["Offset of field: rusage_info_v1::ri_child_system_time"]
            [::std::mem::offset_of!(rusage_info_v1, ri_child_system_time) - 104usize];
        ["Offset of field: rusage_info_v1::ri_child_pkg_idle_wkups"]
            [::std::mem::offset_of!(rusage_info_v1, ri_child_pkg_idle_wkups) - 112usize];
        ["Offset of field: rusage_info_v1::ri_child_interrupt_wkups"]
            [::std::mem::offset_of!(rusage_info_v1, ri_child_interrupt_wkups) - 120usize];
        ["Offset of field: rusage_info_v1::ri_child_pageins"]
            [::std::mem::offset_of!(rusage_info_v1, ri_child_pageins) - 128usize];
        ["Offset of field: rusage_info_v1::ri_child_elapsed_abstime"]
            [::std::mem::offset_of!(rusage_info_v1, ri_child_elapsed_abstime) - 136usize];
    };
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct rusage_info_v2 {
        pub ri_uuid: [u8; 16usize],
        pub ri_user_time: u64,
        pub ri_system_time: u64,
        pub ri_pkg_idle_wkups: u64,
        pub ri_interrupt_wkups: u64,
        pub ri_pageins: u64,
        pub ri_wired_size: u64,
        pub ri_resident_size: u64,
        pub ri_phys_footprint: u64,
        pub ri_proc_start_abstime: u64,
        pub ri_proc_exit_abstime: u64,
        pub ri_child_user_time: u64,
        pub ri_child_system_time: u64,
        pub ri_child_pkg_idle_wkups: u64,
        pub ri_child_interrupt_wkups: u64,
        pub ri_child_pageins: u64,
        pub ri_child_elapsed_abstime: u64,
        pub ri_diskio_bytesread: u64,
        pub ri_diskio_byteswritten: u64,
    }
    const _: () = {
        ["Size of rusage_info_v2"][::std::mem::size_of::<rusage_info_v2>() - 160usize];
        ["Alignment of rusage_info_v2"][::std::mem::align_of::<rusage_info_v2>() - 8usize];
        ["Offset of field: rusage_info_v2::ri_uuid"]
            [::std::mem::offset_of!(rusage_info_v2, ri_uuid) - 0usize];
        ["Offset of field: rusage_info_v2::ri_user_time"]
            [::std::mem::offset_of!(rusage_info_v2, ri_user_time) - 16usize];
        ["Offset of field: rusage_info_v2::ri_system_time"]
            [::std::mem::offset_of!(rusage_info_v2, ri_system_time) - 24usize];
        ["Offset of field: rusage_info_v2::ri_pkg_idle_wkups"]
            [::std::mem::offset_of!(rusage_info_v2, ri_pkg_idle_wkups) - 32usize];
        ["Offset of field: rusage_info_v2::ri_interrupt_wkups"]
            [::std::mem::offset_of!(rusage_info_v2, ri_interrupt_wkups) - 40usize];
        ["Offset of field: rusage_info_v2::ri_pageins"]
            [::std::mem::offset_of!(rusage_info_v2, ri_pageins) - 48usize];
        ["Offset of field: rusage_info_v2::ri_wired_size"]
            [::std::mem::offset_of!(rusage_info_v2, ri_wired_size) - 56usize];
        ["Offset of field: rusage_info_v2::ri_resident_size"]
            [::std::mem::offset_of!(rusage_info_v2, ri_resident_size) - 64usize];
        ["Offset of field: rusage_info_v2::ri_phys_footprint"]
            [::std::mem::offset_of!(rusage_info_v2, ri_phys_footprint) - 72usize];
        ["Offset of field: rusage_info_v2::ri_proc_start_abstime"]
            [::std::mem::offset_of!(rusage_info_v2, ri_proc_start_abstime) - 80usize];
        ["Offset of field: rusage_info_v2::ri_proc_exit_abstime"]
            [::std::mem::offset_of!(rusage_info_v2, ri_proc_exit_abstime) - 88usize];
        ["Offset of field: rusage_info_v2::ri_child_user_time"]
            [::std::mem::offset_of!(rusage_info_v2, ri_child_user_time) - 96usize];
        ["Offset of field: rusage_info_v2::ri_child_system_time"]
            [::std::mem::offset_of!(rusage_info_v2, ri_child_system_time) - 104usize];
        ["Offset of field: rusage_info_v2::ri_child_pkg_idle_wkups"]
            [::std::mem::offset_of!(rusage_info_v2, ri_child_pkg_idle_wkups) - 112usize];
        ["Offset of field: rusage_info_v2::ri_child_interrupt_wkups"]
            [::std::mem::offset_of!(rusage_info_v2, ri_child_interrupt_wkups) - 120usize];
        ["Offset of field: rusage_info_v2::ri_child_pageins"]
            [::std::mem::offset_of!(rusage_info_v2, ri_child_pageins) - 128usize];
        ["Offset of field: rusage_info_v2::ri_child_elapsed_abstime"]
            [::std::mem::offset_of!(rusage_info_v2, ri_child_elapsed_abstime) - 136usize];
        ["Offset of field: rusage_info_v2::ri_diskio_bytesread"]
            [::std::mem::offset_of!(rusage_info_v2, ri_diskio_bytesread) - 144usize];
        ["Offset of field: rusage_info_v2::ri_diskio_byteswritten"]
            [::std::mem::offset_of!(rusage_info_v2, ri_diskio_byteswritten) - 152usize];
    };
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct rusage_info_v3 {
        pub ri_uuid: [u8; 16usize],
        pub ri_user_time: u64,
        pub ri_system_time: u64,
        pub ri_pkg_idle_wkups: u64,
        pub ri_interrupt_wkups: u64,
        pub ri_pageins: u64,
        pub ri_wired_size: u64,
        pub ri_resident_size: u64,
        pub ri_phys_footprint: u64,
        pub ri_proc_start_abstime: u64,
        pub ri_proc_exit_abstime: u64,
        pub ri_child_user_time: u64,
        pub ri_child_system_time: u64,
        pub ri_child_pkg_idle_wkups: u64,
        pub ri_child_interrupt_wkups: u64,
        pub ri_child_pageins: u64,
        pub ri_child_elapsed_abstime: u64,
        pub ri_diskio_bytesread: u64,
        pub ri_diskio_byteswritten: u64,
        pub ri_cpu_time_qos_default: u64,
        pub ri_cpu_time_qos_maintenance: u64,
        pub ri_cpu_time_qos_background: u64,
        pub ri_cpu_time_qos_utility: u64,
        pub ri_cpu_time_qos_legacy: u64,
        pub ri_cpu_time_qos_user_initiated: u64,
        pub ri_cpu_time_qos_user_interactive: u64,
        pub ri_billed_system_time: u64,
        pub ri_serviced_system_time: u64,
    }
    const _: () = {
        ["Size of rusage_info_v3"][::std::mem::size_of::<rusage_info_v3>() - 232usize];
        ["Alignment of rusage_info_v3"][::std::mem::align_of::<rusage_info_v3>() - 8usize];
        ["Offset of field: rusage_info_v3::ri_uuid"]
            [::std::mem::offset_of!(rusage_info_v3, ri_uuid) - 0usize];
        ["Offset of field: rusage_info_v3::ri_user_time"]
            [::std::mem::offset_of!(rusage_info_v3, ri_user_time) - 16usize];
        ["Offset of field: rusage_info_v3::ri_system_time"]
            [::std::mem::offset_of!(rusage_info_v3, ri_system_time) - 24usize];
        ["Offset of field: rusage_info_v3::ri_pkg_idle_wkups"]
            [::std::mem::offset_of!(rusage_info_v3, ri_pkg_idle_wkups) - 32usize];
        ["Offset of field: rusage_info_v3::ri_interrupt_wkups"]
            [::std::mem::offset_of!(rusage_info_v3, ri_interrupt_wkups) - 40usize];
        ["Offset of field: rusage_info_v3::ri_pageins"]
            [::std::mem::offset_of!(rusage_info_v3, ri_pageins) - 48usize];
        ["Offset of field: rusage_info_v3::ri_wired_size"]
            [::std::mem::offset_of!(rusage_info_v3, ri_wired_size) - 56usize];
        ["Offset of field: rusage_info_v3::ri_resident_size"]
            [::std::mem::offset_of!(rusage_info_v3, ri_resident_size) - 64usize];
        ["Offset of field: rusage_info_v3::ri_phys_footprint"]
            [::std::mem::offset_of!(rusage_info_v3, ri_phys_footprint) - 72usize];
        ["Offset of field: rusage_info_v3::ri_proc_start_abstime"]
            [::std::mem::offset_of!(rusage_info_v3, ri_proc_start_abstime) - 80usize];
        ["Offset of field: rusage_info_v3::ri_proc_exit_abstime"]
            [::std::mem::offset_of!(rusage_info_v3, ri_proc_exit_abstime) - 88usize];
        ["Offset of field: rusage_info_v3::ri_child_user_time"]
            [::std::mem::offset_of!(rusage_info_v3, ri_child_user_time) - 96usize];
        ["Offset of field: rusage_info_v3::ri_child_system_time"]
            [::std::mem::offset_of!(rusage_info_v3, ri_child_system_time) - 104usize];
        ["Offset of field: rusage_info_v3::ri_child_pkg_idle_wkups"]
            [::std::mem::offset_of!(rusage_info_v3, ri_child_pkg_idle_wkups) - 112usize];
        ["Offset of field: rusage_info_v3::ri_child_interrupt_wkups"]
            [::std::mem::offset_of!(rusage_info_v3, ri_child_interrupt_wkups) - 120usize];
        ["Offset of field: rusage_info_v3::ri_child_pageins"]
            [::std::mem::offset_of!(rusage_info_v3, ri_child_pageins) - 128usize];
        ["Offset of field: rusage_info_v3::ri_child_elapsed_abstime"]
            [::std::mem::offset_of!(rusage_info_v3, ri_child_elapsed_abstime) - 136usize];
        ["Offset of field: rusage_info_v3::ri_diskio_bytesread"]
            [::std::mem::offset_of!(rusage_info_v3, ri_diskio_bytesread) - 144usize];
        ["Offset of field: rusage_info_v3::ri_diskio_byteswritten"]
            [::std::mem::offset_of!(rusage_info_v3, ri_diskio_byteswritten) - 152usize];
        ["Offset of field: rusage_info_v3::ri_cpu_time_qos_default"]
            [::std::mem::offset_of!(rusage_info_v3, ri_cpu_time_qos_default) - 160usize];
        ["Offset of field: rusage_info_v3::ri_cpu_time_qos_maintenance"]
            [::std::mem::offset_of!(rusage_info_v3, ri_cpu_time_qos_maintenance) - 168usize];
        ["Offset of field: rusage_info_v3::ri_cpu_time_qos_background"]
            [::std::mem::offset_of!(rusage_info_v3, ri_cpu_time_qos_background) - 176usize];
        ["Offset of field: rusage_info_v3::ri_cpu_time_qos_utility"]
            [::std::mem::offset_of!(rusage_info_v3, ri_cpu_time_qos_utility) - 184usize];
        ["Offset of field: rusage_info_v3::ri_cpu_time_qos_legacy"]
            [::std::mem::offset_of!(rusage_info_v3, ri_cpu_time_qos_legacy) - 192usize];
        ["Offset of field: rusage_info_v3::ri_cpu_time_qos_user_initiated"]
            [::std::mem::offset_of!(rusage_info_v3, ri_cpu_time_qos_user_initiated) - 200usize];
        ["Offset of field: rusage_info_v3::ri_cpu_time_qos_user_interactive"]
            [::std::mem::offset_of!(rusage_info_v3, ri_cpu_time_qos_user_interactive) - 208usize];
        ["Offset of field: rusage_info_v3::ri_billed_system_time"]
            [::std::mem::offset_of!(rusage_info_v3, ri_billed_system_time) - 216usize];
        ["Offset of field: rusage_info_v3::ri_serviced_system_time"]
            [::std::mem::offset_of!(rusage_info_v3, ri_serviced_system_time) - 224usize];
    };
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct rusage_info_v4 {
        pub ri_uuid: [u8; 16usize],
        pub ri_user_time: u64,
        pub ri_system_time: u64,
        pub ri_pkg_idle_wkups: u64,
        pub ri_interrupt_wkups: u64,
        pub ri_pageins: u64,
        pub ri_wired_size: u64,
        pub ri_resident_size: u64,
        pub ri_phys_footprint: u64,
        pub ri_proc_start_abstime: u64,
        pub ri_proc_exit_abstime: u64,
        pub ri_child_user_time: u64,
        pub ri_child_system_time: u64,
        pub ri_child_pkg_idle_wkups: u64,
        pub ri_child_interrupt_wkups: u64,
        pub ri_child_pageins: u64,
        pub ri_child_elapsed_abstime: u64,
        pub ri_diskio_bytesread: u64,
        pub ri_diskio_byteswritten: u64,
        pub ri_cpu_time_qos_default: u64,
        pub ri_cpu_time_qos_maintenance: u64,
        pub ri_cpu_time_qos_background: u64,
        pub ri_cpu_time_qos_utility: u64,
        pub ri_cpu_time_qos_legacy: u64,
        pub ri_cpu_time_qos_user_initiated: u64,
        pub ri_cpu_time_qos_user_interactive: u64,
        pub ri_billed_system_time: u64,
        pub ri_serviced_system_time: u64,
        pub ri_logical_writes: u64,
        pub ri_lifetime_max_phys_footprint: u64,
        pub ri_instructions: u64,
        pub ri_cycles: u64,
        pub ri_billed_energy: u64,
        pub ri_serviced_energy: u64,
        pub ri_interval_max_phys_footprint: u64,
        pub ri_runnable_time: u64,
    }
    const _: () = {
        ["Size of rusage_info_v4"][::std::mem::size_of::<rusage_info_v4>() - 296usize];
        ["Alignment of rusage_info_v4"][::std::mem::align_of::<rusage_info_v4>() - 8usize];
        ["Offset of field: rusage_info_v4::ri_uuid"]
            [::std::mem::offset_of!(rusage_info_v4, ri_uuid) - 0usize];
        ["Offset of field: rusage_info_v4::ri_user_time"]
            [::std::mem::offset_of!(rusage_info_v4, ri_user_time) - 16usize];
        ["Offset of field: rusage_info_v4::ri_system_time"]
            [::std::mem::offset_of!(rusage_info_v4, ri_system_time) - 24usize];
        ["Offset of field: rusage_info_v4::ri_pkg_idle_wkups"]
            [::std::mem::offset_of!(rusage_info_v4, ri_pkg_idle_wkups) - 32usize];
        ["Offset of field: rusage_info_v4::ri_interrupt_wkups"]
            [::std::mem::offset_of!(rusage_info_v4, ri_interrupt_wkups) - 40usize];
        ["Offset of field: rusage_info_v4::ri_pageins"]
            [::std::mem::offset_of!(rusage_info_v4, ri_pageins) - 48usize];
        ["Offset of field: rusage_info_v4::ri_wired_size"]
            [::std::mem::offset_of!(rusage_info_v4, ri_wired_size) - 56usize];
        ["Offset of field: rusage_info_v4::ri_resident_size"]
            [::std::mem::offset_of!(rusage_info_v4, ri_resident_size) - 64usize];
        ["Offset of field: rusage_info_v4::ri_phys_footprint"]
            [::std::mem::offset_of!(rusage_info_v4, ri_phys_footprint) - 72usize];
        ["Offset of field: rusage_info_v4::ri_proc_start_abstime"]
            [::std::mem::offset_of!(rusage_info_v4, ri_proc_start_abstime) - 80usize];
        ["Offset of field: rusage_info_v4::ri_proc_exit_abstime"]
            [::std::mem::offset_of!(rusage_info_v4, ri_proc_exit_abstime) - 88usize];
        ["Offset of field: rusage_info_v4::ri_child_user_time"]
            [::std::mem::offset_of!(rusage_info_v4, ri_child_user_time) - 96usize];
        ["Offset of field: rusage_info_v4::ri_child_system_time"]
            [::std::mem::offset_of!(rusage_info_v4, ri_child_system_time) - 104usize];
        ["Offset of field: rusage_info_v4::ri_child_pkg_idle_wkups"]
            [::std::mem::offset_of!(rusage_info_v4, ri_child_pkg_idle_wkups) - 112usize];
        ["Offset of field: rusage_info_v4::ri_child_interrupt_wkups"]
            [::std::mem::offset_of!(rusage_info_v4, ri_child_interrupt_wkups) - 120usize];
        ["Offset of field: rusage_info_v4::ri_child_pageins"]
            [::std::mem::offset_of!(rusage_info_v4, ri_child_pageins) - 128usize];
        ["Offset of field: rusage_info_v4::ri_child_elapsed_abstime"]
            [::std::mem::offset_of!(rusage_info_v4, ri_child_elapsed_abstime) - 136usize];
        ["Offset of field: rusage_info_v4::ri_diskio_bytesread"]
            [::std::mem::offset_of!(rusage_info_v4, ri_diskio_bytesread) - 144usize];
        ["Offset of field: rusage_info_v4::ri_diskio_byteswritten"]
            [::std::mem::offset_of!(rusage_info_v4, ri_diskio_byteswritten) - 152usize];
        ["Offset of field: rusage_info_v4::ri_cpu_time_qos_default"]
            [::std::mem::offset_of!(rusage_info_v4, ri_cpu_time_qos_default) - 160usize];
        ["Offset of field: rusage_info_v4::ri_cpu_time_qos_maintenance"]
            [::std::mem::offset_of!(rusage_info_v4, ri_cpu_time_qos_maintenance) - 168usize];
        ["Offset of field: rusage_info_v4::ri_cpu_time_qos_background"]
            [::std::mem::offset_of!(rusage_info_v4, ri_cpu_time_qos_background) - 176usize];
        ["Offset of field: rusage_info_v4::ri_cpu_time_qos_utility"]
            [::std::mem::offset_of!(rusage_info_v4, ri_cpu_time_qos_utility) - 184usize];
        ["Offset of field: rusage_info_v4::ri_cpu_time_qos_legacy"]
            [::std::mem::offset_of!(rusage_info_v4, ri_cpu_time_qos_legacy) - 192usize];
        ["Offset of field: rusage_info_v4::ri_cpu_time_qos_user_initiated"]
            [::std::mem::offset_of!(rusage_info_v4, ri_cpu_time_qos_user_initiated) - 200usize];
        ["Offset of field: rusage_info_v4::ri_cpu_time_qos_user_interactive"]
            [::std::mem::offset_of!(rusage_info_v4, ri_cpu_time_qos_user_interactive) - 208usize];
        ["Offset of field: rusage_info_v4::ri_billed_system_time"]
            [::std::mem::offset_of!(rusage_info_v4, ri_billed_system_time) - 216usize];
        ["Offset of field: rusage_info_v4::ri_serviced_system_time"]
            [::std::mem::offset_of!(rusage_info_v4, ri_serviced_system_time) - 224usize];
        ["Offset of field: rusage_info_v4::ri_logical_writes"]
            [::std::mem::offset_of!(rusage_info_v4, ri_logical_writes) - 232usize];
        ["Offset of field: rusage_info_v4::ri_lifetime_max_phys_footprint"]
            [::std::mem::offset_of!(rusage_info_v4, ri_lifetime_max_phys_footprint) - 240usize];
        ["Offset of field: rusage_info_v4::ri_instructions"]
            [::std::mem::offset_of!(rusage_info_v4, ri_instructions) - 248usize];
        ["Offset of field: rusage_info_v4::ri_cycles"]
            [::std::mem::offset_of!(rusage_info_v4, ri_cycles) - 256usize];
        ["Offset of field: rusage_info_v4::ri_billed_energy"]
            [::std::mem::offset_of!(rusage_info_v4, ri_billed_energy) - 264usize];
        ["Offset of field: rusage_info_v4::ri_serviced_energy"]
            [::std::mem::offset_of!(rusage_info_v4, ri_serviced_energy) - 272usize];
        ["Offset of field: rusage_info_v4::ri_interval_max_phys_footprint"]
            [::std::mem::offset_of!(rusage_info_v4, ri_interval_max_phys_footprint) - 280usize];
        ["Offset of field: rusage_info_v4::ri_runnable_time"]
            [::std::mem::offset_of!(rusage_info_v4, ri_runnable_time) - 288usize];
    };
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct rusage_info_v5 {
        pub ri_uuid: [u8; 16usize],
        pub ri_user_time: u64,
        pub ri_system_time: u64,
        pub ri_pkg_idle_wkups: u64,
        pub ri_interrupt_wkups: u64,
        pub ri_pageins: u64,
        pub ri_wired_size: u64,
        pub ri_resident_size: u64,
        pub ri_phys_footprint: u64,
        pub ri_proc_start_abstime: u64,
        pub ri_proc_exit_abstime: u64,
        pub ri_child_user_time: u64,
        pub ri_child_system_time: u64,
        pub ri_child_pkg_idle_wkups: u64,
        pub ri_child_interrupt_wkups: u64,
        pub ri_child_pageins: u64,
        pub ri_child_elapsed_abstime: u64,
        pub ri_diskio_bytesread: u64,
        pub ri_diskio_byteswritten: u64,
        pub ri_cpu_time_qos_default: u64,
        pub ri_cpu_time_qos_maintenance: u64,
        pub ri_cpu_time_qos_background: u64,
        pub ri_cpu_time_qos_utility: u64,
        pub ri_cpu_time_qos_legacy: u64,
        pub ri_cpu_time_qos_user_initiated: u64,
        pub ri_cpu_time_qos_user_interactive: u64,
        pub ri_billed_system_time: u64,
        pub ri_serviced_system_time: u64,
        pub ri_logical_writes: u64,
        pub ri_lifetime_max_phys_footprint: u64,
        pub ri_instructions: u64,
        pub ri_cycles: u64,
        pub ri_billed_energy: u64,
        pub ri_serviced_energy: u64,
        pub ri_interval_max_phys_footprint: u64,
        pub ri_runnable_time: u64,
        pub ri_flags: u64,
    }
    const _: () = {
        ["Size of rusage_info_v5"][::std::mem::size_of::<rusage_info_v5>() - 304usize];
        ["Alignment of rusage_info_v5"][::std::mem::align_of::<rusage_info_v5>() - 8usize];
        ["Offset of field: rusage_info_v5::ri_uuid"]
            [::std::mem::offset_of!(rusage_info_v5, ri_uuid) - 0usize];
        ["Offset of field: rusage_info_v5::ri_user_time"]
            [::std::mem::offset_of!(rusage_info_v5, ri_user_time) - 16usize];
        ["Offset of field: rusage_info_v5::ri_system_time"]
            [::std::mem::offset_of!(rusage_info_v5, ri_system_time) - 24usize];
        ["Offset of field: rusage_info_v5::ri_pkg_idle_wkups"]
            [::std::mem::offset_of!(rusage_info_v5, ri_pkg_idle_wkups) - 32usize];
        ["Offset of field: rusage_info_v5::ri_interrupt_wkups"]
            [::std::mem::offset_of!(rusage_info_v5, ri_interrupt_wkups) - 40usize];
        ["Offset of field: rusage_info_v5::ri_pageins"]
            [::std::mem::offset_of!(rusage_info_v5, ri_pageins) - 48usize];
        ["Offset of field: rusage_info_v5::ri_wired_size"]
            [::std::mem::offset_of!(rusage_info_v5, ri_wired_size) - 56usize];
        ["Offset of field: rusage_info_v5::ri_resident_size"]
            [::std::mem::offset_of!(rusage_info_v5, ri_resident_size) - 64usize];
        ["Offset of field: rusage_info_v5::ri_phys_footprint"]
            [::std::mem::offset_of!(rusage_info_v5, ri_phys_footprint) - 72usize];
        ["Offset of field: rusage_info_v5::ri_proc_start_abstime"]
            [::std::mem::offset_of!(rusage_info_v5, ri_proc_start_abstime) - 80usize];
        ["Offset of field: rusage_info_v5::ri_proc_exit_abstime"]
            [::std::mem::offset_of!(rusage_info_v5, ri_proc_exit_abstime) - 88usize];
        ["Offset of field: rusage_info_v5::ri_child_user_time"]
            [::std::mem::offset_of!(rusage_info_v5, ri_child_user_time) - 96usize];
        ["Offset of field: rusage_info_v5::ri_child_system_time"]
            [::std::mem::offset_of!(rusage_info_v5, ri_child_system_time) - 104usize];
        ["Offset of field: rusage_info_v5::ri_child_pkg_idle_wkups"]
            [::std::mem::offset_of!(rusage_info_v5, ri_child_pkg_idle_wkups) - 112usize];
        ["Offset of field: rusage_info_v5::ri_child_interrupt_wkups"]
            [::std::mem::offset_of!(rusage_info_v5, ri_child_interrupt_wkups) - 120usize];
        ["Offset of field: rusage_info_v5::ri_child_pageins"]
            [::std::mem::offset_of!(rusage_info_v5, ri_child_pageins) - 128usize];
        ["Offset of field: rusage_info_v5::ri_child_elapsed_abstime"]
            [::std::mem::offset_of!(rusage_info_v5, ri_child_elapsed_abstime) - 136usize];
        ["Offset of field: rusage_info_v5::ri_diskio_bytesread"]
            [::std::mem::offset_of!(rusage_info_v5, ri_diskio_bytesread) - 144usize];
        ["Offset of field: rusage_info_v5::ri_diskio_byteswritten"]
            [::std::mem::offset_of!(rusage_info_v5, ri_diskio_byteswritten) - 152usize];
        ["Offset of field: rusage_info_v5::ri_cpu_time_qos_default"]
            [::std::mem::offset_of!(rusage_info_v5, ri_cpu_time_qos_default) - 160usize];
        ["Offset of field: rusage_info_v5::ri_cpu_time_qos_maintenance"]
            [::std::mem::offset_of!(rusage_info_v5, ri_cpu_time_qos_maintenance) - 168usize];
        ["Offset of field: rusage_info_v5::ri_cpu_time_qos_background"]
            [::std::mem::offset_of!(rusage_info_v5, ri_cpu_time_qos_background) - 176usize];
        ["Offset of field: rusage_info_v5::ri_cpu_time_qos_utility"]
            [::std::mem::offset_of!(rusage_info_v5, ri_cpu_time_qos_utility) - 184usize];
        ["Offset of field: rusage_info_v5::ri_cpu_time_qos_legacy"]
            [::std::mem::offset_of!(rusage_info_v5, ri_cpu_time_qos_legacy) - 192usize];
        ["Offset of field: rusage_info_v5::ri_cpu_time_qos_user_initiated"]
            [::std::mem::offset_of!(rusage_info_v5, ri_cpu_time_qos_user_initiated) - 200usize];
        ["Offset of field: rusage_info_v5::ri_cpu_time_qos_user_interactive"]
            [::std::mem::offset_of!(rusage_info_v5, ri_cpu_time_qos_user_interactive) - 208usize];
        ["Offset of field: rusage_info_v5::ri_billed_system_time"]
            [::std::mem::offset_of!(rusage_info_v5, ri_billed_system_time) - 216usize];
        ["Offset of field: rusage_info_v5::ri_serviced_system_time"]
            [::std::mem::offset_of!(rusage_info_v5, ri_serviced_system_time) - 224usize];
        ["Offset of field: rusage_info_v5::ri_logical_writes"]
            [::std::mem::offset_of!(rusage_info_v5, ri_logical_writes) - 232usize];
        ["Offset of field: rusage_info_v5::ri_lifetime_max_phys_footprint"]
            [::std::mem::offset_of!(rusage_info_v5, ri_lifetime_max_phys_footprint) - 240usize];
        ["Offset of field: rusage_info_v5::ri_instructions"]
            [::std::mem::offset_of!(rusage_info_v5, ri_instructions) - 248usize];
        ["Offset of field: rusage_info_v5::ri_cycles"]
            [::std::mem::offset_of!(rusage_info_v5, ri_cycles) - 256usize];
        ["Offset of field: rusage_info_v5::ri_billed_energy"]
            [::std::mem::offset_of!(rusage_info_v5, ri_billed_energy) - 264usize];
        ["Offset of field: rusage_info_v5::ri_serviced_energy"]
            [::std::mem::offset_of!(rusage_info_v5, ri_serviced_energy) - 272usize];
        ["Offset of field: rusage_info_v5::ri_interval_max_phys_footprint"]
            [::std::mem::offset_of!(rusage_info_v5, ri_interval_max_phys_footprint) - 280usize];
        ["Offset of field: rusage_info_v5::ri_runnable_time"]
            [::std::mem::offset_of!(rusage_info_v5, ri_runnable_time) - 288usize];
        ["Offset of field: rusage_info_v5::ri_flags"]
            [::std::mem::offset_of!(rusage_info_v5, ri_flags) - 296usize];
    };
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct rusage_info_v6 {
        pub ri_uuid: [u8; 16usize],
        pub ri_user_time: u64,
        pub ri_system_time: u64,
        pub ri_pkg_idle_wkups: u64,
        pub ri_interrupt_wkups: u64,
        pub ri_pageins: u64,
        pub ri_wired_size: u64,
        pub ri_resident_size: u64,
        pub ri_phys_footprint: u64,
        pub ri_proc_start_abstime: u64,
        pub ri_proc_exit_abstime: u64,
        pub ri_child_user_time: u64,
        pub ri_child_system_time: u64,
        pub ri_child_pkg_idle_wkups: u64,
        pub ri_child_interrupt_wkups: u64,
        pub ri_child_pageins: u64,
        pub ri_child_elapsed_abstime: u64,
        pub ri_diskio_bytesread: u64,
        pub ri_diskio_byteswritten: u64,
        pub ri_cpu_time_qos_default: u64,
        pub ri_cpu_time_qos_maintenance: u64,
        pub ri_cpu_time_qos_background: u64,
        pub ri_cpu_time_qos_utility: u64,
        pub ri_cpu_time_qos_legacy: u64,
        pub ri_cpu_time_qos_user_initiated: u64,
        pub ri_cpu_time_qos_user_interactive: u64,
        pub ri_billed_system_time: u64,
        pub ri_serviced_system_time: u64,
        pub ri_logical_writes: u64,
        pub ri_lifetime_max_phys_footprint: u64,
        pub ri_instructions: u64,
        pub ri_cycles: u64,
        pub ri_billed_energy: u64,
        pub ri_serviced_energy: u64,
        pub ri_interval_max_phys_footprint: u64,
        pub ri_runnable_time: u64,
        pub ri_flags: u64,
        pub ri_user_ptime: u64,
        pub ri_system_ptime: u64,
        pub ri_pinstructions: u64,
        pub ri_pcycles: u64,
        pub ri_energy_nj: u64,
        pub ri_penergy_nj: u64,
        pub ri_secure_time_in_system: u64,
        pub ri_secure_ptime_in_system: u64,
        pub ri_neural_footprint: u64,
        pub ri_lifetime_max_neural_footprint: u64,
        pub ri_interval_max_neural_footprint: u64,
        pub ri_reserved: [u64; 9usize],
    }
    const _: () = {
        ["Size of rusage_info_v6"][::std::mem::size_of::<rusage_info_v6>() - 464usize];
        ["Alignment of rusage_info_v6"][::std::mem::align_of::<rusage_info_v6>() - 8usize];
        ["Offset of field: rusage_info_v6::ri_uuid"]
            [::std::mem::offset_of!(rusage_info_v6, ri_uuid) - 0usize];
        ["Offset of field: rusage_info_v6::ri_user_time"]
            [::std::mem::offset_of!(rusage_info_v6, ri_user_time) - 16usize];
        ["Offset of field: rusage_info_v6::ri_system_time"]
            [::std::mem::offset_of!(rusage_info_v6, ri_system_time) - 24usize];
        ["Offset of field: rusage_info_v6::ri_pkg_idle_wkups"]
            [::std::mem::offset_of!(rusage_info_v6, ri_pkg_idle_wkups) - 32usize];
        ["Offset of field: rusage_info_v6::ri_interrupt_wkups"]
            [::std::mem::offset_of!(rusage_info_v6, ri_interrupt_wkups) - 40usize];
        ["Offset of field: rusage_info_v6::ri_pageins"]
            [::std::mem::offset_of!(rusage_info_v6, ri_pageins) - 48usize];
        ["Offset of field: rusage_info_v6::ri_wired_size"]
            [::std::mem::offset_of!(rusage_info_v6, ri_wired_size) - 56usize];
        ["Offset of field: rusage_info_v6::ri_resident_size"]
            [::std::mem::offset_of!(rusage_info_v6, ri_resident_size) - 64usize];
        ["Offset of field: rusage_info_v6::ri_phys_footprint"]
            [::std::mem::offset_of!(rusage_info_v6, ri_phys_footprint) - 72usize];
        ["Offset of field: rusage_info_v6::ri_proc_start_abstime"]
            [::std::mem::offset_of!(rusage_info_v6, ri_proc_start_abstime) - 80usize];
        ["Offset of field: rusage_info_v6::ri_proc_exit_abstime"]
            [::std::mem::offset_of!(rusage_info_v6, ri_proc_exit_abstime) - 88usize];
        ["Offset of field: rusage_info_v6::ri_child_user_time"]
            [::std::mem::offset_of!(rusage_info_v6, ri_child_user_time) - 96usize];
        ["Offset of field: rusage_info_v6::ri_child_system_time"]
            [::std::mem::offset_of!(rusage_info_v6, ri_child_system_time) - 104usize];
        ["Offset of field: rusage_info_v6::ri_child_pkg_idle_wkups"]
            [::std::mem::offset_of!(rusage_info_v6, ri_child_pkg_idle_wkups) - 112usize];
        ["Offset of field: rusage_info_v6::ri_child_interrupt_wkups"]
            [::std::mem::offset_of!(rusage_info_v6, ri_child_interrupt_wkups) - 120usize];
        ["Offset of field: rusage_info_v6::ri_child_pageins"]
            [::std::mem::offset_of!(rusage_info_v6, ri_child_pageins) - 128usize];
        ["Offset of field: rusage_info_v6::ri_child_elapsed_abstime"]
            [::std::mem::offset_of!(rusage_info_v6, ri_child_elapsed_abstime) - 136usize];
        ["Offset of field: rusage_info_v6::ri_diskio_bytesread"]
            [::std::mem::offset_of!(rusage_info_v6, ri_diskio_bytesread) - 144usize];
        ["Offset of field: rusage_info_v6::ri_diskio_byteswritten"]
            [::std::mem::offset_of!(rusage_info_v6, ri_diskio_byteswritten) - 152usize];
        ["Offset of field: rusage_info_v6::ri_cpu_time_qos_default"]
            [::std::mem::offset_of!(rusage_info_v6, ri_cpu_time_qos_default) - 160usize];
        ["Offset of field: rusage_info_v6::ri_cpu_time_qos_maintenance"]
            [::std::mem::offset_of!(rusage_info_v6, ri_cpu_time_qos_maintenance) - 168usize];
        ["Offset of field: rusage_info_v6::ri_cpu_time_qos_background"]
            [::std::mem::offset_of!(rusage_info_v6, ri_cpu_time_qos_background) - 176usize];
        ["Offset of field: rusage_info_v6::ri_cpu_time_qos_utility"]
            [::std::mem::offset_of!(rusage_info_v6, ri_cpu_time_qos_utility) - 184usize];
        ["Offset of field: rusage_info_v6::ri_cpu_time_qos_legacy"]
            [::std::mem::offset_of!(rusage_info_v6, ri_cpu_time_qos_legacy) - 192usize];
        ["Offset of field: rusage_info_v6::ri_cpu_time_qos_user_initiated"]
            [::std::mem::offset_of!(rusage_info_v6, ri_cpu_time_qos_user_initiated) - 200usize];
        ["Offset of field: rusage_info_v6::ri_cpu_time_qos_user_interactive"]
            [::std::mem::offset_of!(rusage_info_v6, ri_cpu_time_qos_user_interactive) - 208usize];
        ["Offset of field: rusage_info_v6::ri_billed_system_time"]
            [::std::mem::offset_of!(rusage_info_v6, ri_billed_system_time) - 216usize];
        ["Offset of field: rusage_info_v6::ri_serviced_system_time"]
            [::std::mem::offset_of!(rusage_info_v6, ri_serviced_system_time) - 224usize];
        ["Offset of field: rusage_info_v6::ri_logical_writes"]
            [::std::mem::offset_of!(rusage_info_v6, ri_logical_writes) - 232usize];
        ["Offset of field: rusage_info_v6::ri_lifetime_max_phys_footprint"]
            [::std::mem::offset_of!(rusage_info_v6, ri_lifetime_max_phys_footprint) - 240usize];
        ["Offset of field: rusage_info_v6::ri_instructions"]
            [::std::mem::offset_of!(rusage_info_v6, ri_instructions) - 248usize];
        ["Offset of field: rusage_info_v6::ri_cycles"]
            [::std::mem::offset_of!(rusage_info_v6, ri_cycles) - 256usize];
        ["Offset of field: rusage_info_v6::ri_billed_energy"]
            [::std::mem::offset_of!(rusage_info_v6, ri_billed_energy) - 264usize];
        ["Offset of field: rusage_info_v6::ri_serviced_energy"]
            [::std::mem::offset_of!(rusage_info_v6, ri_serviced_energy) - 272usize];
        ["Offset of field: rusage_info_v6::ri_interval_max_phys_footprint"]
            [::std::mem::offset_of!(rusage_info_v6, ri_interval_max_phys_footprint) - 280usize];
        ["Offset of field: rusage_info_v6::ri_runnable_time"]
            [::std::mem::offset_of!(rusage_info_v6, ri_runnable_time) - 288usize];
        ["Offset of field: rusage_info_v6::ri_flags"]
            [::std::mem::offset_of!(rusage_info_v6, ri_flags) - 296usize];
        ["Offset of field: rusage_info_v6::ri_user_ptime"]
            [::std::mem::offset_of!(rusage_info_v6, ri_user_ptime) - 304usize];
        ["Offset of field: rusage_info_v6::ri_system_ptime"]
            [::std::mem::offset_of!(rusage_info_v6, ri_system_ptime) - 312usize];
        ["Offset of field: rusage_info_v6::ri_pinstructions"]
            [::std::mem::offset_of!(rusage_info_v6, ri_pinstructions) - 320usize];
        ["Offset of field: rusage_info_v6::ri_pcycles"]
            [::std::mem::offset_of!(rusage_info_v6, ri_pcycles) - 328usize];
        ["Offset of field: rusage_info_v6::ri_energy_nj"]
            [::std::mem::offset_of!(rusage_info_v6, ri_energy_nj) - 336usize];
        ["Offset of field: rusage_info_v6::ri_penergy_nj"]
            [::std::mem::offset_of!(rusage_info_v6, ri_penergy_nj) - 344usize];
        ["Offset of field: rusage_info_v6::ri_secure_time_in_system"]
            [::std::mem::offset_of!(rusage_info_v6, ri_secure_time_in_system) - 352usize];
        ["Offset of field: rusage_info_v6::ri_secure_ptime_in_system"]
            [::std::mem::offset_of!(rusage_info_v6, ri_secure_ptime_in_system) - 360usize];
        ["Offset of field: rusage_info_v6::ri_neural_footprint"]
            [::std::mem::offset_of!(rusage_info_v6, ri_neural_footprint) - 368usize];
        ["Offset of field: rusage_info_v6::ri_lifetime_max_neural_footprint"]
            [::std::mem::offset_of!(rusage_info_v6, ri_lifetime_max_neural_footprint) - 376usize];
        ["Offset of field: rusage_info_v6::ri_interval_max_neural_footprint"]
            [::std::mem::offset_of!(rusage_info_v6, ri_interval_max_neural_footprint) - 384usize];
        ["Offset of field: rusage_info_v6::ri_reserved"]
            [::std::mem::offset_of!(rusage_info_v6, ri_reserved) - 392usize];
    };
    pub type rusage_info_current = root::rusage_info_v6;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct rlimit {
        pub rlim_cur: root::rlim_t,
        pub rlim_max: root::rlim_t,
    }
    const _: () = {
        ["Size of rlimit"][::std::mem::size_of::<rlimit>() - 16usize];
        ["Alignment of rlimit"][::std::mem::align_of::<rlimit>() - 8usize];
        ["Offset of field: rlimit::rlim_cur"][::std::mem::offset_of!(rlimit, rlim_cur) - 0usize];
        ["Offset of field: rlimit::rlim_max"][::std::mem::offset_of!(rlimit, rlim_max) - 8usize];
    };
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct proc_rlimit_control_wakeupmon {
        pub wm_flags: u32,
        pub wm_rate: i32,
    }
    const _: () = {
        ["Size of proc_rlimit_control_wakeupmon"]
            [::std::mem::size_of::<proc_rlimit_control_wakeupmon>() - 8usize];
        ["Alignment of proc_rlimit_control_wakeupmon"]
            [::std::mem::align_of::<proc_rlimit_control_wakeupmon>() - 4usize];
        ["Offset of field: proc_rlimit_control_wakeupmon::wm_flags"]
            [::std::mem::offset_of!(proc_rlimit_control_wakeupmon, wm_flags) - 0usize];
        ["Offset of field: proc_rlimit_control_wakeupmon::wm_rate"]
            [::std::mem::offset_of!(proc_rlimit_control_wakeupmon, wm_rate) - 4usize];
    };
    extern "C" {
        pub fn getpriority(arg1: ::std::os::raw::c_int, arg2: root::id_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn getiopolicy_np(
            arg1: ::std::os::raw::c_int,
            arg2: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn getrlimit(
            arg1: ::std::os::raw::c_int,
            arg2: *mut root::rlimit,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn getrusage(
            arg1: ::std::os::raw::c_int,
            arg2: *mut root::rusage,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn setpriority(
            arg1: ::std::os::raw::c_int,
            arg2: root::id_t,
            arg3: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn setiopolicy_np(
            arg1: ::std::os::raw::c_int,
            arg2: ::std::os::raw::c_int,
            arg3: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn setrlimit(
            arg1: ::std::os::raw::c_int,
            arg2: *const root::rlimit,
        ) -> ::std::os::raw::c_int;
    }
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union wait {
        pub w_status: ::std::os::raw::c_int,
        pub w_T: root::wait__bindgen_ty_1,
        pub w_S: root::wait__bindgen_ty_2,
    }
    #[repr(C)]
    #[repr(align(4))]
    #[derive(Debug, Copy, Clone)]
    pub struct wait__bindgen_ty_1 {
        pub _bitfield_align_1: [u16; 0],
        pub _bitfield_1: root::__BindgenBitfieldUnit<[u8; 4usize]>,
    }
    const _: () = {
        ["Size of wait__bindgen_ty_1"][::std::mem::size_of::<wait__bindgen_ty_1>() - 4usize];
        ["Alignment of wait__bindgen_ty_1"][::std::mem::align_of::<wait__bindgen_ty_1>() - 4usize];
    };
    impl wait__bindgen_ty_1 {
        #[inline]
        pub fn w_Termsig(&self) -> ::std::os::raw::c_uint {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 7u8) as u32) }
        }
        #[inline]
        pub fn set_w_Termsig(&mut self, val: ::std::os::raw::c_uint) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(0usize, 7u8, val as u64)
            }
        }
        #[inline]
        pub fn w_Coredump(&self) -> ::std::os::raw::c_uint {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
        }
        #[inline]
        pub fn set_w_Coredump(&mut self, val: ::std::os::raw::c_uint) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(7usize, 1u8, val as u64)
            }
        }
        #[inline]
        pub fn w_Retcode(&self) -> ::std::os::raw::c_uint {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
        }
        #[inline]
        pub fn set_w_Retcode(&mut self, val: ::std::os::raw::c_uint) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(8usize, 8u8, val as u64)
            }
        }
        #[inline]
        pub fn w_Filler(&self) -> ::std::os::raw::c_uint {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 16u8) as u32) }
        }
        #[inline]
        pub fn set_w_Filler(&mut self, val: ::std::os::raw::c_uint) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(16usize, 16u8, val as u64)
            }
        }
        #[inline]
        pub fn new_bitfield_1(
            w_Termsig: ::std::os::raw::c_uint,
            w_Coredump: ::std::os::raw::c_uint,
            w_Retcode: ::std::os::raw::c_uint,
            w_Filler: ::std::os::raw::c_uint,
        ) -> root::__BindgenBitfieldUnit<[u8; 4usize]> {
            let mut __bindgen_bitfield_unit: root::__BindgenBitfieldUnit<[u8; 4usize]> =
                Default::default();
            __bindgen_bitfield_unit.set(0usize, 7u8, {
                let w_Termsig: u32 = unsafe { ::std::mem::transmute(w_Termsig) };
                w_Termsig as u64
            });
            __bindgen_bitfield_unit.set(7usize, 1u8, {
                let w_Coredump: u32 = unsafe { ::std::mem::transmute(w_Coredump) };
                w_Coredump as u64
            });
            __bindgen_bitfield_unit.set(8usize, 8u8, {
                let w_Retcode: u32 = unsafe { ::std::mem::transmute(w_Retcode) };
                w_Retcode as u64
            });
            __bindgen_bitfield_unit.set(16usize, 16u8, {
                let w_Filler: u32 = unsafe { ::std::mem::transmute(w_Filler) };
                w_Filler as u64
            });
            __bindgen_bitfield_unit
        }
    }
    #[repr(C)]
    #[repr(align(4))]
    #[derive(Debug, Copy, Clone)]
    pub struct wait__bindgen_ty_2 {
        pub _bitfield_align_1: [u16; 0],
        pub _bitfield_1: root::__BindgenBitfieldUnit<[u8; 4usize]>,
    }
    const _: () = {
        ["Size of wait__bindgen_ty_2"][::std::mem::size_of::<wait__bindgen_ty_2>() - 4usize];
        ["Alignment of wait__bindgen_ty_2"][::std::mem::align_of::<wait__bindgen_ty_2>() - 4usize];
    };
    impl wait__bindgen_ty_2 {
        #[inline]
        pub fn w_Stopval(&self) -> ::std::os::raw::c_uint {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
        }
        #[inline]
        pub fn set_w_Stopval(&mut self, val: ::std::os::raw::c_uint) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(0usize, 8u8, val as u64)
            }
        }
        #[inline]
        pub fn w_Stopsig(&self) -> ::std::os::raw::c_uint {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(8usize, 8u8) as u32) }
        }
        #[inline]
        pub fn set_w_Stopsig(&mut self, val: ::std::os::raw::c_uint) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(8usize, 8u8, val as u64)
            }
        }
        #[inline]
        pub fn w_Filler(&self) -> ::std::os::raw::c_uint {
            unsafe { ::std::mem::transmute(self._bitfield_1.get(16usize, 16u8) as u32) }
        }
        #[inline]
        pub fn set_w_Filler(&mut self, val: ::std::os::raw::c_uint) {
            unsafe {
                let val: u32 = ::std::mem::transmute(val);
                self._bitfield_1.set(16usize, 16u8, val as u64)
            }
        }
        #[inline]
        pub fn new_bitfield_1(
            w_Stopval: ::std::os::raw::c_uint,
            w_Stopsig: ::std::os::raw::c_uint,
            w_Filler: ::std::os::raw::c_uint,
        ) -> root::__BindgenBitfieldUnit<[u8; 4usize]> {
            let mut __bindgen_bitfield_unit: root::__BindgenBitfieldUnit<[u8; 4usize]> =
                Default::default();
            __bindgen_bitfield_unit.set(0usize, 8u8, {
                let w_Stopval: u32 = unsafe { ::std::mem::transmute(w_Stopval) };
                w_Stopval as u64
            });
            __bindgen_bitfield_unit.set(8usize, 8u8, {
                let w_Stopsig: u32 = unsafe { ::std::mem::transmute(w_Stopsig) };
                w_Stopsig as u64
            });
            __bindgen_bitfield_unit.set(16usize, 16u8, {
                let w_Filler: u32 = unsafe { ::std::mem::transmute(w_Filler) };
                w_Filler as u64
            });
            __bindgen_bitfield_unit
        }
    }
    const _: () = {
        ["Size of wait"][::std::mem::size_of::<wait>() - 4usize];
        ["Alignment of wait"][::std::mem::align_of::<wait>() - 4usize];
        ["Offset of field: wait::w_status"][::std::mem::offset_of!(wait, w_status) - 0usize];
        ["Offset of field: wait::w_T"][::std::mem::offset_of!(wait, w_T) - 0usize];
        ["Offset of field: wait::w_S"][::std::mem::offset_of!(wait, w_S) - 0usize];
    };
    extern "C" {
        pub fn wait(arg1: *mut ::std::os::raw::c_int) -> root::pid_t;
    }
    extern "C" {
        pub fn waitpid(
            arg1: root::pid_t,
            arg2: *mut ::std::os::raw::c_int,
            arg3: ::std::os::raw::c_int,
        ) -> root::pid_t;
    }
    extern "C" {
        pub fn waitid(
            arg1: root::idtype_t,
            arg2: root::id_t,
            arg3: *mut root::siginfo_t,
            arg4: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn wait3(
            arg1: *mut ::std::os::raw::c_int,
            arg2: ::std::os::raw::c_int,
            arg3: *mut root::rusage,
        ) -> root::pid_t;
    }
    extern "C" {
        pub fn wait4(
            arg1: root::pid_t,
            arg2: *mut ::std::os::raw::c_int,
            arg3: ::std::os::raw::c_int,
            arg4: *mut root::rusage,
        ) -> root::pid_t;
    }
    extern "C" {
        pub fn alloca(arg1: usize) -> *mut ::std::os::raw::c_void;
    }
    pub type ct_rune_t = root::__darwin_ct_rune_t;
    pub type rune_t = root::__darwin_rune_t;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct div_t {
        pub quot: ::std::os::raw::c_int,
        pub rem: ::std::os::raw::c_int,
    }
    const _: () = {
        ["Size of div_t"][::std::mem::size_of::<div_t>() - 8usize];
        ["Alignment of div_t"][::std::mem::align_of::<div_t>() - 4usize];
        ["Offset of field: div_t::quot"][::std::mem::offset_of!(div_t, quot) - 0usize];
        ["Offset of field: div_t::rem"][::std::mem::offset_of!(div_t, rem) - 4usize];
    };
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct ldiv_t {
        pub quot: ::std::os::raw::c_long,
        pub rem: ::std::os::raw::c_long,
    }
    const _: () = {
        ["Size of ldiv_t"][::std::mem::size_of::<ldiv_t>() - 16usize];
        ["Alignment of ldiv_t"][::std::mem::align_of::<ldiv_t>() - 8usize];
        ["Offset of field: ldiv_t::quot"][::std::mem::offset_of!(ldiv_t, quot) - 0usize];
        ["Offset of field: ldiv_t::rem"][::std::mem::offset_of!(ldiv_t, rem) - 8usize];
    };
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct lldiv_t {
        pub quot: ::std::os::raw::c_longlong,
        pub rem: ::std::os::raw::c_longlong,
    }
    const _: () = {
        ["Size of lldiv_t"][::std::mem::size_of::<lldiv_t>() - 16usize];
        ["Alignment of lldiv_t"][::std::mem::align_of::<lldiv_t>() - 8usize];
        ["Offset of field: lldiv_t::quot"][::std::mem::offset_of!(lldiv_t, quot) - 0usize];
        ["Offset of field: lldiv_t::rem"][::std::mem::offset_of!(lldiv_t, rem) - 8usize];
    };
    extern "C" {
        pub static mut __mb_cur_max: ::std::os::raw::c_int;
    }
    pub type malloc_type_id_t = ::std::os::raw::c_ulonglong;
    extern "C" {
        pub fn malloc_type_malloc(
            size: usize,
            type_id: root::malloc_type_id_t,
        ) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn malloc_type_calloc(
            count: usize,
            size: usize,
            type_id: root::malloc_type_id_t,
        ) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn malloc_type_free(ptr: *mut ::std::os::raw::c_void, type_id: root::malloc_type_id_t);
    }
    extern "C" {
        pub fn malloc_type_realloc(
            ptr: *mut ::std::os::raw::c_void,
            size: usize,
            type_id: root::malloc_type_id_t,
        ) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn malloc_type_valloc(
            size: usize,
            type_id: root::malloc_type_id_t,
        ) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn malloc_type_aligned_alloc(
            alignment: usize,
            size: usize,
            type_id: root::malloc_type_id_t,
        ) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn malloc_type_posix_memalign(
            memptr: *mut *mut ::std::os::raw::c_void,
            alignment: usize,
            size: usize,
            type_id: root::malloc_type_id_t,
        ) -> ::std::os::raw::c_int;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _malloc_zone_t {
        _unused: [u8; 0],
    }
    pub type malloc_zone_t = root::_malloc_zone_t;
    extern "C" {
        pub fn malloc_type_zone_malloc(
            zone: *mut root::malloc_zone_t,
            size: usize,
            type_id: root::malloc_type_id_t,
        ) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn malloc_type_zone_calloc(
            zone: *mut root::malloc_zone_t,
            count: usize,
            size: usize,
            type_id: root::malloc_type_id_t,
        ) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn malloc_type_zone_free(
            zone: *mut root::malloc_zone_t,
            ptr: *mut ::std::os::raw::c_void,
            type_id: root::malloc_type_id_t,
        );
    }
    extern "C" {
        pub fn malloc_type_zone_realloc(
            zone: *mut root::malloc_zone_t,
            ptr: *mut ::std::os::raw::c_void,
            size: usize,
            type_id: root::malloc_type_id_t,
        ) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn malloc_type_zone_valloc(
            zone: *mut root::malloc_zone_t,
            size: usize,
            type_id: root::malloc_type_id_t,
        ) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn malloc_type_zone_memalign(
            zone: *mut root::malloc_zone_t,
            alignment: usize,
            size: usize,
            type_id: root::malloc_type_id_t,
        ) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn malloc(__size: usize) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn calloc(__count: usize, __size: usize) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn free(arg1: *mut ::std::os::raw::c_void);
    }
    extern "C" {
        pub fn realloc(
            __ptr: *mut ::std::os::raw::c_void,
            __size: usize,
        ) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn reallocf(
            __ptr: *mut ::std::os::raw::c_void,
            __size: usize,
        ) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn valloc(__size: usize) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn aligned_alloc(__alignment: usize, __size: usize) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn posix_memalign(
            __memptr: *mut *mut ::std::os::raw::c_void,
            __alignment: usize,
            __size: usize,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn abort() -> !;
    }
    extern "C" {
        pub fn abs(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn atexit(arg1: ::std::option::Option<unsafe extern "C" fn()>)
            -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn at_quick_exit(
            arg1: ::std::option::Option<unsafe extern "C" fn()>,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn atof(arg1: *const ::std::os::raw::c_char) -> f64;
    }
    extern "C" {
        pub fn atoi(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn atol(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
    }
    extern "C" {
        pub fn atoll(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
    }
    extern "C" {
        pub fn bsearch(
            __key: *const ::std::os::raw::c_void,
            __base: *const ::std::os::raw::c_void,
            __nel: usize,
            __width: usize,
            __compar: ::std::option::Option<
                unsafe extern "C" fn(
                    arg1: *const ::std::os::raw::c_void,
                    arg2: *const ::std::os::raw::c_void,
                ) -> ::std::os::raw::c_int,
            >,
        ) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn div(arg1: ::std::os::raw::c_int, arg2: ::std::os::raw::c_int) -> root::div_t;
    }
    extern "C" {
        pub fn exit(arg1: ::std::os::raw::c_int) -> !;
    }
    extern "C" {
        pub fn getenv(arg1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn labs(arg1: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
    }
    extern "C" {
        pub fn ldiv(arg1: ::std::os::raw::c_long, arg2: ::std::os::raw::c_long) -> root::ldiv_t;
    }
    extern "C" {
        pub fn llabs(arg1: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
    }
    extern "C" {
        pub fn lldiv(
            arg1: ::std::os::raw::c_longlong,
            arg2: ::std::os::raw::c_longlong,
        ) -> root::lldiv_t;
    }
    extern "C" {
        pub fn mblen(__s: *const ::std::os::raw::c_char, __n: usize) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn mbstowcs(arg1: *mut u32, arg2: *const ::std::os::raw::c_char, arg3: usize) -> usize;
    }
    extern "C" {
        pub fn mbtowc(
            arg1: *mut u32,
            arg2: *const ::std::os::raw::c_char,
            arg3: usize,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn qsort(
            __base: *mut ::std::os::raw::c_void,
            __nel: usize,
            __width: usize,
            __compar: ::std::option::Option<
                unsafe extern "C" fn(
                    arg1: *const ::std::os::raw::c_void,
                    arg2: *const ::std::os::raw::c_void,
                ) -> ::std::os::raw::c_int,
            >,
        );
    }
    extern "C" {
        pub fn quick_exit(arg1: ::std::os::raw::c_int) -> !;
    }
    extern "C" {
        pub fn rand() -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn srand(arg1: ::std::os::raw::c_uint);
    }
    extern "C" {
        pub fn strtod(
            arg1: *const ::std::os::raw::c_char,
            arg2: *mut *mut ::std::os::raw::c_char,
        ) -> f64;
    }
    extern "C" {
        pub fn strtof(
            arg1: *const ::std::os::raw::c_char,
            arg2: *mut *mut ::std::os::raw::c_char,
        ) -> f32;
    }
    extern "C" {
        pub fn strtol(
            __str: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
            __base: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_long;
    }
    extern "C" {
        pub fn strtold(
            arg1: *const ::std::os::raw::c_char,
            arg2: *mut *mut ::std::os::raw::c_char,
        ) -> f64;
    }
    extern "C" {
        pub fn strtoll(
            __str: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
            __base: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_longlong;
    }
    extern "C" {
        pub fn strtoul(
            __str: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
            __base: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_ulong;
    }
    extern "C" {
        pub fn strtoull(
            __str: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
            __base: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_ulonglong;
    }
    extern "C" {
        pub fn system(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn wcstombs(arg1: *mut ::std::os::raw::c_char, arg2: *const u32, arg3: usize) -> usize;
    }
    extern "C" {
        pub fn wctomb(arg1: *mut ::std::os::raw::c_char, arg2: u32) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn _Exit(arg1: ::std::os::raw::c_int) -> !;
    }
    extern "C" {
        pub fn a64l(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
    }
    extern "C" {
        pub fn drand48() -> f64;
    }
    extern "C" {
        pub fn ecvt(
            arg1: f64,
            arg2: ::std::os::raw::c_int,
            arg3: *mut ::std::os::raw::c_int,
            arg4: *mut ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn erand48(arg1: *mut ::std::os::raw::c_ushort) -> f64;
    }
    extern "C" {
        pub fn fcvt(
            arg1: f64,
            arg2: ::std::os::raw::c_int,
            arg3: *mut ::std::os::raw::c_int,
            arg4: *mut ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn gcvt(
            arg1: f64,
            arg2: ::std::os::raw::c_int,
            arg3: *mut ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn getsubopt(
            arg1: *mut *mut ::std::os::raw::c_char,
            arg2: *const *mut ::std::os::raw::c_char,
            arg3: *mut *mut ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn grantpt(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn initstate(
            arg1: ::std::os::raw::c_uint,
            arg2: *mut ::std::os::raw::c_char,
            arg3: usize,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn jrand48(arg1: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
    }
    extern "C" {
        pub fn l64a(arg1: ::std::os::raw::c_long) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn lcong48(arg1: *mut ::std::os::raw::c_ushort);
    }
    extern "C" {
        pub fn lrand48() -> ::std::os::raw::c_long;
    }
    extern "C" {
        pub fn mktemp(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn mkstemp(arg1: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn mrand48() -> ::std::os::raw::c_long;
    }
    extern "C" {
        pub fn nrand48(arg1: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
    }
    extern "C" {
        pub fn posix_openpt(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn ptsname(arg1: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn ptsname_r(
            fildes: ::std::os::raw::c_int,
            buffer: *mut ::std::os::raw::c_char,
            buflen: usize,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn putenv(arg1: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn random() -> ::std::os::raw::c_long;
    }
    extern "C" {
        pub fn rand_r(arg1: *mut ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
    }
    extern "C" {
        #[link_name = "\u{1}_realpath$DARWIN_EXTSN"]
        pub fn realpath(
            arg1: *const ::std::os::raw::c_char,
            arg2: *mut ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn seed48(arg1: *mut ::std::os::raw::c_ushort) -> *mut ::std::os::raw::c_ushort;
    }
    extern "C" {
        pub fn setenv(
            __name: *const ::std::os::raw::c_char,
            __value: *const ::std::os::raw::c_char,
            __overwrite: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn setkey(arg1: *const ::std::os::raw::c_char);
    }
    extern "C" {
        pub fn setstate(arg1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn srand48(arg1: ::std::os::raw::c_long);
    }
    extern "C" {
        pub fn srandom(arg1: ::std::os::raw::c_uint);
    }
    extern "C" {
        pub fn unlockpt(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn unsetenv(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    }
    pub type dev_t = root::__darwin_dev_t;
    pub type mode_t = root::__darwin_mode_t;
    extern "C" {
        pub fn arc4random() -> u32;
    }
    extern "C" {
        pub fn arc4random_addrandom(
            arg1: *mut ::std::os::raw::c_uchar,
            arg2: ::std::os::raw::c_int,
        );
    }
    extern "C" {
        pub fn arc4random_buf(__buf: *mut ::std::os::raw::c_void, __nbytes: usize);
    }
    extern "C" {
        pub fn arc4random_stir();
    }
    extern "C" {
        pub fn arc4random_uniform(__upper_bound: u32) -> u32;
    }
    extern "C" {
        pub fn atexit_b(arg1: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn bsearch_b(
            __key: *const ::std::os::raw::c_void,
            __base: *const ::std::os::raw::c_void,
            __nel: usize,
            __width: usize,
            __compar: *mut ::std::os::raw::c_void,
        ) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn cgetcap(
            arg1: *mut ::std::os::raw::c_char,
            arg2: *const ::std::os::raw::c_char,
            arg3: ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn cgetclose() -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn cgetent(
            arg1: *mut *mut ::std::os::raw::c_char,
            arg2: *mut *mut ::std::os::raw::c_char,
            arg3: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn cgetfirst(
            arg1: *mut *mut ::std::os::raw::c_char,
            arg2: *mut *mut ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn cgetmatch(
            arg1: *const ::std::os::raw::c_char,
            arg2: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn cgetnext(
            arg1: *mut *mut ::std::os::raw::c_char,
            arg2: *mut *mut ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn cgetnum(
            arg1: *mut ::std::os::raw::c_char,
            arg2: *const ::std::os::raw::c_char,
            arg3: *mut ::std::os::raw::c_long,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn cgetset(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn cgetstr(
            arg1: *mut ::std::os::raw::c_char,
            arg2: *const ::std::os::raw::c_char,
            arg3: *mut *mut ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn cgetustr(
            arg1: *mut ::std::os::raw::c_char,
            arg2: *const ::std::os::raw::c_char,
            arg3: *mut *mut ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn daemon(
            arg1: ::std::os::raw::c_int,
            arg2: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn devname(arg1: root::dev_t, arg2: root::mode_t) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn devname_r(
            arg1: root::dev_t,
            arg2: root::mode_t,
            buf: *mut ::std::os::raw::c_char,
            len: ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn getbsize(
            arg1: *mut ::std::os::raw::c_int,
            arg2: *mut ::std::os::raw::c_long,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn getloadavg(arg1: *mut f64, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn getprogname() -> *const ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn setprogname(arg1: *const ::std::os::raw::c_char);
    }
    extern "C" {
        pub fn heapsort(
            __base: *mut ::std::os::raw::c_void,
            __nel: usize,
            __width: usize,
            __compar: ::std::option::Option<
                unsafe extern "C" fn(
                    arg1: *const ::std::os::raw::c_void,
                    arg2: *const ::std::os::raw::c_void,
                ) -> ::std::os::raw::c_int,
            >,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn heapsort_b(
            __base: *mut ::std::os::raw::c_void,
            __nel: usize,
            __width: usize,
            __compar: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn mergesort(
            __base: *mut ::std::os::raw::c_void,
            __nel: usize,
            __width: usize,
            __compar: ::std::option::Option<
                unsafe extern "C" fn(
                    arg1: *const ::std::os::raw::c_void,
                    arg2: *const ::std::os::raw::c_void,
                ) -> ::std::os::raw::c_int,
            >,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn mergesort_b(
            __base: *mut ::std::os::raw::c_void,
            __nel: usize,
            __width: usize,
            __compar: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn psort(
            __base: *mut ::std::os::raw::c_void,
            __nel: usize,
            __width: usize,
            __compar: ::std::option::Option<
                unsafe extern "C" fn(
                    arg1: *const ::std::os::raw::c_void,
                    arg2: *const ::std::os::raw::c_void,
                ) -> ::std::os::raw::c_int,
            >,
        );
    }
    extern "C" {
        pub fn psort_b(
            __base: *mut ::std::os::raw::c_void,
            __nel: usize,
            __width: usize,
            __compar: *mut ::std::os::raw::c_void,
        );
    }
    extern "C" {
        pub fn psort_r(
            __base: *mut ::std::os::raw::c_void,
            __nel: usize,
            __width: usize,
            arg1: *mut ::std::os::raw::c_void,
            __compar: ::std::option::Option<
                unsafe extern "C" fn(
                    arg1: *mut ::std::os::raw::c_void,
                    arg2: *const ::std::os::raw::c_void,
                    arg3: *const ::std::os::raw::c_void,
                ) -> ::std::os::raw::c_int,
            >,
        );
    }
    extern "C" {
        pub fn qsort_b(
            __base: *mut ::std::os::raw::c_void,
            __nel: usize,
            __width: usize,
            __compar: *mut ::std::os::raw::c_void,
        );
    }
    extern "C" {
        pub fn qsort_r(
            __base: *mut ::std::os::raw::c_void,
            __nel: usize,
            __width: usize,
            arg1: *mut ::std::os::raw::c_void,
            __compar: ::std::option::Option<
                unsafe extern "C" fn(
                    arg1: *mut ::std::os::raw::c_void,
                    arg2: *const ::std::os::raw::c_void,
                    arg3: *const ::std::os::raw::c_void,
                ) -> ::std::os::raw::c_int,
            >,
        );
    }
    extern "C" {
        pub fn radixsort(
            __base: *mut *const ::std::os::raw::c_uchar,
            __nel: ::std::os::raw::c_int,
            __table: *const ::std::os::raw::c_uchar,
            __endbyte: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn rpmatch(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn sradixsort(
            __base: *mut *const ::std::os::raw::c_uchar,
            __nel: ::std::os::raw::c_int,
            __table: *const ::std::os::raw::c_uchar,
            __endbyte: ::std::os::raw::c_uint,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn sranddev();
    }
    extern "C" {
        pub fn srandomdev();
    }
    extern "C" {
        pub fn strtonum(
            __numstr: *const ::std::os::raw::c_char,
            __minval: ::std::os::raw::c_longlong,
            __maxval: ::std::os::raw::c_longlong,
            __errstrp: *mut *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_longlong;
    }
    extern "C" {
        pub fn strtoq(
            __str: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
            __base: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_longlong;
    }
    extern "C" {
        pub fn strtouq(
            __str: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
            __base: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_ulonglong;
    }
    extern "C" {
        pub static mut suboptarg: *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn __assert_rtn(
            arg1: *const ::std::os::raw::c_char,
            arg2: *const ::std::os::raw::c_char,
            arg3: ::std::os::raw::c_int,
            arg4: *const ::std::os::raw::c_char,
        ) -> !;
    }
    pub mod std {
        #[allow(unused_imports)]
        use self::super::super::root;
        pub mod __1 {
            #[allow(unused_imports)]
            use self::super::super::super::root;
            extern "C" {
                #[link_name = "\u{1}__ZNSt3__122__libcpp_verbose_abortEPKcz"]
                pub fn __libcpp_verbose_abort(__format: *const ::std::os::raw::c_char, ...);
            }
            extern "C" {
                #[link_name = "\u{1}__ZNSt3__15__useEPKcz"]
                pub fn __use(arg1: *const ::std::os::raw::c_char, ...);
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct __libcpp_is_always_lock_free {
                pub _address: u8,
            }
            pub type integral_constant_value_type = u8;
            pub type integral_constant_type = u8;
            pub type _Tp = ();
            extern "C" {
                pub static value: _Tp;
            }
            pub type true_type = u8;
            pub type false_type = u8;
            pub type _BoolConstant = u8;
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct is_same {
                pub _address: u8,
            }
            pub type _IsSame = u8;
            pub type _IsNotSame = u8;
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct is_enum {
                pub _address: u8,
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct underlying_type {
                pub _address: u8,
            }
            pub type underlying_type_t = u8;
            pub const __legacy_memory_order___mo_relaxed: root::std::__1::__legacy_memory_order = 0;
            pub const __legacy_memory_order___mo_consume: root::std::__1::__legacy_memory_order = 1;
            pub const __legacy_memory_order___mo_acquire: root::std::__1::__legacy_memory_order = 2;
            pub const __legacy_memory_order___mo_release: root::std::__1::__legacy_memory_order = 3;
            pub const __legacy_memory_order___mo_acq_rel: root::std::__1::__legacy_memory_order = 4;
            pub const __legacy_memory_order___mo_seq_cst: root::std::__1::__legacy_memory_order = 5;
            pub type __legacy_memory_order = ::std::os::raw::c_uint;
            pub type __memory_order_underlying_t = u32;
            pub const memory_order_memory_order_relaxed: root::std::__1::memory_order = 0;
            pub const memory_order_memory_order_consume: root::std::__1::memory_order = 1;
            pub const memory_order_memory_order_acquire: root::std::__1::memory_order = 2;
            pub const memory_order_memory_order_release: root::std::__1::memory_order = 3;
            pub const memory_order_memory_order_acq_rel: root::std::__1::memory_order = 4;
            pub const memory_order_memory_order_seq_cst: root::std::__1::memory_order = 5;
            pub type memory_order = ::std::os::raw::c_uint;
            pub type _If = u8;
            pub type conditional_type = u8;
            pub type conditional_t = u8;
            pub type __conditional_t = u8;
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct is_assignable {
                pub _address: u8,
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct is_trivially_copyable {
                pub _address: u8,
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct remove_const {
                pub _address: u8,
            }
            pub type remove_const_type = u8;
            pub type __remove_const_t = u8;
            pub type remove_const_t = u8;
            pub type __enable_if_t = u8;
            pub type enable_if_t = u8;
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct remove_volatile {
                pub _address: u8,
            }
            pub type remove_volatile_type = u8;
            pub type __remove_volatile_t = u8;
            pub type remove_volatile_t = u8;
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct remove_cv {
                pub _address: u8,
            }
            pub type remove_cv_type = u8;
            pub type __remove_cv_t = u8;
            pub type remove_cv_t = u8;
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct __libcpp_is_integral {
                pub _address: u8,
            }
            pub const __libcpp_is_integral_value:
                root::std::__1::__libcpp_is_integral__bindgen_ty_1 = 0;
            pub type __libcpp_is_integral__bindgen_ty_1 = i32;
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct is_integral {
                pub _address: u8,
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct __cxx_atomic_base_impl {
                pub _address: u8,
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct __cxx_atomic_impl {
                pub _address: u8,
            }
            pub type __cxx_contention_t = u64;
            pub type __cxx_atomic_contention_t = u8;
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct is_array {
                pub _address: u8,
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct is_const {
                pub _address: u8,
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct is_lvalue_reference {
                pub _address: u8,
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct is_rvalue_reference {
                pub _address: u8,
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct is_reference {
                pub _address: u8,
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct is_function {
                pub _address: u8,
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct is_void {
                pub _address: u8,
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct remove_reference {
                pub _address: u8,
            }
            pub type remove_reference_type = u8;
            pub type __libcpp_remove_reference_t = u8;
            pub type remove_reference_t = u8;
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct is_convertible {
                pub _address: u8,
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct __libcpp_is_referenceable {
                pub _address: u8,
            }
            pub type __add_pointer_t = u8;
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct add_pointer {
                pub _address: u8,
            }
            pub type add_pointer_type = u8;
            pub type add_pointer_t = u8;
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct remove_extent {
                pub _address: u8,
            }
            pub type remove_extent_type = u8;
            pub type __remove_extent_t = u8;
            pub type remove_extent_t = u8;
            pub type __decay_t = u8;
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct decay {
                pub _address: u8,
            }
            pub type decay_type = u8;
            pub type decay_t = u8;
            pub type __remove_cvref_t = u8;
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct __is_same_uncvref {
                pub _address: u8,
            }
            pub type __void_t = u8;
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct __common_type2_imp {
                pub _address: u8,
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct __common_type_impl {
                pub _address: u8,
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct __common_types {
                pub _address: u8,
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct common_type {
                pub _address: u8,
            }
            pub type common_type_t = u8;
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct add_const {
                pub _address: u8,
            }
            pub type add_const_type = u8;
            pub type add_const_t = u8;
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct add_cv {
                pub _address: u8,
            }
            pub type add_cv_type = u8;
            pub type add_cv_t = u8;
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct add_volatile {
                pub _address: u8,
            }
            pub type add_volatile_type = u8;
            pub type add_volatile_t = u8;
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct __copy_cv {
                pub _address: u8,
            }
            pub type __copy_cv_type = u8;
            pub type __copy_cv_t = u8;
            pub type __add_lvalue_reference_t = u8;
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct add_lvalue_reference {
                pub _address: u8,
            }
            pub type add_lvalue_reference_type = u8;
            pub type add_lvalue_reference_t = u8;
            pub type __add_rvalue_reference_t = u8;
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct add_rvalue_reference {
                pub _address: u8,
            }
            pub type add_rvalue_reference_type = u8;
            pub type add_rvalue_reference_t = u8;
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct __copy_cvref {
                pub _address: u8,
            }
            pub type __copy_cvref_type = u8;
            pub type __copy_cvref_t = u8;
            pub type __make_const_lvalue_ref = u8;
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct __libcpp_is_floating_point {
                pub _address: u8,
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct is_floating_point {
                pub _address: u8,
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct is_arithmetic {
                pub _address: u8,
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct is_signed {
                pub _address: u8,
            }
            pub const float_round_style_round_indeterminate: root::std::__1::float_round_style = -1;
            pub const float_round_style_round_toward_zero: root::std::__1::float_round_style = 0;
            pub const float_round_style_round_to_nearest: root::std::__1::float_round_style = 1;
            pub const float_round_style_round_toward_infinity: root::std::__1::float_round_style =
                2;
            pub const float_round_style_round_toward_neg_infinity:
                root::std::__1::float_round_style = 3;
            pub type float_round_style = ::std::os::raw::c_int;
            pub const float_denorm_style_denorm_indeterminate: root::std::__1::float_denorm_style =
                -1;
            pub const float_denorm_style_denorm_absent: root::std::__1::float_denorm_style = 0;
            pub const float_denorm_style_denorm_present: root::std::__1::float_denorm_style = 1;
            pub type float_denorm_style = ::std::os::raw::c_int;
            pub type __libcpp_numeric_limits_type = u8;
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct numeric_limits {
                pub _address: u8,
            }
            pub type numeric_limits___base = u8;
            pub type numeric_limits_type = u8;
            extern "C" {
                pub static is_specialized: bool;
            }
            extern "C" {
                pub static digits: ::std::os::raw::c_int;
            }
            extern "C" {
                pub static digits10: ::std::os::raw::c_int;
            }
            extern "C" {
                pub static max_digits10: ::std::os::raw::c_int;
            }
            extern "C" {
                pub static is_signed: bool;
            }
            extern "C" {
                pub static is_integer: bool;
            }
            extern "C" {
                pub static is_exact: bool;
            }
            extern "C" {
                pub static radix: ::std::os::raw::c_int;
            }
            extern "C" {
                pub static min_exponent: ::std::os::raw::c_int;
            }
            extern "C" {
                pub static min_exponent10: ::std::os::raw::c_int;
            }
            extern "C" {
                pub static max_exponent: ::std::os::raw::c_int;
            }
            extern "C" {
                pub static max_exponent10: ::std::os::raw::c_int;
            }
            extern "C" {
                pub static has_infinity: bool;
            }
            extern "C" {
                pub static has_quiet_NaN: bool;
            }
            extern "C" {
                pub static has_signaling_NaN: bool;
            }
            extern "C" {
                pub static has_denorm: root::std::__1::float_denorm_style;
            }
            extern "C" {
                pub static has_denorm_loss: bool;
            }
            extern "C" {
                pub static is_iec559: bool;
            }
            extern "C" {
                pub static is_bounded: bool;
            }
            extern "C" {
                pub static is_modulo: bool;
            }
            extern "C" {
                pub static traps: bool;
            }
            extern "C" {
                pub static tinyness_before: bool;
            }
            extern "C" {
                pub static round_style: root::std::__1::float_round_style;
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct hash {
                pub _address: u8,
            }
            #[repr(C)]
            #[repr(align(1))]
            #[derive(Debug, Copy, Clone)]
            pub struct __nat {
                pub _bindgen_opaque_blob: u8,
            }
            const _: () = {
                ["Size of __nat"][::std::mem::size_of::<__nat>() - 1usize];
                ["Alignment of __nat"][::std::mem::align_of::<__nat>() - 1usize];
            };
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct __type_list {
                pub _address: u8,
            }
            pub type __type_list__Head = u8;
            pub type __type_list__Tail = u8;
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct __align_type {
                pub _address: u8,
            }
            pub type __align_type_type = u8;
            #[repr(C)]
            #[repr(align(8))]
            #[derive(Debug, Copy, Clone)]
            pub struct __struct_double {
                pub _bindgen_opaque_blob: u64,
            }
            const _: () = {
                ["Size of __struct_double"][::std::mem::size_of::<__struct_double>() - 8usize];
                ["Alignment of __struct_double"]
                    [::std::mem::align_of::<__struct_double>() - 8usize];
            };
            #[repr(C)]
            #[repr(align(8))]
            #[derive(Debug, Copy, Clone)]
            pub struct __struct_double4 {
                pub _bindgen_opaque_blob: [u64; 4usize],
            }
            const _: () = {
                ["Size of __struct_double4"][::std::mem::size_of::<__struct_double4>() - 32usize];
                ["Alignment of __struct_double4"]
                    [::std::mem::align_of::<__struct_double4>() - 8usize];
            };
            pub type __all_types = u8;
            extern "C" {
                #[link_name = "\u{1}__min"]
                pub static __select_align___min: ::std::os::raw::c_ulong;
            }
            extern "C" {
                #[link_name = "\u{1}__max"]
                pub static __select_align___max: ::std::os::raw::c_ulong;
            }
            extern "C" {
                #[link_name = "\u{1}value"]
                pub static __select_align_value: ::std::os::raw::c_ulong;
            }
            pub type aligned_storage__Aligner = u8;
            #[repr(C)]
            #[repr(align(8))]
            #[derive(Copy, Clone)]
            pub union aligned_storage_type {
                pub _bindgen_opaque_blob: u64,
            }
            const _: () = {
                ["Size of aligned_storage_type"]
                    [::std::mem::size_of::<aligned_storage_type>() - 8usize];
                ["Alignment of aligned_storage_type"]
                    [::std::mem::align_of::<aligned_storage_type>() - 8usize];
            };
            pub type aligned_storage_t = u8;
            pub type aligned_union_type = u8;
            pub type aligned_union_t = u8;
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct alignment_of {
                pub _address: u8,
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct is_volatile {
                pub _address: u8,
            }
            pub type __apply_cv_impl___apply = u8;
            pub type __apply_cv_t = u8;
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct pair {
                pub _address: u8,
            }
            pub type __remove_const_ref_t = u8;
            #[repr(C)]
            #[repr(align(1))]
            #[derive(Debug, Copy, Clone)]
            pub struct __extract_key_fail_tag {
                pub _bindgen_opaque_blob: u8,
            }
            const _: () = {
                ["Size of __extract_key_fail_tag"]
                    [::std::mem::size_of::<__extract_key_fail_tag>() - 1usize];
                ["Alignment of __extract_key_fail_tag"]
                    [::std::mem::align_of::<__extract_key_fail_tag>() - 1usize];
            };
            #[repr(C)]
            #[repr(align(1))]
            #[derive(Debug, Copy, Clone)]
            pub struct __extract_key_self_tag {
                pub _bindgen_opaque_blob: u8,
            }
            const _: () = {
                ["Size of __extract_key_self_tag"]
                    [::std::mem::size_of::<__extract_key_self_tag>() - 1usize];
                ["Alignment of __extract_key_self_tag"]
                    [::std::mem::align_of::<__extract_key_self_tag>() - 1usize];
            };
            #[repr(C)]
            #[repr(align(1))]
            #[derive(Debug, Copy, Clone)]
            pub struct __extract_key_first_tag {
                pub _bindgen_opaque_blob: u8,
            }
            const _: () = {
                ["Size of __extract_key_first_tag"]
                    [::std::mem::size_of::<__extract_key_first_tag>() - 1usize];
                ["Alignment of __extract_key_first_tag"]
                    [::std::mem::align_of::<__extract_key_first_tag>() - 1usize];
            };
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct __can_extract_key {
                pub _address: u8,
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct __can_extract_map_key {
                pub _address: u8,
            }
            pub type __expand_to_true = u8;
            pub type _And = u8;
            pub type _Or = u8;
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct remove_all_extents {
                pub _address: u8,
            }
            pub type remove_all_extents_type = u8;
            pub type __remove_all_extents_t = u8;
            pub type remove_all_extents_t = u8;
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct has_virtual_destructor {
                pub _address: u8,
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct is_base_of {
                pub _address: u8,
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct __is_core_convertible {
                pub _address: u8,
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct __libcpp_is_member_pointer {
                pub _address: u8,
            }
            pub const __libcpp_is_member_pointer___is_member:
                root::std::__1::__libcpp_is_member_pointer__bindgen_ty_1 = 0;
            pub const __libcpp_is_member_pointer___is_func:
                root::std::__1::__libcpp_is_member_pointer__bindgen_ty_1 = 0;
            pub const __libcpp_is_member_pointer___is_obj:
                root::std::__1::__libcpp_is_member_pointer__bindgen_ty_1 = 0;
            pub type __libcpp_is_member_pointer__bindgen_ty_1 = i32;
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct is_member_function_pointer {
                pub _address: u8,
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct is_member_object_pointer {
                pub _address: u8,
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct reference_wrapper {
                pub _address: u8,
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct __is_reference_wrapper_impl {
                pub _address: u8,
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct __is_reference_wrapper {
                pub _address: u8,
            }
            #[repr(C)]
            #[repr(align(1))]
            #[derive(Debug, Copy, Clone)]
            pub struct __any {
                pub _bindgen_opaque_blob: u8,
            }
            const _: () = {
                ["Size of __any"][::std::mem::size_of::<__any>() - 1usize];
                ["Alignment of __any"][::std::mem::align_of::<__any>() - 1usize];
            };
            extern "C" {
                #[link_name = "\u{1}__ZNSt3__15__anyC1Ez"]
                pub fn __any___any(this: *mut root::std::__1::__any, ...);
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct __member_pointer_traits {
                pub _address: u8,
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct __member_pointer_class_type {
                pub _address: u8,
            }
            pub type __enable_if_bullet1 = u8;
            pub type __enable_if_bullet2 = u8;
            pub type __enable_if_bullet3 = u8;
            pub type __enable_if_bullet4 = u8;
            pub type __enable_if_bullet5 = u8;
            pub type __enable_if_bullet6 = u8;
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct __invokable_r {
                pub _address: u8,
            }
            pub type __invokable_r__Result = u8;
            pub type __invokable_r_type = u8;
            pub type __invokable = u8;
            pub type __nothrow_invokable_r = u8;
            pub type __nothrow_invokable = u8;
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct __invoke_of {
                pub _address: u8,
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct is_abstract {
                pub _address: u8,
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct __libcpp_is_bounded_array {
                pub _address: u8,
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct __is_callable {
                pub _address: u8,
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct is_standard_layout {
                pub _address: u8,
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct is_trivial {
                pub _address: u8,
            }
            pub type _IsCharLikeType = u8;
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct is_class {
                pub _address: u8,
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct __is_nullptr_t_impl {
                pub _address: u8,
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct __is_nullptr_t {
                pub _address: u8,
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct is_null_pointer {
                pub _address: u8,
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct is_fundamental {
                pub _address: u8,
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct is_compound {
                pub _address: u8,
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct is_constructible {
                pub _address: u8,
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct is_copy_assignable {
                pub _address: u8,
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct is_copy_constructible {
                pub _address: u8,
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct is_default_constructible {
                pub _address: u8,
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct is_destructible {
                pub _address: u8,
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct is_empty {
                pub _address: u8,
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct __libcpp_is_final {
                pub _address: u8,
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct is_final {
                pub _address: u8,
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct __is_implicitly_default_constructible {
                pub _address: u8,
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct is_literal_type {
                pub _address: u8,
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct is_member_pointer {
                pub _address: u8,
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct is_move_assignable {
                pub _address: u8,
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct is_move_constructible {
                pub _address: u8,
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct is_nothrow_assignable {
                pub _address: u8,
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct is_nothrow_constructible {
                pub _address: u8,
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct _Lazy {
                pub _address: u8,
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct is_nothrow_copy_assignable {
                pub _address: u8,
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct is_nothrow_copy_constructible {
                pub _address: u8,
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct is_nothrow_default_constructible {
                pub _address: u8,
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct is_pointer {
                pub _address: u8,
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct is_scalar {
                pub _address: u8,
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct is_nothrow_destructible {
                pub _address: u8,
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct is_nothrow_move_assignable {
                pub _address: u8,
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct is_nothrow_move_constructible {
                pub _address: u8,
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct is_union {
                pub _address: u8,
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct is_object {
                pub _address: u8,
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct is_pod {
                pub _address: u8,
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct is_polymorphic {
                pub _address: u8,
            }
            pub type __swap_result_t = u8;
            pub mod __detail {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                pub type __swappable_with___swap1 = u8;
                pub type __swappable_with___swap2 = u8;
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct __is_swappable {
                pub _address: u8,
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct __is_nothrow_swappable {
                pub _address: u8,
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct is_trivially_assignable {
                pub _address: u8,
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct is_trivially_constructible {
                pub _address: u8,
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct is_trivially_copy_assignable {
                pub _address: u8,
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct is_trivially_copy_constructible {
                pub _address: u8,
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct is_trivially_default_constructible {
                pub _address: u8,
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct is_trivially_destructible {
                pub _address: u8,
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct is_trivially_move_assignable {
                pub _address: u8,
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct is_trivially_move_constructible {
                pub _address: u8,
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct __libcpp_is_unbounded_array {
                pub _address: u8,
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct is_unsigned {
                pub _address: u8,
            }
            pub type __make_signed_t = u8;
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct make_signed {
                pub _address: u8,
            }
            pub type make_signed_type = u8;
            pub type make_signed_t = u8;
            pub type __make_unsigned_t = u8;
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct make_unsigned {
                pub _address: u8,
            }
            pub type make_unsigned_type = u8;
            pub type make_unsigned_t = u8;
            pub type __copy_unsigned_t = u8;
            pub type __maybe_const = u8;
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct _Not {
                pub _address: u8,
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct rank {
                pub _address: u8,
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct remove_pointer {
                pub _address: u8,
            }
            pub type remove_pointer_type = u8;
            pub type __remove_pointer_t = u8;
            pub type remove_pointer_t = u8;
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct result_of {
                pub _address: u8,
            }
            pub type result_of_t = u8;
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct __type_identity {
                pub _address: u8,
            }
            pub type __type_identity_type = u8;
            pub type __type_identity_t = u8;
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct __unwrap_reference {
                pub _address: u8,
            }
            pub type __unwrap_reference_type = u8;
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct __unwrap_ref_decay {
                pub _address: u8,
            }
            extern "C" {
                #[link_name = "\u{1}value"]
                pub static __static_gcd_value: ::std::os::raw::c_long;
            }
            extern "C" {
                #[link_name = "\u{1}value"]
                pub static __static_lcm_value: ::std::os::raw::c_long;
            }
            extern "C" {
                #[link_name = "\u{1}value"]
                pub static __static_abs_value: ::std::os::raw::c_long;
            }
            extern "C" {
                #[link_name = "\u{1}value"]
                pub static __static_sign_value: ::std::os::raw::c_long;
            }
            pub const __ll_mul_nan: ::std::os::raw::c_long = -9223372036854775808;
            pub const __ll_mul_min: ::std::os::raw::c_long = -9223372036854775807;
            pub const __ll_mul_max: ::std::os::raw::c_long = 9223372036854775807;
            extern "C" {
                #[link_name = "\u{1}__a_x"]
                pub static __ll_mul___a_x: ::std::os::raw::c_long;
            }
            extern "C" {
                #[link_name = "\u{1}__a_y"]
                pub static __ll_mul___a_y: ::std::os::raw::c_long;
            }
            extern "C" {
                #[link_name = "\u{1}value"]
                pub static __ll_mul_value: ::std::os::raw::c_long;
            }
            pub const __ll_div_nan: ::std::os::raw::c_long = -9223372036854775808;
            pub const __ll_div_min: ::std::os::raw::c_long = -9223372036854775807;
            pub const __ll_div_max: ::std::os::raw::c_long = 9223372036854775807;
            extern "C" {
                #[link_name = "\u{1}value"]
                pub static __ll_div_value: ::std::os::raw::c_long;
            }
            extern "C" {
                #[link_name = "\u{1}__na"]
                pub static ratio___na: ::std::os::raw::c_long;
            }
            extern "C" {
                #[link_name = "\u{1}__da"]
                pub static ratio___da: ::std::os::raw::c_long;
            }
            extern "C" {
                #[link_name = "\u{1}__s"]
                pub static ratio___s: ::std::os::raw::c_long;
            }
            extern "C" {
                #[link_name = "\u{1}__gcd"]
                pub static ratio___gcd: ::std::os::raw::c_long;
            }
            extern "C" {
                #[link_name = "\u{1}num"]
                pub static ratio_num: ::std::os::raw::c_long;
            }
            extern "C" {
                #[link_name = "\u{1}den"]
                pub static ratio_den: ::std::os::raw::c_long;
            }
            extern "C" {
                pub static num: ::std::os::raw::c_long;
            }
            extern "C" {
                pub static den: ::std::os::raw::c_long;
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct __is_ratio {
                pub _address: u8,
            }
            pub type atto = u8;
            pub type femto = u8;
            pub type pico = u8;
            pub type nano = u8;
            pub type micro = u8;
            pub type milli = u8;
            pub type centi = u8;
            pub type deci = u8;
            pub type deca = u8;
            pub type hecto = u8;
            pub type kilo = u8;
            pub type mega = u8;
            pub type giga = u8;
            pub type tera = u8;
            pub type peta = u8;
            pub type exa = u8;
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct __ratio_multiply {
                pub _address: u8,
            }
            pub type __ratio_multiply_type = u8;
            pub type ratio_multiply = u8;
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct __ratio_divide {
                pub _address: u8,
            }
            pub type __ratio_divide_type = u8;
            pub type ratio_divide = u8;
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct __ratio_add {
                pub _address: u8,
            }
            pub type __ratio_add_type = u8;
            pub type ratio_add = u8;
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct __ratio_subtract {
                pub _address: u8,
            }
            pub type __ratio_subtract_type = u8;
            pub type ratio_subtract = u8;
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct ratio_equal {
                pub _address: u8,
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct ratio_not_equal {
                pub _address: u8,
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct ratio_less {
                pub _address: u8,
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct ratio_less_equal {
                pub _address: u8,
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct ratio_greater {
                pub _address: u8,
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct ratio_greater_equal {
                pub _address: u8,
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct __ratio_gcd {
                pub _address: u8,
            }
            pub type __ratio_gcd_type = u8;
            pub mod chrono {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                #[repr(C)]
                #[derive(Debug, Copy, Clone)]
                pub struct __is_duration {
                    pub _address: u8,
                }
                #[repr(C)]
                #[derive(Debug, Copy, Clone)]
                pub struct treat_as_floating_point {
                    pub _address: u8,
                }
                #[repr(C)]
                #[derive(Debug, Copy, Clone)]
                pub struct duration_values {
                    pub _address: u8,
                }
                #[repr(C)]
                #[derive(Debug, Copy, Clone)]
                pub struct duration {
                    pub _address: u8,
                }
                #[repr(C)]
                #[derive(Debug, Copy, Clone)]
                pub struct duration___no_overflow {
                    pub _address: u8,
                }
                pub type duration___no_overflow_type = u8;
                pub type duration_rep = u8;
                pub type duration_period = u8;
                pub type nanoseconds = u64;
                pub type microseconds = u64;
                pub type milliseconds = u64;
                pub type seconds = u64;
                pub type minutes = u64;
                pub type hours = u64;
                #[repr(C)]
                #[derive(Debug, Copy, Clone)]
                pub struct __duration_eq {
                    pub _address: u8,
                }
                #[repr(C)]
                #[derive(Debug, Copy, Clone)]
                pub struct __duration_lt {
                    pub _address: u8,
                }
                #[repr(C)]
                #[derive(Debug, Copy, Clone)]
                pub struct time_point {
                    pub _address: u8,
                }
                pub type time_point_clock = u8;
                pub type time_point_duration = u8;
                pub type time_point_rep = u8;
                pub type time_point_period = u8;
                #[repr(C)]
                #[repr(align(1))]
                #[derive(Debug, Copy, Clone)]
                pub struct steady_clock {
                    pub _bindgen_opaque_blob: u8,
                }
                pub type steady_clock_duration = u64;
                pub type steady_clock_rep = u64;
                pub type steady_clock_period = u8;
                pub type steady_clock_time_point = u64;
                const _: () = {
                    ["Size of steady_clock"][::std::mem::size_of::<steady_clock>() - 1usize];
                    ["Alignment of steady_clock"][::std::mem::align_of::<steady_clock>() - 1usize];
                };
                extern "C" {
                    #[link_name = "\u{1}__ZNSt3__16chrono12steady_clock3nowEv"]
                    pub fn steady_clock_now() -> root::std::__1::chrono::steady_clock_time_point;
                }
                impl steady_clock {
                    #[inline]
                    pub unsafe fn now() -> root::std::__1::chrono::steady_clock_time_point {
                        steady_clock_now()
                    }
                }
                pub const steady_clock_is_steady: bool = true;
                #[repr(C)]
                #[repr(align(1))]
                #[derive(Debug, Copy, Clone)]
                pub struct system_clock {
                    pub _bindgen_opaque_blob: u8,
                }
                pub type system_clock_duration = u64;
                pub type system_clock_rep = u64;
                pub type system_clock_period = u8;
                pub type system_clock_time_point = u8;
                const _: () = {
                    ["Size of system_clock"][::std::mem::size_of::<system_clock>() - 1usize];
                    ["Alignment of system_clock"][::std::mem::align_of::<system_clock>() - 1usize];
                };
                extern "C" {
                    #[link_name = "\u{1}__ZNSt3__16chrono12system_clock3nowEv"]
                    pub fn system_clock_now() -> root::std::__1::chrono::system_clock_time_point;
                }
                extern "C" {
                    #[link_name = "\u{1}__ZNSt3__16chrono12system_clock9to_time_tERKNS0_10time_pointIS1_NS0_8durationIxNS_5ratioILl1ELl1000000EEEEEEE"]
                    pub fn system_clock_to_time_t(
                        __t: *const root::std::__1::chrono::system_clock_time_point,
                    ) -> ::std::os::raw::c_long;
                }
                extern "C" {
                    #[link_name = "\u{1}__ZNSt3__16chrono12system_clock11from_time_tEl"]
                    pub fn system_clock_from_time_t(
                        __t: ::std::os::raw::c_long,
                    ) -> root::std::__1::chrono::system_clock_time_point;
                }
                impl system_clock {
                    #[inline]
                    pub unsafe fn now() -> root::std::__1::chrono::system_clock_time_point {
                        system_clock_now()
                    }
                    #[inline]
                    pub unsafe fn to_time_t(
                        __t: *const root::std::__1::chrono::system_clock_time_point,
                    ) -> ::std::os::raw::c_long {
                        system_clock_to_time_t(__t)
                    }
                    #[inline]
                    pub unsafe fn from_time_t(
                        __t: ::std::os::raw::c_long,
                    ) -> root::std::__1::chrono::system_clock_time_point {
                        system_clock_from_time_t(__t)
                    }
                }
                pub const system_clock_is_steady: bool = false;
                pub type high_resolution_clock = u8;
            }
            pub const __libcpp_polling_count: ::std::os::raw::c_int = 64;
            #[repr(C)]
            #[repr(align(1))]
            #[derive(Debug, Copy, Clone)]
            pub struct __spinning_backoff_policy {
                pub _bindgen_opaque_blob: u8,
            }
            const _: () = {
                ["Size of __spinning_backoff_policy"]
                    [::std::mem::size_of::<__spinning_backoff_policy>() - 1usize];
                ["Alignment of __spinning_backoff_policy"]
                    [::std::mem::align_of::<__spinning_backoff_policy>() - 1usize];
            };
            pub mod __math {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct __numeric_type {
                pub _address: u8,
            }
            pub type __numeric_type_type = u8;
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct __promote {
                pub _address: u8,
            }
            pub type __libcpp_mutex_t = [u64; 8usize];
            pub type __libcpp_recursive_mutex_t = [u64; 8usize];
            pub type __libcpp_condvar_t = [u64; 6usize];
            pub type __libcpp_exec_once_flag = [u64; 2usize];
            pub type __libcpp_thread_id = u64;
            pub type __libcpp_thread_t = u64;
            pub type __libcpp_tls_key = u64;
            extern "C" {
                #[link_name = "\u{1}__ZNSt3__123__cxx_atomic_notify_oneEPVKv"]
                pub fn __cxx_atomic_notify_one(arg1: *const ::std::os::raw::c_void);
            }
            extern "C" {
                #[link_name = "\u{1}__ZNSt3__123__cxx_atomic_notify_allEPVKv"]
                pub fn __cxx_atomic_notify_all(arg1: *const ::std::os::raw::c_void);
            }
            extern "C" {
                #[link_name = "\u{1}__ZNSt3__123__libcpp_atomic_monitorEPVKv"]
                pub fn __libcpp_atomic_monitor(
                    arg1: *const ::std::os::raw::c_void,
                ) -> root::std::__1::__cxx_contention_t;
            }
            extern "C" {
                #[link_name = "\u{1}__ZNSt3__120__libcpp_atomic_waitEPVKvx"]
                pub fn __libcpp_atomic_wait(
                    arg1: *const ::std::os::raw::c_void,
                    arg2: root::std::__1::__cxx_contention_t,
                );
            }
            extern "C" {
                #[link_name = "\u{1}__ZNSt3__123__cxx_atomic_notify_oneEPVKNS_17__cxx_atomic_implIxNS_22__cxx_atomic_base_implIxEEEE"]
                pub fn __cxx_atomic_notify_one1(
                    arg1: *const root::std::__1::__cxx_atomic_contention_t,
                );
            }
            extern "C" {
                #[link_name = "\u{1}__ZNSt3__123__cxx_atomic_notify_allEPVKNS_17__cxx_atomic_implIxNS_22__cxx_atomic_base_implIxEEEE"]
                pub fn __cxx_atomic_notify_all1(
                    arg1: *const root::std::__1::__cxx_atomic_contention_t,
                );
            }
            extern "C" {
                #[link_name = "\u{1}__ZNSt3__123__libcpp_atomic_monitorEPVKNS_17__cxx_atomic_implIxNS_22__cxx_atomic_base_implIxEEEE"]
                pub fn __libcpp_atomic_monitor1(
                    arg1: *const root::std::__1::__cxx_atomic_contention_t,
                ) -> root::std::__1::__cxx_contention_t;
            }
            extern "C" {
                #[link_name = "\u{1}__ZNSt3__120__libcpp_atomic_waitEPVKNS_17__cxx_atomic_implIxNS_22__cxx_atomic_base_implIxEEEEx"]
                pub fn __libcpp_atomic_wait1(
                    arg1: *const root::std::__1::__cxx_atomic_contention_t,
                    arg2: root::std::__1::__cxx_contention_t,
                );
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct __libcpp_atomic_wait_backoff_impl {
                pub _address: u8,
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct __cxx_atomic_wait_test_fn_impl {
                pub _address: u8,
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct binary_function {
                pub _address: u8,
            }
            pub type binary_function_first_argument_type = u8;
            pub type binary_function_second_argument_type = u8;
            pub type binary_function_result_type = u8;
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct __binary_function_keep_layout_base {
                pub _address: u8,
            }
            pub type __binary_function_keep_layout_base_first_argument_type = u8;
            pub type __binary_function_keep_layout_base_second_argument_type = u8;
            pub type __binary_function_keep_layout_base_result_type = u8;
            pub type __binary_function = u8;
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct unary_function {
                pub _address: u8,
            }
            pub type unary_function_argument_type = u8;
            pub type unary_function_result_type = u8;
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct __unary_function_keep_layout_base {
                pub _address: u8,
            }
            pub type __unary_function_keep_layout_base_argument_type = u8;
            pub type __unary_function_keep_layout_base_result_type = u8;
            pub type __unary_function = u8;
            #[repr(C)]
            #[repr(align(1))]
            #[derive(Debug, Copy, Clone)]
            pub struct __equal_tag {
                pub _bindgen_opaque_blob: u8,
            }
            const _: () = {
                ["Size of __equal_tag"][::std::mem::size_of::<__equal_tag>() - 1usize];
                ["Alignment of __equal_tag"][::std::mem::align_of::<__equal_tag>() - 1usize];
            };
            #[repr(C)]
            #[repr(align(1))]
            #[derive(Debug, Copy, Clone)]
            pub struct __plus_tag {
                pub _bindgen_opaque_blob: u8,
            }
            const _: () = {
                ["Size of __plus_tag"][::std::mem::size_of::<__plus_tag>() - 1usize];
                ["Alignment of __plus_tag"][::std::mem::align_of::<__plus_tag>() - 1usize];
            };
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct __desugars_to {
                pub _address: u8,
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct plus {
                pub _address: u8,
            }
            pub type plus___result_type = u8;
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct minus {
                pub _address: u8,
            }
            pub type minus___result_type = u8;
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct multiplies {
                pub _address: u8,
            }
            pub type multiplies___result_type = u8;
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct divides {
                pub _address: u8,
            }
            pub type divides___result_type = u8;
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct modulus {
                pub _address: u8,
            }
            pub type modulus___result_type = u8;
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct negate {
                pub _address: u8,
            }
            pub type negate___result_type = u8;
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct bit_and {
                pub _address: u8,
            }
            pub type bit_and___result_type = u8;
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct bit_not {
                pub _address: u8,
            }
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct bit_or {
                pub _address: u8,
            }
            pub type bit_or___result_type = u8;
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct bit_xor {
                pub _address: u8,
            }
            pub type bit_xor___result_type = u8;
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct equal_to {
                pub _address: u8,
            }
            pub type equal_to___result_type = u8;
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct not_equal_to {
                pub _address: u8,
            }
            pub type not_equal_to___result_type = u8;
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct less {
                pub _address: u8,
            }
            pub type less___result_type = u8;
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct less_equal {
                pub _address: u8,
            }
            pub type less_equal___result_type = u8;
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct greater_equal {
                pub _address: u8,
            }
            pub type greater_equal___result_type = u8;
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct greater {
                pub _address: u8,
            }
            pub type greater___result_type = u8;
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct logical_and {
                pub _address: u8,
            }
            pub type logical_and___result_type = u8;
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct logical_not {
                pub _address: u8,
            }
            pub type logical_not___result_type = u8;
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct logical_or {
                pub _address: u8,
            }
            pub type logical_or___result_type = u8;
            #[repr(C)]
            #[derive(Debug, Copy, Clone)]
            pub struct atomic {
                pub _address: u8,
            }
            pub type atomic___base = u8;
            pub type atomic_value_type = u8;
            pub type atomic_difference_type = u8;
            pub type atomic_bool = u8;
            pub type atomic_char = u8;
            pub type atomic_schar = u8;
            pub type atomic_uchar = u8;
            pub type atomic_short = u8;
            pub type atomic_ushort = u8;
            pub type atomic_int = u8;
            pub type atomic_uint = u8;
            pub type atomic_long = u8;
            pub type atomic_ulong = u8;
            pub type atomic_llong = u8;
            pub type atomic_ullong = u8;
            pub type atomic_char16_t = u8;
            pub type atomic_char32_t = u8;
            pub type atomic_wchar_t = u8;
            pub type atomic_int_least8_t = u8;
            pub type atomic_uint_least8_t = u8;
            pub type atomic_int_least16_t = u8;
            pub type atomic_uint_least16_t = u8;
            pub type atomic_int_least32_t = u8;
            pub type atomic_uint_least32_t = u8;
            pub type atomic_int_least64_t = u8;
            pub type atomic_uint_least64_t = u8;
            pub type atomic_int_fast8_t = u8;
            pub type atomic_uint_fast8_t = u8;
            pub type atomic_int_fast16_t = u8;
            pub type atomic_uint_fast16_t = u8;
            pub type atomic_int_fast32_t = u8;
            pub type atomic_uint_fast32_t = u8;
            pub type atomic_int_fast64_t = u8;
            pub type atomic_uint_fast64_t = u8;
            pub type atomic_int8_t = u8;
            pub type atomic_uint8_t = u8;
            pub type atomic_int16_t = u8;
            pub type atomic_uint16_t = u8;
            pub type atomic_int32_t = u8;
            pub type atomic_uint32_t = u8;
            pub type atomic_int64_t = u8;
            pub type atomic_uint64_t = u8;
            pub type atomic_intptr_t = u8;
            pub type atomic_uintptr_t = u8;
            pub type atomic_size_t = u8;
            pub type atomic_ptrdiff_t = u8;
            pub type atomic_intmax_t = u8;
            pub type atomic_uintmax_t = u8;
            #[repr(C)]
            #[repr(align(1))]
            #[derive(Debug, Copy, Clone)]
            pub struct atomic_flag {
                pub _bindgen_opaque_blob: u8,
            }
            const _: () = {
                ["Size of atomic_flag"][::std::mem::size_of::<atomic_flag>() - 1usize];
                ["Alignment of atomic_flag"][::std::mem::align_of::<atomic_flag>() - 1usize];
            };
        }
    }
    extern "C" {
        pub fn memchr(
            __s: *const ::std::os::raw::c_void,
            __c: ::std::os::raw::c_int,
            __n: usize,
        ) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn memcmp(
            __s1: *const ::std::os::raw::c_void,
            __s2: *const ::std::os::raw::c_void,
            __n: usize,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn memcpy(
            __dst: *mut ::std::os::raw::c_void,
            __src: *const ::std::os::raw::c_void,
            __n: usize,
        ) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn memmove(
            __dst: *mut ::std::os::raw::c_void,
            __src: *const ::std::os::raw::c_void,
            __len: usize,
        ) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn memset(
            __b: *mut ::std::os::raw::c_void,
            __c: ::std::os::raw::c_int,
            __len: usize,
        ) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn strcat(
            __s1: *mut ::std::os::raw::c_char,
            __s2: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn strchr(
            __s: *const ::std::os::raw::c_char,
            __c: ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn strcmp(
            __s1: *const ::std::os::raw::c_char,
            __s2: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn strcoll(
            __s1: *const ::std::os::raw::c_char,
            __s2: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn strcpy(
            __dst: *mut ::std::os::raw::c_char,
            __src: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn strcspn(
            __s: *const ::std::os::raw::c_char,
            __charset: *const ::std::os::raw::c_char,
        ) -> usize;
    }
    extern "C" {
        pub fn strerror(__errnum: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn strlen(__s: *const ::std::os::raw::c_char) -> usize;
    }
    extern "C" {
        pub fn strncat(
            __s1: *mut ::std::os::raw::c_char,
            __s2: *const ::std::os::raw::c_char,
            __n: usize,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn strncmp(
            __s1: *const ::std::os::raw::c_char,
            __s2: *const ::std::os::raw::c_char,
            __n: usize,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn strncpy(
            __dst: *mut ::std::os::raw::c_char,
            __src: *const ::std::os::raw::c_char,
            __n: usize,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn strpbrk(
            __s: *const ::std::os::raw::c_char,
            __charset: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn strrchr(
            __s: *const ::std::os::raw::c_char,
            __c: ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn strspn(
            __s: *const ::std::os::raw::c_char,
            __charset: *const ::std::os::raw::c_char,
        ) -> usize;
    }
    extern "C" {
        pub fn strstr(
            __big: *const ::std::os::raw::c_char,
            __little: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn strtok(
            __str: *mut ::std::os::raw::c_char,
            __sep: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn strxfrm(
            __s1: *mut ::std::os::raw::c_char,
            __s2: *const ::std::os::raw::c_char,
            __n: usize,
        ) -> usize;
    }
    extern "C" {
        pub fn strtok_r(
            __str: *mut ::std::os::raw::c_char,
            __sep: *const ::std::os::raw::c_char,
            __lasts: *mut *mut ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn strerror_r(
            __errnum: ::std::os::raw::c_int,
            __strerrbuf: *mut ::std::os::raw::c_char,
            __buflen: usize,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn strdup(__s1: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn memccpy(
            __dst: *mut ::std::os::raw::c_void,
            __src: *const ::std::os::raw::c_void,
            __c: ::std::os::raw::c_int,
            __n: usize,
        ) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn stpcpy(
            __dst: *mut ::std::os::raw::c_char,
            __src: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn stpncpy(
            __dst: *mut ::std::os::raw::c_char,
            __src: *const ::std::os::raw::c_char,
            __n: usize,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn strndup(
            __s1: *const ::std::os::raw::c_char,
            __n: usize,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn strnlen(__s1: *const ::std::os::raw::c_char, __n: usize) -> usize;
    }
    extern "C" {
        pub fn strsignal(__sig: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn memmem(
            __big: *const ::std::os::raw::c_void,
            __big_len: usize,
            __little: *const ::std::os::raw::c_void,
            __little_len: usize,
        ) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn memset_pattern4(
            __b: *mut ::std::os::raw::c_void,
            __pattern4: *const ::std::os::raw::c_void,
            __len: usize,
        );
    }
    extern "C" {
        pub fn memset_pattern8(
            __b: *mut ::std::os::raw::c_void,
            __pattern8: *const ::std::os::raw::c_void,
            __len: usize,
        );
    }
    extern "C" {
        pub fn memset_pattern16(
            __b: *mut ::std::os::raw::c_void,
            __pattern16: *const ::std::os::raw::c_void,
            __len: usize,
        );
    }
    extern "C" {
        pub fn strcasestr(
            __big: *const ::std::os::raw::c_char,
            __little: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn strnstr(
            __big: *const ::std::os::raw::c_char,
            __little: *const ::std::os::raw::c_char,
            __len: usize,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn strlcat(
            __dst: *mut ::std::os::raw::c_char,
            __source: *const ::std::os::raw::c_char,
            __size: usize,
        ) -> usize;
    }
    extern "C" {
        pub fn strlcpy(
            __dst: *mut ::std::os::raw::c_char,
            __source: *const ::std::os::raw::c_char,
            __size: usize,
        ) -> usize;
    }
    extern "C" {
        pub fn strmode(__mode: ::std::os::raw::c_int, __bp: *mut ::std::os::raw::c_char);
    }
    extern "C" {
        pub fn strsep(
            __stringp: *mut *mut ::std::os::raw::c_char,
            __delim: *const ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn swab(
            arg1: *const ::std::os::raw::c_void,
            arg2: *mut ::std::os::raw::c_void,
            arg3: isize,
        );
    }
    extern "C" {
        pub fn timingsafe_bcmp(
            __b1: *const ::std::os::raw::c_void,
            __b2: *const ::std::os::raw::c_void,
            __len: usize,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn strsignal_r(
            __sig: ::std::os::raw::c_int,
            __strsignalbuf: *mut ::std::os::raw::c_char,
            __buflen: usize,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn bcmp(
            arg1: *const ::std::os::raw::c_void,
            arg2: *const ::std::os::raw::c_void,
            arg3: usize,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn bcopy(
            arg1: *const ::std::os::raw::c_void,
            arg2: *mut ::std::os::raw::c_void,
            arg3: usize,
        );
    }
    extern "C" {
        pub fn bzero(arg1: *mut ::std::os::raw::c_void, arg2: usize);
    }
    extern "C" {
        pub fn index(
            arg1: *const ::std::os::raw::c_char,
            arg2: ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn rindex(
            arg1: *const ::std::os::raw::c_char,
            arg2: ::std::os::raw::c_int,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn ffs(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn strcasecmp(
            arg1: *const ::std::os::raw::c_char,
            arg2: *const ::std::os::raw::c_char,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn strncasecmp(
            arg1: *const ::std::os::raw::c_char,
            arg2: *const ::std::os::raw::c_char,
            arg3: usize,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn ffsl(arg1: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn ffsll(arg1: ::std::os::raw::c_longlong) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn fls(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn flsl(arg1: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn flsll(arg1: ::std::os::raw::c_longlong) -> ::std::os::raw::c_int;
    }
    pub type clock_t = root::__darwin_clock_t;
    pub type time_t = root::__darwin_time_t;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct timespec {
        pub tv_sec: root::__darwin_time_t,
        pub tv_nsec: ::std::os::raw::c_long,
    }
    const _: () = {
        ["Size of timespec"][::std::mem::size_of::<timespec>() - 16usize];
        ["Alignment of timespec"][::std::mem::align_of::<timespec>() - 8usize];
        ["Offset of field: timespec::tv_sec"][::std::mem::offset_of!(timespec, tv_sec) - 0usize];
        ["Offset of field: timespec::tv_nsec"][::std::mem::offset_of!(timespec, tv_nsec) - 8usize];
    };
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct tm {
        pub tm_sec: ::std::os::raw::c_int,
        pub tm_min: ::std::os::raw::c_int,
        pub tm_hour: ::std::os::raw::c_int,
        pub tm_mday: ::std::os::raw::c_int,
        pub tm_mon: ::std::os::raw::c_int,
        pub tm_year: ::std::os::raw::c_int,
        pub tm_wday: ::std::os::raw::c_int,
        pub tm_yday: ::std::os::raw::c_int,
        pub tm_isdst: ::std::os::raw::c_int,
        pub tm_gmtoff: ::std::os::raw::c_long,
        pub tm_zone: *mut ::std::os::raw::c_char,
    }
    const _: () = {
        ["Size of tm"][::std::mem::size_of::<tm>() - 56usize];
        ["Alignment of tm"][::std::mem::align_of::<tm>() - 8usize];
        ["Offset of field: tm::tm_sec"][::std::mem::offset_of!(tm, tm_sec) - 0usize];
        ["Offset of field: tm::tm_min"][::std::mem::offset_of!(tm, tm_min) - 4usize];
        ["Offset of field: tm::tm_hour"][::std::mem::offset_of!(tm, tm_hour) - 8usize];
        ["Offset of field: tm::tm_mday"][::std::mem::offset_of!(tm, tm_mday) - 12usize];
        ["Offset of field: tm::tm_mon"][::std::mem::offset_of!(tm, tm_mon) - 16usize];
        ["Offset of field: tm::tm_year"][::std::mem::offset_of!(tm, tm_year) - 20usize];
        ["Offset of field: tm::tm_wday"][::std::mem::offset_of!(tm, tm_wday) - 24usize];
        ["Offset of field: tm::tm_yday"][::std::mem::offset_of!(tm, tm_yday) - 28usize];
        ["Offset of field: tm::tm_isdst"][::std::mem::offset_of!(tm, tm_isdst) - 32usize];
        ["Offset of field: tm::tm_gmtoff"][::std::mem::offset_of!(tm, tm_gmtoff) - 40usize];
        ["Offset of field: tm::tm_zone"][::std::mem::offset_of!(tm, tm_zone) - 48usize];
    };
    extern "C" {
        pub static mut tzname: [*mut ::std::os::raw::c_char; 0usize];
    }
    extern "C" {
        pub static mut getdate_err: ::std::os::raw::c_int;
    }
    extern "C" {
        pub static mut timezone: ::std::os::raw::c_long;
    }
    extern "C" {
        pub static mut daylight: ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn asctime(arg1: *const root::tm) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn clock() -> root::clock_t;
    }
    extern "C" {
        pub fn ctime(arg1: *const root::time_t) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn difftime(arg1: root::time_t, arg2: root::time_t) -> f64;
    }
    extern "C" {
        pub fn getdate(arg1: *const ::std::os::raw::c_char) -> *mut root::tm;
    }
    extern "C" {
        pub fn gmtime(arg1: *const root::time_t) -> *mut root::tm;
    }
    extern "C" {
        pub fn localtime(arg1: *const root::time_t) -> *mut root::tm;
    }
    extern "C" {
        pub fn mktime(arg1: *mut root::tm) -> root::time_t;
    }
    extern "C" {
        pub fn strftime(
            arg1: *mut ::std::os::raw::c_char,
            arg2: usize,
            arg3: *const ::std::os::raw::c_char,
            arg4: *const root::tm,
        ) -> usize;
    }
    extern "C" {
        pub fn strptime(
            arg1: *const ::std::os::raw::c_char,
            arg2: *const ::std::os::raw::c_char,
            arg3: *mut root::tm,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn time(arg1: *mut root::time_t) -> root::time_t;
    }
    extern "C" {
        pub fn tzset();
    }
    extern "C" {
        pub fn asctime_r(
            arg1: *const root::tm,
            arg2: *mut ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn ctime_r(
            arg1: *const root::time_t,
            arg2: *mut ::std::os::raw::c_char,
        ) -> *mut ::std::os::raw::c_char;
    }
    extern "C" {
        pub fn gmtime_r(arg1: *const root::time_t, arg2: *mut root::tm) -> *mut root::tm;
    }
    extern "C" {
        pub fn localtime_r(arg1: *const root::time_t, arg2: *mut root::tm) -> *mut root::tm;
    }
    extern "C" {
        pub fn posix2time(arg1: root::time_t) -> root::time_t;
    }
    extern "C" {
        pub fn tzsetwall();
    }
    extern "C" {
        pub fn time2posix(arg1: root::time_t) -> root::time_t;
    }
    extern "C" {
        pub fn timelocal(arg1: *mut root::tm) -> root::time_t;
    }
    extern "C" {
        pub fn timegm(arg1: *mut root::tm) -> root::time_t;
    }
    extern "C" {
        pub fn nanosleep(
            __rqtp: *const root::timespec,
            __rmtp: *mut root::timespec,
        ) -> ::std::os::raw::c_int;
    }
    pub const clockid_t__CLOCK_REALTIME: root::clockid_t = 0;
    pub const clockid_t__CLOCK_MONOTONIC: root::clockid_t = 6;
    pub const clockid_t__CLOCK_MONOTONIC_RAW: root::clockid_t = 4;
    pub const clockid_t__CLOCK_MONOTONIC_RAW_APPROX: root::clockid_t = 5;
    pub const clockid_t__CLOCK_UPTIME_RAW: root::clockid_t = 8;
    pub const clockid_t__CLOCK_UPTIME_RAW_APPROX: root::clockid_t = 9;
    pub const clockid_t__CLOCK_PROCESS_CPUTIME_ID: root::clockid_t = 12;
    pub const clockid_t__CLOCK_THREAD_CPUTIME_ID: root::clockid_t = 16;
    pub type clockid_t = ::std::os::raw::c_uint;
    extern "C" {
        pub fn clock_getres(
            __clock_id: root::clockid_t,
            __res: *mut root::timespec,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn clock_gettime(
            __clock_id: root::clockid_t,
            __tp: *mut root::timespec,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn clock_gettime_nsec_np(__clock_id: root::clockid_t) -> root::__uint64_t;
    }
    extern "C" {
        pub fn clock_settime(
            __clock_id: root::clockid_t,
            __tp: *const root::timespec,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn timespec_get(
            ts: *mut root::timespec,
            base: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn __error() -> *mut ::std::os::raw::c_int;
    }
    pub type float_t = f32;
    pub type double_t = f64;
    extern "C" {
        pub fn __math_errhandling() -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn __fpclassifyf(arg1: f32) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn __fpclassifyd(arg1: f64) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn __fpclassifyl(arg1: f64) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn acosf(arg1: f32) -> f32;
    }
    extern "C" {
        pub fn acos(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn acosl(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn asinf(arg1: f32) -> f32;
    }
    extern "C" {
        pub fn asin(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn asinl(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn atanf(arg1: f32) -> f32;
    }
    extern "C" {
        pub fn atan(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn atanl(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn atan2f(arg1: f32, arg2: f32) -> f32;
    }
    extern "C" {
        pub fn atan2(arg1: f64, arg2: f64) -> f64;
    }
    extern "C" {
        pub fn atan2l(arg1: f64, arg2: f64) -> f64;
    }
    extern "C" {
        pub fn cosf(arg1: f32) -> f32;
    }
    extern "C" {
        pub fn cos(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn cosl(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn sinf(arg1: f32) -> f32;
    }
    extern "C" {
        pub fn sin(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn sinl(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn tanf(arg1: f32) -> f32;
    }
    extern "C" {
        pub fn tan(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn tanl(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn acoshf(arg1: f32) -> f32;
    }
    extern "C" {
        pub fn acosh(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn acoshl(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn asinhf(arg1: f32) -> f32;
    }
    extern "C" {
        pub fn asinh(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn asinhl(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn atanhf(arg1: f32) -> f32;
    }
    extern "C" {
        pub fn atanh(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn atanhl(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn coshf(arg1: f32) -> f32;
    }
    extern "C" {
        pub fn cosh(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn coshl(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn sinhf(arg1: f32) -> f32;
    }
    extern "C" {
        pub fn sinh(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn sinhl(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn tanhf(arg1: f32) -> f32;
    }
    extern "C" {
        pub fn tanh(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn tanhl(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn expf(arg1: f32) -> f32;
    }
    extern "C" {
        pub fn exp(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn expl(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn exp2f(arg1: f32) -> f32;
    }
    extern "C" {
        pub fn exp2(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn exp2l(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn expm1f(arg1: f32) -> f32;
    }
    extern "C" {
        pub fn expm1(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn expm1l(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn logf(arg1: f32) -> f32;
    }
    extern "C" {
        pub fn log(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn logl(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn log10f(arg1: f32) -> f32;
    }
    extern "C" {
        pub fn log10(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn log10l(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn log2f(arg1: f32) -> f32;
    }
    extern "C" {
        pub fn log2(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn log2l(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn log1pf(arg1: f32) -> f32;
    }
    extern "C" {
        pub fn log1p(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn log1pl(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn logbf(arg1: f32) -> f32;
    }
    extern "C" {
        pub fn logb(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn logbl(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn modff(arg1: f32, arg2: *mut f32) -> f32;
    }
    extern "C" {
        pub fn modf(arg1: f64, arg2: *mut f64) -> f64;
    }
    extern "C" {
        pub fn modfl(arg1: f64, arg2: *mut f64) -> f64;
    }
    extern "C" {
        pub fn ldexpf(arg1: f32, arg2: ::std::os::raw::c_int) -> f32;
    }
    extern "C" {
        pub fn ldexp(arg1: f64, arg2: ::std::os::raw::c_int) -> f64;
    }
    extern "C" {
        pub fn ldexpl(arg1: f64, arg2: ::std::os::raw::c_int) -> f64;
    }
    extern "C" {
        pub fn frexpf(arg1: f32, arg2: *mut ::std::os::raw::c_int) -> f32;
    }
    extern "C" {
        pub fn frexp(arg1: f64, arg2: *mut ::std::os::raw::c_int) -> f64;
    }
    extern "C" {
        pub fn frexpl(arg1: f64, arg2: *mut ::std::os::raw::c_int) -> f64;
    }
    extern "C" {
        pub fn ilogbf(arg1: f32) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn ilogb(arg1: f64) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn ilogbl(arg1: f64) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn scalbnf(arg1: f32, arg2: ::std::os::raw::c_int) -> f32;
    }
    extern "C" {
        pub fn scalbn(arg1: f64, arg2: ::std::os::raw::c_int) -> f64;
    }
    extern "C" {
        pub fn scalbnl(arg1: f64, arg2: ::std::os::raw::c_int) -> f64;
    }
    extern "C" {
        pub fn scalblnf(arg1: f32, arg2: ::std::os::raw::c_long) -> f32;
    }
    extern "C" {
        pub fn scalbln(arg1: f64, arg2: ::std::os::raw::c_long) -> f64;
    }
    extern "C" {
        pub fn scalblnl(arg1: f64, arg2: ::std::os::raw::c_long) -> f64;
    }
    extern "C" {
        pub fn fabsf(arg1: f32) -> f32;
    }
    extern "C" {
        pub fn fabs(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn fabsl(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn cbrtf(arg1: f32) -> f32;
    }
    extern "C" {
        pub fn cbrt(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn cbrtl(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn hypotf(arg1: f32, arg2: f32) -> f32;
    }
    extern "C" {
        pub fn hypot(arg1: f64, arg2: f64) -> f64;
    }
    extern "C" {
        pub fn hypotl(arg1: f64, arg2: f64) -> f64;
    }
    extern "C" {
        pub fn powf(arg1: f32, arg2: f32) -> f32;
    }
    extern "C" {
        pub fn pow(arg1: f64, arg2: f64) -> f64;
    }
    extern "C" {
        pub fn powl(arg1: f64, arg2: f64) -> f64;
    }
    extern "C" {
        pub fn sqrtf(arg1: f32) -> f32;
    }
    extern "C" {
        pub fn sqrt(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn sqrtl(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn erff(arg1: f32) -> f32;
    }
    extern "C" {
        pub fn erf(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn erfl(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn erfcf(arg1: f32) -> f32;
    }
    extern "C" {
        pub fn erfc(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn erfcl(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn lgammaf(arg1: f32) -> f32;
    }
    extern "C" {
        pub fn lgamma(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn lgammal(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn tgammaf(arg1: f32) -> f32;
    }
    extern "C" {
        pub fn tgamma(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn tgammal(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn ceilf(arg1: f32) -> f32;
    }
    extern "C" {
        pub fn ceil(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn ceill(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn floorf(arg1: f32) -> f32;
    }
    extern "C" {
        pub fn floor(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn floorl(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn nearbyintf(arg1: f32) -> f32;
    }
    extern "C" {
        pub fn nearbyint(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn nearbyintl(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn rintf(arg1: f32) -> f32;
    }
    extern "C" {
        pub fn rint(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn rintl(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn lrintf(arg1: f32) -> ::std::os::raw::c_long;
    }
    extern "C" {
        pub fn lrint(arg1: f64) -> ::std::os::raw::c_long;
    }
    extern "C" {
        pub fn lrintl(arg1: f64) -> ::std::os::raw::c_long;
    }
    extern "C" {
        pub fn roundf(arg1: f32) -> f32;
    }
    extern "C" {
        pub fn round(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn roundl(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn lroundf(arg1: f32) -> ::std::os::raw::c_long;
    }
    extern "C" {
        pub fn lround(arg1: f64) -> ::std::os::raw::c_long;
    }
    extern "C" {
        pub fn lroundl(arg1: f64) -> ::std::os::raw::c_long;
    }
    extern "C" {
        pub fn llrintf(arg1: f32) -> ::std::os::raw::c_longlong;
    }
    extern "C" {
        pub fn llrint(arg1: f64) -> ::std::os::raw::c_longlong;
    }
    extern "C" {
        pub fn llrintl(arg1: f64) -> ::std::os::raw::c_longlong;
    }
    extern "C" {
        pub fn llroundf(arg1: f32) -> ::std::os::raw::c_longlong;
    }
    extern "C" {
        pub fn llround(arg1: f64) -> ::std::os::raw::c_longlong;
    }
    extern "C" {
        pub fn llroundl(arg1: f64) -> ::std::os::raw::c_longlong;
    }
    extern "C" {
        pub fn truncf(arg1: f32) -> f32;
    }
    extern "C" {
        pub fn trunc(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn truncl(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn fmodf(arg1: f32, arg2: f32) -> f32;
    }
    extern "C" {
        pub fn fmod(arg1: f64, arg2: f64) -> f64;
    }
    extern "C" {
        pub fn fmodl(arg1: f64, arg2: f64) -> f64;
    }
    extern "C" {
        pub fn remainderf(arg1: f32, arg2: f32) -> f32;
    }
    extern "C" {
        pub fn remainder(arg1: f64, arg2: f64) -> f64;
    }
    extern "C" {
        pub fn remainderl(arg1: f64, arg2: f64) -> f64;
    }
    extern "C" {
        pub fn remquof(arg1: f32, arg2: f32, arg3: *mut ::std::os::raw::c_int) -> f32;
    }
    extern "C" {
        pub fn remquo(arg1: f64, arg2: f64, arg3: *mut ::std::os::raw::c_int) -> f64;
    }
    extern "C" {
        pub fn remquol(arg1: f64, arg2: f64, arg3: *mut ::std::os::raw::c_int) -> f64;
    }
    extern "C" {
        pub fn copysignf(arg1: f32, arg2: f32) -> f32;
    }
    extern "C" {
        pub fn copysign(arg1: f64, arg2: f64) -> f64;
    }
    extern "C" {
        pub fn copysignl(arg1: f64, arg2: f64) -> f64;
    }
    extern "C" {
        pub fn nanf(arg1: *const ::std::os::raw::c_char) -> f32;
    }
    extern "C" {
        pub fn nan(arg1: *const ::std::os::raw::c_char) -> f64;
    }
    extern "C" {
        pub fn nanl(arg1: *const ::std::os::raw::c_char) -> f64;
    }
    extern "C" {
        pub fn nextafterf(arg1: f32, arg2: f32) -> f32;
    }
    extern "C" {
        pub fn nextafter(arg1: f64, arg2: f64) -> f64;
    }
    extern "C" {
        pub fn nextafterl(arg1: f64, arg2: f64) -> f64;
    }
    extern "C" {
        pub fn nexttoward(arg1: f64, arg2: f64) -> f64;
    }
    extern "C" {
        pub fn nexttowardf(arg1: f32, arg2: f64) -> f32;
    }
    extern "C" {
        pub fn nexttowardl(arg1: f64, arg2: f64) -> f64;
    }
    extern "C" {
        pub fn fdimf(arg1: f32, arg2: f32) -> f32;
    }
    extern "C" {
        pub fn fdim(arg1: f64, arg2: f64) -> f64;
    }
    extern "C" {
        pub fn fdiml(arg1: f64, arg2: f64) -> f64;
    }
    extern "C" {
        pub fn fmaxf(arg1: f32, arg2: f32) -> f32;
    }
    extern "C" {
        pub fn fmax(arg1: f64, arg2: f64) -> f64;
    }
    extern "C" {
        pub fn fmaxl(arg1: f64, arg2: f64) -> f64;
    }
    extern "C" {
        pub fn fminf(arg1: f32, arg2: f32) -> f32;
    }
    extern "C" {
        pub fn fmin(arg1: f64, arg2: f64) -> f64;
    }
    extern "C" {
        pub fn fminl(arg1: f64, arg2: f64) -> f64;
    }
    extern "C" {
        pub fn fmaf(arg1: f32, arg2: f32, arg3: f32) -> f32;
    }
    extern "C" {
        pub fn fma(arg1: f64, arg2: f64, arg3: f64) -> f64;
    }
    extern "C" {
        pub fn fmal(arg1: f64, arg2: f64, arg3: f64) -> f64;
    }
    extern "C" {
        pub fn __exp10f(arg1: f32) -> f32;
    }
    extern "C" {
        pub fn __exp10(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn __cospif(arg1: f32) -> f32;
    }
    extern "C" {
        pub fn __cospi(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn __sinpif(arg1: f32) -> f32;
    }
    extern "C" {
        pub fn __sinpi(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn __tanpif(arg1: f32) -> f32;
    }
    extern "C" {
        pub fn __tanpi(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn __fabsf16(arg1: root::__BindgenFloat16) -> root::__BindgenFloat16;
    }
    extern "C" {
        pub fn __hypotf16(
            arg1: root::__BindgenFloat16,
            arg2: root::__BindgenFloat16,
        ) -> root::__BindgenFloat16;
    }
    extern "C" {
        pub fn __sqrtf16(arg1: root::__BindgenFloat16) -> root::__BindgenFloat16;
    }
    extern "C" {
        pub fn __ceilf16(arg1: root::__BindgenFloat16) -> root::__BindgenFloat16;
    }
    extern "C" {
        pub fn __floorf16(arg1: root::__BindgenFloat16) -> root::__BindgenFloat16;
    }
    extern "C" {
        pub fn __rintf16(arg1: root::__BindgenFloat16) -> root::__BindgenFloat16;
    }
    extern "C" {
        pub fn __roundf16(arg1: root::__BindgenFloat16) -> root::__BindgenFloat16;
    }
    extern "C" {
        pub fn __truncf16(arg1: root::__BindgenFloat16) -> root::__BindgenFloat16;
    }
    extern "C" {
        pub fn __copysignf16(
            arg1: root::__BindgenFloat16,
            arg2: root::__BindgenFloat16,
        ) -> root::__BindgenFloat16;
    }
    extern "C" {
        pub fn __nextafterf16(
            arg1: root::__BindgenFloat16,
            arg2: root::__BindgenFloat16,
        ) -> root::__BindgenFloat16;
    }
    extern "C" {
        pub fn __fmaxf16(
            arg1: root::__BindgenFloat16,
            arg2: root::__BindgenFloat16,
        ) -> root::__BindgenFloat16;
    }
    extern "C" {
        pub fn __fminf16(
            arg1: root::__BindgenFloat16,
            arg2: root::__BindgenFloat16,
        ) -> root::__BindgenFloat16;
    }
    extern "C" {
        pub fn __fmaf16(
            arg1: root::__BindgenFloat16,
            arg2: root::__BindgenFloat16,
            arg3: root::__BindgenFloat16,
        ) -> root::__BindgenFloat16;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __float2 {
        pub __sinval: f32,
        pub __cosval: f32,
    }
    const _: () = {
        ["Size of __float2"][::std::mem::size_of::<__float2>() - 8usize];
        ["Alignment of __float2"][::std::mem::align_of::<__float2>() - 4usize];
        ["Offset of field: __float2::__sinval"]
            [::std::mem::offset_of!(__float2, __sinval) - 0usize];
        ["Offset of field: __float2::__cosval"]
            [::std::mem::offset_of!(__float2, __cosval) - 4usize];
    };
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __double2 {
        pub __sinval: f64,
        pub __cosval: f64,
    }
    const _: () = {
        ["Size of __double2"][::std::mem::size_of::<__double2>() - 16usize];
        ["Alignment of __double2"][::std::mem::align_of::<__double2>() - 8usize];
        ["Offset of field: __double2::__sinval"]
            [::std::mem::offset_of!(__double2, __sinval) - 0usize];
        ["Offset of field: __double2::__cosval"]
            [::std::mem::offset_of!(__double2, __cosval) - 8usize];
    };
    extern "C" {
        pub fn __sincosf_stret(arg1: f32) -> root::__float2;
    }
    extern "C" {
        pub fn __sincos_stret(arg1: f64) -> root::__double2;
    }
    extern "C" {
        pub fn __sincospif_stret(arg1: f32) -> root::__float2;
    }
    extern "C" {
        pub fn __sincospi_stret(arg1: f64) -> root::__double2;
    }
    extern "C" {
        pub fn j0(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn j1(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn jn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
    }
    extern "C" {
        pub fn y0(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn y1(arg1: f64) -> f64;
    }
    extern "C" {
        pub fn yn(arg1: ::std::os::raw::c_int, arg2: f64) -> f64;
    }
    extern "C" {
        pub fn scalb(arg1: f64, arg2: f64) -> f64;
    }
    extern "C" {
        pub static mut signgam: ::std::os::raw::c_int;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct sched_param {
        pub sched_priority: ::std::os::raw::c_int,
        pub __opaque: [::std::os::raw::c_char; 4usize],
    }
    const _: () = {
        ["Size of sched_param"][::std::mem::size_of::<sched_param>() - 8usize];
        ["Alignment of sched_param"][::std::mem::align_of::<sched_param>() - 4usize];
        ["Offset of field: sched_param::sched_priority"]
            [::std::mem::offset_of!(sched_param, sched_priority) - 0usize];
        ["Offset of field: sched_param::__opaque"]
            [::std::mem::offset_of!(sched_param, __opaque) - 4usize];
    };
    extern "C" {
        pub fn sched_yield() -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn sched_get_priority_min(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn sched_get_priority_max(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    pub type pthread_cond_t = root::__darwin_pthread_cond_t;
    pub type pthread_condattr_t = root::__darwin_pthread_condattr_t;
    pub type pthread_key_t = root::__darwin_pthread_key_t;
    pub type pthread_mutex_t = root::__darwin_pthread_mutex_t;
    pub type pthread_mutexattr_t = root::__darwin_pthread_mutexattr_t;
    pub type pthread_once_t = root::__darwin_pthread_once_t;
    pub type pthread_rwlock_t = root::__darwin_pthread_rwlock_t;
    pub type pthread_rwlockattr_t = root::__darwin_pthread_rwlockattr_t;
    pub type pthread_t = root::__darwin_pthread_t;
    pub const qos_class_t_QOS_CLASS_USER_INTERACTIVE: root::qos_class_t = 33;
    pub const qos_class_t_QOS_CLASS_USER_INITIATED: root::qos_class_t = 25;
    pub const qos_class_t_QOS_CLASS_DEFAULT: root::qos_class_t = 21;
    pub const qos_class_t_QOS_CLASS_UTILITY: root::qos_class_t = 17;
    pub const qos_class_t_QOS_CLASS_BACKGROUND: root::qos_class_t = 9;
    pub const qos_class_t_QOS_CLASS_UNSPECIFIED: root::qos_class_t = 0;
    pub type qos_class_t = ::std::os::raw::c_uint;
    extern "C" {
        pub fn qos_class_self() -> root::qos_class_t;
    }
    extern "C" {
        pub fn qos_class_main() -> root::qos_class_t;
    }
    extern "C" {
        pub fn pthread_attr_set_qos_class_np(
            __attr: *mut root::pthread_attr_t,
            __qos_class: root::qos_class_t,
            __relative_priority: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_attr_get_qos_class_np(
            __attr: *mut root::pthread_attr_t,
            __qos_class: *mut root::qos_class_t,
            __relative_priority: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_set_qos_class_self_np(
            __qos_class: root::qos_class_t,
            __relative_priority: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_get_qos_class_np(
            __pthread: root::pthread_t,
            __qos_class: *mut root::qos_class_t,
            __relative_priority: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct pthread_override_s {
        _unused: [u8; 0],
    }
    pub type pthread_override_t = *mut root::pthread_override_s;
    extern "C" {
        pub fn pthread_override_qos_class_start_np(
            __pthread: root::pthread_t,
            __qos_class: root::qos_class_t,
            __relative_priority: ::std::os::raw::c_int,
        ) -> root::pthread_override_t;
    }
    extern "C" {
        pub fn pthread_override_qos_class_end_np(
            __override: root::pthread_override_t,
        ) -> ::std::os::raw::c_int;
    }
    pub type mach_port_t = root::__darwin_mach_port_t;
    extern "C" {
        pub fn pthread_atfork(
            arg1: ::std::option::Option<unsafe extern "C" fn()>,
            arg2: ::std::option::Option<unsafe extern "C" fn()>,
            arg3: ::std::option::Option<unsafe extern "C" fn()>,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_attr_destroy(arg1: *mut root::pthread_attr_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_attr_getdetachstate(
            arg1: *const root::pthread_attr_t,
            arg2: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_attr_getguardsize(
            arg1: *const root::pthread_attr_t,
            arg2: *mut usize,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_attr_getinheritsched(
            arg1: *const root::pthread_attr_t,
            arg2: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_attr_getschedparam(
            arg1: *const root::pthread_attr_t,
            arg2: *mut root::sched_param,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_attr_getschedpolicy(
            arg1: *const root::pthread_attr_t,
            arg2: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_attr_getscope(
            arg1: *const root::pthread_attr_t,
            arg2: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_attr_getstack(
            arg1: *const root::pthread_attr_t,
            arg2: *mut *mut ::std::os::raw::c_void,
            arg3: *mut usize,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_attr_getstackaddr(
            arg1: *const root::pthread_attr_t,
            arg2: *mut *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_attr_getstacksize(
            arg1: *const root::pthread_attr_t,
            arg2: *mut usize,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_attr_init(arg1: *mut root::pthread_attr_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_attr_setdetachstate(
            arg1: *mut root::pthread_attr_t,
            arg2: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_attr_setguardsize(
            arg1: *mut root::pthread_attr_t,
            arg2: usize,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_attr_setinheritsched(
            arg1: *mut root::pthread_attr_t,
            arg2: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_attr_setschedparam(
            arg1: *mut root::pthread_attr_t,
            arg2: *const root::sched_param,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_attr_setschedpolicy(
            arg1: *mut root::pthread_attr_t,
            arg2: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_attr_setscope(
            arg1: *mut root::pthread_attr_t,
            arg2: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_attr_setstack(
            arg1: *mut root::pthread_attr_t,
            arg2: *mut ::std::os::raw::c_void,
            arg3: usize,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_attr_setstackaddr(
            arg1: *mut root::pthread_attr_t,
            arg2: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_attr_setstacksize(
            arg1: *mut root::pthread_attr_t,
            arg2: usize,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_cancel(arg1: root::pthread_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_cond_broadcast(arg1: *mut root::pthread_cond_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_cond_destroy(arg1: *mut root::pthread_cond_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_cond_init(
            arg1: *mut root::pthread_cond_t,
            arg2: *const root::pthread_condattr_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_cond_signal(arg1: *mut root::pthread_cond_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_cond_timedwait(
            arg1: *mut root::pthread_cond_t,
            arg2: *mut root::pthread_mutex_t,
            arg3: *const root::timespec,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_cond_wait(
            arg1: *mut root::pthread_cond_t,
            arg2: *mut root::pthread_mutex_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_condattr_destroy(
            arg1: *mut root::pthread_condattr_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_condattr_init(arg1: *mut root::pthread_condattr_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_condattr_getpshared(
            arg1: *const root::pthread_condattr_t,
            arg2: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_condattr_setpshared(
            arg1: *mut root::pthread_condattr_t,
            arg2: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_create(
            arg1: *mut root::pthread_t,
            arg2: *const root::pthread_attr_t,
            arg3: ::std::option::Option<
                unsafe extern "C" fn(
                    arg1: *mut ::std::os::raw::c_void,
                ) -> *mut ::std::os::raw::c_void,
            >,
            arg4: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_detach(arg1: root::pthread_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_equal(arg1: root::pthread_t, arg2: root::pthread_t)
            -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_exit(arg1: *mut ::std::os::raw::c_void) -> !;
    }
    extern "C" {
        pub fn pthread_getconcurrency() -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_getschedparam(
            arg1: root::pthread_t,
            arg2: *mut ::std::os::raw::c_int,
            arg3: *mut root::sched_param,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_getspecific(arg1: root::pthread_key_t) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn pthread_join(
            arg1: root::pthread_t,
            arg2: *mut *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_key_create(
            arg1: *mut root::pthread_key_t,
            arg2: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_key_delete(arg1: root::pthread_key_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_mutex_destroy(arg1: *mut root::pthread_mutex_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_mutex_getprioceiling(
            arg1: *const root::pthread_mutex_t,
            arg2: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_mutex_init(
            arg1: *mut root::pthread_mutex_t,
            arg2: *const root::pthread_mutexattr_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_mutex_lock(arg1: *mut root::pthread_mutex_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_mutex_setprioceiling(
            arg1: *mut root::pthread_mutex_t,
            arg2: ::std::os::raw::c_int,
            arg3: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_mutex_trylock(arg1: *mut root::pthread_mutex_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_mutex_unlock(arg1: *mut root::pthread_mutex_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_mutexattr_destroy(
            arg1: *mut root::pthread_mutexattr_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_mutexattr_getprioceiling(
            arg1: *const root::pthread_mutexattr_t,
            arg2: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_mutexattr_getprotocol(
            arg1: *const root::pthread_mutexattr_t,
            arg2: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_mutexattr_getpshared(
            arg1: *const root::pthread_mutexattr_t,
            arg2: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_mutexattr_gettype(
            arg1: *const root::pthread_mutexattr_t,
            arg2: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_mutexattr_getpolicy_np(
            arg1: *const root::pthread_mutexattr_t,
            arg2: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_mutexattr_init(
            arg1: *mut root::pthread_mutexattr_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_mutexattr_setprioceiling(
            arg1: *mut root::pthread_mutexattr_t,
            arg2: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_mutexattr_setprotocol(
            arg1: *mut root::pthread_mutexattr_t,
            arg2: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_mutexattr_setpshared(
            arg1: *mut root::pthread_mutexattr_t,
            arg2: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_mutexattr_settype(
            arg1: *mut root::pthread_mutexattr_t,
            arg2: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_mutexattr_setpolicy_np(
            arg1: *mut root::pthread_mutexattr_t,
            arg2: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_once(
            arg1: *mut root::pthread_once_t,
            arg2: ::std::option::Option<unsafe extern "C" fn()>,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_rwlock_destroy(arg1: *mut root::pthread_rwlock_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_rwlock_init(
            arg1: *mut root::pthread_rwlock_t,
            arg2: *const root::pthread_rwlockattr_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_rwlock_rdlock(arg1: *mut root::pthread_rwlock_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_rwlock_tryrdlock(arg1: *mut root::pthread_rwlock_t)
            -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_rwlock_trywrlock(arg1: *mut root::pthread_rwlock_t)
            -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_rwlock_wrlock(arg1: *mut root::pthread_rwlock_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_rwlock_unlock(arg1: *mut root::pthread_rwlock_t) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_rwlockattr_destroy(
            arg1: *mut root::pthread_rwlockattr_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_rwlockattr_getpshared(
            arg1: *const root::pthread_rwlockattr_t,
            arg2: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_rwlockattr_init(
            arg1: *mut root::pthread_rwlockattr_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_rwlockattr_setpshared(
            arg1: *mut root::pthread_rwlockattr_t,
            arg2: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_self() -> root::pthread_t;
    }
    extern "C" {
        pub fn pthread_setcancelstate(
            arg1: ::std::os::raw::c_int,
            arg2: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_setcanceltype(
            arg1: ::std::os::raw::c_int,
            arg2: *mut ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_setconcurrency(arg1: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_setschedparam(
            arg1: root::pthread_t,
            arg2: ::std::os::raw::c_int,
            arg3: *const root::sched_param,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_setspecific(
            arg1: root::pthread_key_t,
            arg2: *const ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_testcancel();
    }
    extern "C" {
        pub fn pthread_is_threaded_np() -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_threadid_np(
            arg1: root::pthread_t,
            arg2: *mut root::__uint64_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_getname_np(
            arg1: root::pthread_t,
            arg2: *mut ::std::os::raw::c_char,
            arg3: usize,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_setname_np(arg1: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_main_np() -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_mach_thread_np(arg1: root::pthread_t) -> root::mach_port_t;
    }
    extern "C" {
        pub fn pthread_get_stacksize_np(arg1: root::pthread_t) -> usize;
    }
    extern "C" {
        pub fn pthread_get_stackaddr_np(arg1: root::pthread_t) -> *mut ::std::os::raw::c_void;
    }
    extern "C" {
        pub fn pthread_cond_signal_thread_np(
            arg1: *mut root::pthread_cond_t,
            arg2: root::pthread_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_cond_timedwait_relative_np(
            arg1: *mut root::pthread_cond_t,
            arg2: *mut root::pthread_mutex_t,
            arg3: *const root::timespec,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_create_suspended_np(
            arg1: *mut root::pthread_t,
            arg2: *const root::pthread_attr_t,
            arg3: ::std::option::Option<
                unsafe extern "C" fn(
                    arg1: *mut ::std::os::raw::c_void,
                ) -> *mut ::std::os::raw::c_void,
            >,
            arg4: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_kill(
            arg1: root::pthread_t,
            arg2: ::std::os::raw::c_int,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_from_mach_thread_np(arg1: root::mach_port_t) -> root::pthread_t;
    }
    extern "C" {
        pub fn pthread_sigmask(
            arg1: ::std::os::raw::c_int,
            arg2: *const root::sigset_t,
            arg3: *mut root::sigset_t,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_yield_np();
    }
    extern "C" {
        pub fn pthread_jit_write_protect_np(enabled: ::std::os::raw::c_int);
    }
    extern "C" {
        pub fn pthread_jit_write_protect_supported_np() -> ::std::os::raw::c_int;
    }
    pub type pthread_jit_write_callback_t = ::std::option::Option<
        unsafe extern "C" fn(ctx: *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
    >;
    extern "C" {
        pub fn pthread_jit_write_with_callback_np(
            callback: root::pthread_jit_write_callback_t,
            ctx: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int;
    }
    extern "C" {
        pub fn pthread_jit_write_freeze_callbacks_np();
    }
    extern "C" {
        pub fn pthread_cpu_number_np(cpu_number_out: *mut usize) -> ::std::os::raw::c_int;
    }
    pub type __libcpp_timespec_t = root::timespec;
    pub mod swift {
        #[allow(unused_imports)]
        use self::super::super::root;
        pub mod impl_ {
            #[allow(unused_imports)]
            use self::super::super::super::root;
        }
        #[doc = " A simple wrapper for std::atomic that provides the most important\n interfaces and fixes the API bug where all of the orderings default\n to sequentially-consistent.\n\n It also sometimes uses a different implementation in cases where\n std::atomic has made unfortunate choices; our uses of this broadly\n don't have the ABI-compatibility issues that std::atomic faces."]
        #[repr(C)]
        #[derive(Debug, Copy, Clone)]
        pub struct atomic {
            pub _address: u8,
        }
    }
    pub type __builtin_va_list = *mut ::std::os::raw::c_char;
    pub type __uint128_t = u128;
    pub type type_ = ::std::os::raw::c_uint;
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _bindgen_ty_1 {
        pub _address: u8,
    }
    pub type rep = u64;
}
