/* automatically generated by rust-bindgen 0.69.4 */

#![allow(dead_code, non_snake_case, non_camel_case_types, non_upper_case_globals, improper_ctypes)]
pub type _Tp = ();

#[allow(non_snake_case, non_camel_case_types, non_upper_case_globals)]
pub mod root {
    #[allow(unused_imports)]
    use self::super::root;
    pub const _LIBCPP_ABI_VERSION: u32 = 1;
    pub const _LIBCPP_HARDENING_MODE_DEFAULT: u32 = 2;
    pub const _LIBCPP_VERSION: u32 = 180100;
    pub const _LIBCPP_STD_VER: u32 = 14;
    pub const _LIBCPP_OBJECT_FORMAT_MACHO: u32 = 1;
    pub const _LIBCPP_HARDENING_MODE_NONE: u32 = 2;
    pub const _LIBCPP_HARDENING_MODE_FAST: u32 = 4;
    pub const _LIBCPP_HARDENING_MODE_EXTENSIVE: u32 = 16;
    pub const _LIBCPP_HARDENING_MODE_DEBUG: u32 = 8;
    pub const _LIBCPP_HARDENING_MODE: u32 = 2;
    pub const _LIBCPP_LOCALE__L_EXTENSIONS: u32 = 1;
    pub const __PRI_8_LENGTH_MODIFIER__: &[u8; 3] = b"hh\0";
    pub const __PRI_64_LENGTH_MODIFIER__: &[u8; 3] = b"ll\0";
    pub const __SCN_64_LENGTH_MODIFIER__: &[u8; 3] = b"ll\0";
    pub const __PRI_MAX_LENGTH_MODIFIER__: &[u8; 2] = b"j\0";
    pub const __SCN_MAX_LENGTH_MODIFIER__: &[u8; 2] = b"j\0";
    pub const PRId8: &[u8; 4] = b"hhd\0";
    pub const PRIi8: &[u8; 4] = b"hhi\0";
    pub const PRIo8: &[u8; 4] = b"hho\0";
    pub const PRIu8: &[u8; 4] = b"hhu\0";
    pub const PRIx8: &[u8; 4] = b"hhx\0";
    pub const PRIX8: &[u8; 4] = b"hhX\0";
    pub const PRId16: &[u8; 3] = b"hd\0";
    pub const PRIi16: &[u8; 3] = b"hi\0";
    pub const PRIo16: &[u8; 3] = b"ho\0";
    pub const PRIu16: &[u8; 3] = b"hu\0";
    pub const PRIx16: &[u8; 3] = b"hx\0";
    pub const PRIX16: &[u8; 3] = b"hX\0";
    pub const PRId32: &[u8; 2] = b"d\0";
    pub const PRIi32: &[u8; 2] = b"i\0";
    pub const PRIo32: &[u8; 2] = b"o\0";
    pub const PRIu32: &[u8; 2] = b"u\0";
    pub const PRIx32: &[u8; 2] = b"x\0";
    pub const PRIX32: &[u8; 2] = b"X\0";
    pub const PRId64: &[u8; 4] = b"lld\0";
    pub const PRIi64: &[u8; 4] = b"lli\0";
    pub const PRIo64: &[u8; 4] = b"llo\0";
    pub const PRIu64: &[u8; 4] = b"llu\0";
    pub const PRIx64: &[u8; 4] = b"llx\0";
    pub const PRIX64: &[u8; 4] = b"llX\0";
    pub const PRIdLEAST8: &[u8; 4] = b"hhd\0";
    pub const PRIiLEAST8: &[u8; 4] = b"hhi\0";
    pub const PRIoLEAST8: &[u8; 4] = b"hho\0";
    pub const PRIuLEAST8: &[u8; 4] = b"hhu\0";
    pub const PRIxLEAST8: &[u8; 4] = b"hhx\0";
    pub const PRIXLEAST8: &[u8; 4] = b"hhX\0";
    pub const PRIdLEAST16: &[u8; 3] = b"hd\0";
    pub const PRIiLEAST16: &[u8; 3] = b"hi\0";
    pub const PRIoLEAST16: &[u8; 3] = b"ho\0";
    pub const PRIuLEAST16: &[u8; 3] = b"hu\0";
    pub const PRIxLEAST16: &[u8; 3] = b"hx\0";
    pub const PRIXLEAST16: &[u8; 3] = b"hX\0";
    pub const PRIdLEAST32: &[u8; 2] = b"d\0";
    pub const PRIiLEAST32: &[u8; 2] = b"i\0";
    pub const PRIoLEAST32: &[u8; 2] = b"o\0";
    pub const PRIuLEAST32: &[u8; 2] = b"u\0";
    pub const PRIxLEAST32: &[u8; 2] = b"x\0";
    pub const PRIXLEAST32: &[u8; 2] = b"X\0";
    pub const PRIdLEAST64: &[u8; 4] = b"lld\0";
    pub const PRIiLEAST64: &[u8; 4] = b"lli\0";
    pub const PRIoLEAST64: &[u8; 4] = b"llo\0";
    pub const PRIuLEAST64: &[u8; 4] = b"llu\0";
    pub const PRIxLEAST64: &[u8; 4] = b"llx\0";
    pub const PRIXLEAST64: &[u8; 4] = b"llX\0";
    pub const PRIdFAST8: &[u8; 4] = b"hhd\0";
    pub const PRIiFAST8: &[u8; 4] = b"hhi\0";
    pub const PRIoFAST8: &[u8; 4] = b"hho\0";
    pub const PRIuFAST8: &[u8; 4] = b"hhu\0";
    pub const PRIxFAST8: &[u8; 4] = b"hhx\0";
    pub const PRIXFAST8: &[u8; 4] = b"hhX\0";
    pub const PRIdFAST16: &[u8; 3] = b"hd\0";
    pub const PRIiFAST16: &[u8; 3] = b"hi\0";
    pub const PRIoFAST16: &[u8; 3] = b"ho\0";
    pub const PRIuFAST16: &[u8; 3] = b"hu\0";
    pub const PRIxFAST16: &[u8; 3] = b"hx\0";
    pub const PRIXFAST16: &[u8; 3] = b"hX\0";
    pub const PRIdFAST32: &[u8; 2] = b"d\0";
    pub const PRIiFAST32: &[u8; 2] = b"i\0";
    pub const PRIoFAST32: &[u8; 2] = b"o\0";
    pub const PRIuFAST32: &[u8; 2] = b"u\0";
    pub const PRIxFAST32: &[u8; 2] = b"x\0";
    pub const PRIXFAST32: &[u8; 2] = b"X\0";
    pub const PRIdFAST64: &[u8; 4] = b"lld\0";
    pub const PRIiFAST64: &[u8; 4] = b"lli\0";
    pub const PRIoFAST64: &[u8; 4] = b"llo\0";
    pub const PRIuFAST64: &[u8; 4] = b"llu\0";
    pub const PRIxFAST64: &[u8; 4] = b"llx\0";
    pub const PRIXFAST64: &[u8; 4] = b"llX\0";
    pub const PRIdPTR: &[u8; 3] = b"ld\0";
    pub const PRIiPTR: &[u8; 3] = b"li\0";
    pub const PRIoPTR: &[u8; 3] = b"lo\0";
    pub const PRIuPTR: &[u8; 3] = b"lu\0";
    pub const PRIxPTR: &[u8; 3] = b"lx\0";
    pub const PRIXPTR: &[u8; 3] = b"lX\0";
    pub const PRIdMAX: &[u8; 3] = b"jd\0";
    pub const PRIiMAX: &[u8; 3] = b"ji\0";
    pub const PRIoMAX: &[u8; 3] = b"jo\0";
    pub const PRIuMAX: &[u8; 3] = b"ju\0";
    pub const PRIxMAX: &[u8; 3] = b"jx\0";
    pub const PRIXMAX: &[u8; 3] = b"jX\0";
    pub const SCNd8: &[u8; 4] = b"hhd\0";
    pub const SCNi8: &[u8; 4] = b"hhi\0";
    pub const SCNo8: &[u8; 4] = b"hho\0";
    pub const SCNu8: &[u8; 4] = b"hhu\0";
    pub const SCNx8: &[u8; 4] = b"hhx\0";
    pub const SCNd16: &[u8; 3] = b"hd\0";
    pub const SCNi16: &[u8; 3] = b"hi\0";
    pub const SCNo16: &[u8; 3] = b"ho\0";
    pub const SCNu16: &[u8; 3] = b"hu\0";
    pub const SCNx16: &[u8; 3] = b"hx\0";
    pub const SCNd32: &[u8; 2] = b"d\0";
    pub const SCNi32: &[u8; 2] = b"i\0";
    pub const SCNo32: &[u8; 2] = b"o\0";
    pub const SCNu32: &[u8; 2] = b"u\0";
    pub const SCNx32: &[u8; 2] = b"x\0";
    pub const SCNd64: &[u8; 4] = b"lld\0";
    pub const SCNi64: &[u8; 4] = b"lli\0";
    pub const SCNo64: &[u8; 4] = b"llo\0";
    pub const SCNu64: &[u8; 4] = b"llu\0";
    pub const SCNx64: &[u8; 4] = b"llx\0";
    pub const SCNdLEAST8: &[u8; 4] = b"hhd\0";
    pub const SCNiLEAST8: &[u8; 4] = b"hhi\0";
    pub const SCNoLEAST8: &[u8; 4] = b"hho\0";
    pub const SCNuLEAST8: &[u8; 4] = b"hhu\0";
    pub const SCNxLEAST8: &[u8; 4] = b"hhx\0";
    pub const SCNdLEAST16: &[u8; 3] = b"hd\0";
    pub const SCNiLEAST16: &[u8; 3] = b"hi\0";
    pub const SCNoLEAST16: &[u8; 3] = b"ho\0";
    pub const SCNuLEAST16: &[u8; 3] = b"hu\0";
    pub const SCNxLEAST16: &[u8; 3] = b"hx\0";
    pub const SCNdLEAST32: &[u8; 2] = b"d\0";
    pub const SCNiLEAST32: &[u8; 2] = b"i\0";
    pub const SCNoLEAST32: &[u8; 2] = b"o\0";
    pub const SCNuLEAST32: &[u8; 2] = b"u\0";
    pub const SCNxLEAST32: &[u8; 2] = b"x\0";
    pub const SCNdLEAST64: &[u8; 4] = b"lld\0";
    pub const SCNiLEAST64: &[u8; 4] = b"lli\0";
    pub const SCNoLEAST64: &[u8; 4] = b"llo\0";
    pub const SCNuLEAST64: &[u8; 4] = b"llu\0";
    pub const SCNxLEAST64: &[u8; 4] = b"llx\0";
    pub const SCNdFAST8: &[u8; 4] = b"hhd\0";
    pub const SCNiFAST8: &[u8; 4] = b"hhi\0";
    pub const SCNoFAST8: &[u8; 4] = b"hho\0";
    pub const SCNuFAST8: &[u8; 4] = b"hhu\0";
    pub const SCNxFAST8: &[u8; 4] = b"hhx\0";
    pub const SCNdFAST16: &[u8; 3] = b"hd\0";
    pub const SCNiFAST16: &[u8; 3] = b"hi\0";
    pub const SCNoFAST16: &[u8; 3] = b"ho\0";
    pub const SCNuFAST16: &[u8; 3] = b"hu\0";
    pub const SCNxFAST16: &[u8; 3] = b"hx\0";
    pub const SCNdFAST32: &[u8; 2] = b"d\0";
    pub const SCNiFAST32: &[u8; 2] = b"i\0";
    pub const SCNoFAST32: &[u8; 2] = b"o\0";
    pub const SCNuFAST32: &[u8; 2] = b"u\0";
    pub const SCNxFAST32: &[u8; 2] = b"x\0";
    pub const SCNdFAST64: &[u8; 4] = b"lld\0";
    pub const SCNiFAST64: &[u8; 4] = b"lli\0";
    pub const SCNoFAST64: &[u8; 4] = b"llo\0";
    pub const SCNuFAST64: &[u8; 4] = b"llu\0";
    pub const SCNxFAST64: &[u8; 4] = b"llx\0";
    pub const SCNdPTR: &[u8; 3] = b"ld\0";
    pub const SCNiPTR: &[u8; 3] = b"li\0";
    pub const SCNoPTR: &[u8; 3] = b"lo\0";
    pub const SCNuPTR: &[u8; 3] = b"lu\0";
    pub const SCNxPTR: &[u8; 3] = b"lx\0";
    pub const SCNdMAX: &[u8; 3] = b"jd\0";
    pub const SCNiMAX: &[u8; 3] = b"ji\0";
    pub const SCNoMAX: &[u8; 3] = b"jo\0";
    pub const SCNuMAX: &[u8; 3] = b"ju\0";
    pub const SCNxMAX: &[u8; 3] = b"jx\0";
    pub const __has_safe_buffers: u32 = 1;
    pub const __DARWIN_ONLY_64_BIT_INO_T: u32 = 1;
    pub const __DARWIN_ONLY_UNIX_CONFORMANCE: u32 = 1;
    pub const __DARWIN_ONLY_VERS_1050: u32 = 1;
    pub const __DARWIN_UNIX03: u32 = 1;
    pub const __DARWIN_64_BIT_INO_T: u32 = 1;
    pub const __DARWIN_VERS_1050: u32 = 1;
    pub const __DARWIN_NON_CANCELABLE: u32 = 0;
    pub const __DARWIN_SUF_EXTSN: &[u8; 14] = b"$DARWIN_EXTSN\0";
    pub const __DARWIN_C_ANSI: u32 = 4096;
    pub const __DARWIN_C_FULL: u32 = 900000;
    pub const __DARWIN_C_LEVEL: u32 = 900000;
    pub const __DARWIN_NO_LONG_LONG: u32 = 0;
    pub const _DARWIN_FEATURE_64_BIT_INODE: u32 = 1;
    pub const _DARWIN_FEATURE_ONLY_64_BIT_INODE: u32 = 1;
    pub const _DARWIN_FEATURE_ONLY_VERS_1050: u32 = 1;
    pub const _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE: u32 = 1;
    pub const _DARWIN_FEATURE_UNIX_CONFORMANCE: u32 = 3;
    pub const __has_ptrcheck: u32 = 0;
    pub const __API_TO_BE_DEPRECATED: u32 = 100000;
    pub const __API_TO_BE_DEPRECATED_MACOS: u32 = 100000;
    pub const __API_TO_BE_DEPRECATED_IOS: u32 = 100000;
    pub const __API_TO_BE_DEPRECATED_MACCATALYST: u32 = 100000;
    pub const __API_TO_BE_DEPRECATED_WATCHOS: u32 = 100000;
    pub const __API_TO_BE_DEPRECATED_TVOS: u32 = 100000;
    pub const __API_TO_BE_DEPRECATED_DRIVERKIT: u32 = 100000;
    pub const __API_TO_BE_DEPRECATED_VISIONOS: u32 = 100000;
    pub const __MAC_10_0: u32 = 1000;
    pub const __MAC_10_1: u32 = 1010;
    pub const __MAC_10_2: u32 = 1020;
    pub const __MAC_10_3: u32 = 1030;
    pub const __MAC_10_4: u32 = 1040;
    pub const __MAC_10_5: u32 = 1050;
    pub const __MAC_10_6: u32 = 1060;
    pub const __MAC_10_7: u32 = 1070;
    pub const __MAC_10_8: u32 = 1080;
    pub const __MAC_10_9: u32 = 1090;
    pub const __MAC_10_10: u32 = 101000;
    pub const __MAC_10_10_2: u32 = 101002;
    pub const __MAC_10_10_3: u32 = 101003;
    pub const __MAC_10_11: u32 = 101100;
    pub const __MAC_10_11_2: u32 = 101102;
    pub const __MAC_10_11_3: u32 = 101103;
    pub const __MAC_10_11_4: u32 = 101104;
    pub const __MAC_10_12: u32 = 101200;
    pub const __MAC_10_12_1: u32 = 101201;
    pub const __MAC_10_12_2: u32 = 101202;
    pub const __MAC_10_12_4: u32 = 101204;
    pub const __MAC_10_13: u32 = 101300;
    pub const __MAC_10_13_1: u32 = 101301;
    pub const __MAC_10_13_2: u32 = 101302;
    pub const __MAC_10_13_4: u32 = 101304;
    pub const __MAC_10_14: u32 = 101400;
    pub const __MAC_10_14_1: u32 = 101401;
    pub const __MAC_10_14_4: u32 = 101404;
    pub const __MAC_10_14_5: u32 = 101405;
    pub const __MAC_10_14_6: u32 = 101406;
    pub const __MAC_10_15: u32 = 101500;
    pub const __MAC_10_15_1: u32 = 101501;
    pub const __MAC_10_15_4: u32 = 101504;
    pub const __MAC_10_16: u32 = 101600;
    pub const __MAC_11_0: u32 = 110000;
    pub const __MAC_11_1: u32 = 110100;
    pub const __MAC_11_3: u32 = 110300;
    pub const __MAC_11_4: u32 = 110400;
    pub const __MAC_11_5: u32 = 110500;
    pub const __MAC_11_6: u32 = 110600;
    pub const __MAC_12_0: u32 = 120000;
    pub const __MAC_12_1: u32 = 120100;
    pub const __MAC_12_2: u32 = 120200;
    pub const __MAC_12_3: u32 = 120300;
    pub const __MAC_12_4: u32 = 120400;
    pub const __MAC_12_5: u32 = 120500;
    pub const __MAC_12_6: u32 = 120600;
    pub const __MAC_12_7: u32 = 120700;
    pub const __MAC_13_0: u32 = 130000;
    pub const __MAC_13_1: u32 = 130100;
    pub const __MAC_13_2: u32 = 130200;
    pub const __MAC_13_3: u32 = 130300;
    pub const __MAC_13_4: u32 = 130400;
    pub const __MAC_13_5: u32 = 130500;
    pub const __MAC_13_6: u32 = 130600;
    pub const __MAC_14_0: u32 = 140000;
    pub const __MAC_14_1: u32 = 140100;
    pub const __MAC_14_2: u32 = 140200;
    pub const __MAC_14_3: u32 = 140300;
    pub const __MAC_14_4: u32 = 140400;
    pub const __MAC_14_5: u32 = 140500;
    pub const __MAC_15_0: u32 = 150000;
    pub const __IPHONE_2_0: u32 = 20000;
    pub const __IPHONE_2_1: u32 = 20100;
    pub const __IPHONE_2_2: u32 = 20200;
    pub const __IPHONE_3_0: u32 = 30000;
    pub const __IPHONE_3_1: u32 = 30100;
    pub const __IPHONE_3_2: u32 = 30200;
    pub const __IPHONE_4_0: u32 = 40000;
    pub const __IPHONE_4_1: u32 = 40100;
    pub const __IPHONE_4_2: u32 = 40200;
    pub const __IPHONE_4_3: u32 = 40300;
    pub const __IPHONE_5_0: u32 = 50000;
    pub const __IPHONE_5_1: u32 = 50100;
    pub const __IPHONE_6_0: u32 = 60000;
    pub const __IPHONE_6_1: u32 = 60100;
    pub const __IPHONE_7_0: u32 = 70000;
    pub const __IPHONE_7_1: u32 = 70100;
    pub const __IPHONE_8_0: u32 = 80000;
    pub const __IPHONE_8_1: u32 = 80100;
    pub const __IPHONE_8_2: u32 = 80200;
    pub const __IPHONE_8_3: u32 = 80300;
    pub const __IPHONE_8_4: u32 = 80400;
    pub const __IPHONE_9_0: u32 = 90000;
    pub const __IPHONE_9_1: u32 = 90100;
    pub const __IPHONE_9_2: u32 = 90200;
    pub const __IPHONE_9_3: u32 = 90300;
    pub const __IPHONE_10_0: u32 = 100000;
    pub const __IPHONE_10_1: u32 = 100100;
    pub const __IPHONE_10_2: u32 = 100200;
    pub const __IPHONE_10_3: u32 = 100300;
    pub const __IPHONE_11_0: u32 = 110000;
    pub const __IPHONE_11_1: u32 = 110100;
    pub const __IPHONE_11_2: u32 = 110200;
    pub const __IPHONE_11_3: u32 = 110300;
    pub const __IPHONE_11_4: u32 = 110400;
    pub const __IPHONE_12_0: u32 = 120000;
    pub const __IPHONE_12_1: u32 = 120100;
    pub const __IPHONE_12_2: u32 = 120200;
    pub const __IPHONE_12_3: u32 = 120300;
    pub const __IPHONE_12_4: u32 = 120400;
    pub const __IPHONE_13_0: u32 = 130000;
    pub const __IPHONE_13_1: u32 = 130100;
    pub const __IPHONE_13_2: u32 = 130200;
    pub const __IPHONE_13_3: u32 = 130300;
    pub const __IPHONE_13_4: u32 = 130400;
    pub const __IPHONE_13_5: u32 = 130500;
    pub const __IPHONE_13_6: u32 = 130600;
    pub const __IPHONE_13_7: u32 = 130700;
    pub const __IPHONE_14_0: u32 = 140000;
    pub const __IPHONE_14_1: u32 = 140100;
    pub const __IPHONE_14_2: u32 = 140200;
    pub const __IPHONE_14_3: u32 = 140300;
    pub const __IPHONE_14_5: u32 = 140500;
    pub const __IPHONE_14_4: u32 = 140400;
    pub const __IPHONE_14_6: u32 = 140600;
    pub const __IPHONE_14_7: u32 = 140700;
    pub const __IPHONE_14_8: u32 = 140800;
    pub const __IPHONE_15_0: u32 = 150000;
    pub const __IPHONE_15_1: u32 = 150100;
    pub const __IPHONE_15_2: u32 = 150200;
    pub const __IPHONE_15_3: u32 = 150300;
    pub const __IPHONE_15_4: u32 = 150400;
    pub const __IPHONE_15_5: u32 = 150500;
    pub const __IPHONE_15_6: u32 = 150600;
    pub const __IPHONE_15_7: u32 = 150700;
    pub const __IPHONE_15_8: u32 = 150800;
    pub const __IPHONE_16_0: u32 = 160000;
    pub const __IPHONE_16_1: u32 = 160100;
    pub const __IPHONE_16_2: u32 = 160200;
    pub const __IPHONE_16_3: u32 = 160300;
    pub const __IPHONE_16_4: u32 = 160400;
    pub const __IPHONE_16_5: u32 = 160500;
    pub const __IPHONE_16_6: u32 = 160600;
    pub const __IPHONE_16_7: u32 = 160700;
    pub const __IPHONE_17_0: u32 = 170000;
    pub const __IPHONE_17_1: u32 = 170100;
    pub const __IPHONE_17_2: u32 = 170200;
    pub const __IPHONE_17_3: u32 = 170300;
    pub const __IPHONE_17_4: u32 = 170400;
    pub const __IPHONE_17_5: u32 = 170500;
    pub const __IPHONE_18_0: u32 = 180000;
    pub const __WATCHOS_1_0: u32 = 10000;
    pub const __WATCHOS_2_0: u32 = 20000;
    pub const __WATCHOS_2_1: u32 = 20100;
    pub const __WATCHOS_2_2: u32 = 20200;
    pub const __WATCHOS_3_0: u32 = 30000;
    pub const __WATCHOS_3_1: u32 = 30100;
    pub const __WATCHOS_3_1_1: u32 = 30101;
    pub const __WATCHOS_3_2: u32 = 30200;
    pub const __WATCHOS_4_0: u32 = 40000;
    pub const __WATCHOS_4_1: u32 = 40100;
    pub const __WATCHOS_4_2: u32 = 40200;
    pub const __WATCHOS_4_3: u32 = 40300;
    pub const __WATCHOS_5_0: u32 = 50000;
    pub const __WATCHOS_5_1: u32 = 50100;
    pub const __WATCHOS_5_2: u32 = 50200;
    pub const __WATCHOS_5_3: u32 = 50300;
    pub const __WATCHOS_6_0: u32 = 60000;
    pub const __WATCHOS_6_1: u32 = 60100;
    pub const __WATCHOS_6_2: u32 = 60200;
    pub const __WATCHOS_7_0: u32 = 70000;
    pub const __WATCHOS_7_1: u32 = 70100;
    pub const __WATCHOS_7_2: u32 = 70200;
    pub const __WATCHOS_7_3: u32 = 70300;
    pub const __WATCHOS_7_4: u32 = 70400;
    pub const __WATCHOS_7_5: u32 = 70500;
    pub const __WATCHOS_7_6: u32 = 70600;
    pub const __WATCHOS_8_0: u32 = 80000;
    pub const __WATCHOS_8_1: u32 = 80100;
    pub const __WATCHOS_8_3: u32 = 80300;
    pub const __WATCHOS_8_4: u32 = 80400;
    pub const __WATCHOS_8_5: u32 = 80500;
    pub const __WATCHOS_8_6: u32 = 80600;
    pub const __WATCHOS_8_7: u32 = 80700;
    pub const __WATCHOS_8_8: u32 = 80800;
    pub const __WATCHOS_9_0: u32 = 90000;
    pub const __WATCHOS_9_1: u32 = 90100;
    pub const __WATCHOS_9_2: u32 = 90200;
    pub const __WATCHOS_9_3: u32 = 90300;
    pub const __WATCHOS_9_4: u32 = 90400;
    pub const __WATCHOS_9_5: u32 = 90500;
    pub const __WATCHOS_9_6: u32 = 90600;
    pub const __WATCHOS_10_0: u32 = 100000;
    pub const __WATCHOS_10_1: u32 = 100100;
    pub const __WATCHOS_10_2: u32 = 100200;
    pub const __WATCHOS_10_3: u32 = 100300;
    pub const __WATCHOS_10_4: u32 = 100400;
    pub const __WATCHOS_10_5: u32 = 100500;
    pub const __WATCHOS_11_0: u32 = 110000;
    pub const __TVOS_9_0: u32 = 90000;
    pub const __TVOS_9_1: u32 = 90100;
    pub const __TVOS_9_2: u32 = 90200;
    pub const __TVOS_10_0: u32 = 100000;
    pub const __TVOS_10_0_1: u32 = 100001;
    pub const __TVOS_10_1: u32 = 100100;
    pub const __TVOS_10_2: u32 = 100200;
    pub const __TVOS_11_0: u32 = 110000;
    pub const __TVOS_11_1: u32 = 110100;
    pub const __TVOS_11_2: u32 = 110200;
    pub const __TVOS_11_3: u32 = 110300;
    pub const __TVOS_11_4: u32 = 110400;
    pub const __TVOS_12_0: u32 = 120000;
    pub const __TVOS_12_1: u32 = 120100;
    pub const __TVOS_12_2: u32 = 120200;
    pub const __TVOS_12_3: u32 = 120300;
    pub const __TVOS_12_4: u32 = 120400;
    pub const __TVOS_13_0: u32 = 130000;
    pub const __TVOS_13_2: u32 = 130200;
    pub const __TVOS_13_3: u32 = 130300;
    pub const __TVOS_13_4: u32 = 130400;
    pub const __TVOS_14_0: u32 = 140000;
    pub const __TVOS_14_1: u32 = 140100;
    pub const __TVOS_14_2: u32 = 140200;
    pub const __TVOS_14_3: u32 = 140300;
    pub const __TVOS_14_5: u32 = 140500;
    pub const __TVOS_14_6: u32 = 140600;
    pub const __TVOS_14_7: u32 = 140700;
    pub const __TVOS_15_0: u32 = 150000;
    pub const __TVOS_15_1: u32 = 150100;
    pub const __TVOS_15_2: u32 = 150200;
    pub const __TVOS_15_3: u32 = 150300;
    pub const __TVOS_15_4: u32 = 150400;
    pub const __TVOS_15_5: u32 = 150500;
    pub const __TVOS_15_6: u32 = 150600;
    pub const __TVOS_16_0: u32 = 160000;
    pub const __TVOS_16_1: u32 = 160100;
    pub const __TVOS_16_2: u32 = 160200;
    pub const __TVOS_16_3: u32 = 160300;
    pub const __TVOS_16_4: u32 = 160400;
    pub const __TVOS_16_5: u32 = 160500;
    pub const __TVOS_16_6: u32 = 160600;
    pub const __TVOS_17_0: u32 = 170000;
    pub const __TVOS_17_1: u32 = 170100;
    pub const __TVOS_17_2: u32 = 170200;
    pub const __TVOS_17_3: u32 = 170300;
    pub const __TVOS_17_4: u32 = 170400;
    pub const __TVOS_17_5: u32 = 170500;
    pub const __TVOS_18_0: u32 = 180000;
    pub const __BRIDGEOS_2_0: u32 = 20000;
    pub const __BRIDGEOS_3_0: u32 = 30000;
    pub const __BRIDGEOS_3_1: u32 = 30100;
    pub const __BRIDGEOS_3_4: u32 = 30400;
    pub const __BRIDGEOS_4_0: u32 = 40000;
    pub const __BRIDGEOS_4_1: u32 = 40100;
    pub const __BRIDGEOS_5_0: u32 = 50000;
    pub const __BRIDGEOS_5_1: u32 = 50100;
    pub const __BRIDGEOS_5_3: u32 = 50300;
    pub const __BRIDGEOS_6_0: u32 = 60000;
    pub const __BRIDGEOS_6_2: u32 = 60200;
    pub const __BRIDGEOS_6_4: u32 = 60400;
    pub const __BRIDGEOS_6_5: u32 = 60500;
    pub const __BRIDGEOS_6_6: u32 = 60600;
    pub const __BRIDGEOS_7_0: u32 = 70000;
    pub const __BRIDGEOS_7_1: u32 = 70100;
    pub const __BRIDGEOS_7_2: u32 = 70200;
    pub const __BRIDGEOS_7_3: u32 = 70300;
    pub const __BRIDGEOS_7_4: u32 = 70400;
    pub const __BRIDGEOS_7_6: u32 = 70600;
    pub const __BRIDGEOS_8_0: u32 = 80000;
    pub const __BRIDGEOS_8_1: u32 = 80100;
    pub const __BRIDGEOS_8_2: u32 = 80200;
    pub const __BRIDGEOS_8_3: u32 = 80300;
    pub const __BRIDGEOS_8_4: u32 = 80400;
    pub const __BRIDGEOS_8_5: u32 = 80500;
    pub const __BRIDGEOS_9_0: u32 = 90000;
    pub const __DRIVERKIT_19_0: u32 = 190000;
    pub const __DRIVERKIT_20_0: u32 = 200000;
    pub const __DRIVERKIT_21_0: u32 = 210000;
    pub const __DRIVERKIT_22_0: u32 = 220000;
    pub const __DRIVERKIT_22_4: u32 = 220400;
    pub const __DRIVERKIT_22_5: u32 = 220500;
    pub const __DRIVERKIT_22_6: u32 = 220600;
    pub const __DRIVERKIT_23_0: u32 = 230000;
    pub const __DRIVERKIT_23_1: u32 = 230100;
    pub const __DRIVERKIT_23_2: u32 = 230200;
    pub const __DRIVERKIT_23_3: u32 = 230300;
    pub const __DRIVERKIT_23_4: u32 = 230400;
    pub const __DRIVERKIT_23_5: u32 = 230500;
    pub const __DRIVERKIT_24_0: u32 = 240000;
    pub const __VISIONOS_1_0: u32 = 10000;
    pub const __VISIONOS_1_1: u32 = 10100;
    pub const __VISIONOS_1_2: u32 = 10200;
    pub const __VISIONOS_2_0: u32 = 20000;
    pub const MAC_OS_X_VERSION_10_0: u32 = 1000;
    pub const MAC_OS_X_VERSION_10_1: u32 = 1010;
    pub const MAC_OS_X_VERSION_10_2: u32 = 1020;
    pub const MAC_OS_X_VERSION_10_3: u32 = 1030;
    pub const MAC_OS_X_VERSION_10_4: u32 = 1040;
    pub const MAC_OS_X_VERSION_10_5: u32 = 1050;
    pub const MAC_OS_X_VERSION_10_6: u32 = 1060;
    pub const MAC_OS_X_VERSION_10_7: u32 = 1070;
    pub const MAC_OS_X_VERSION_10_8: u32 = 1080;
    pub const MAC_OS_X_VERSION_10_9: u32 = 1090;
    pub const MAC_OS_X_VERSION_10_10: u32 = 101000;
    pub const MAC_OS_X_VERSION_10_10_2: u32 = 101002;
    pub const MAC_OS_X_VERSION_10_10_3: u32 = 101003;
    pub const MAC_OS_X_VERSION_10_11: u32 = 101100;
    pub const MAC_OS_X_VERSION_10_11_2: u32 = 101102;
    pub const MAC_OS_X_VERSION_10_11_3: u32 = 101103;
    pub const MAC_OS_X_VERSION_10_11_4: u32 = 101104;
    pub const MAC_OS_X_VERSION_10_12: u32 = 101200;
    pub const MAC_OS_X_VERSION_10_12_1: u32 = 101201;
    pub const MAC_OS_X_VERSION_10_12_2: u32 = 101202;
    pub const MAC_OS_X_VERSION_10_12_4: u32 = 101204;
    pub const MAC_OS_X_VERSION_10_13: u32 = 101300;
    pub const MAC_OS_X_VERSION_10_13_1: u32 = 101301;
    pub const MAC_OS_X_VERSION_10_13_2: u32 = 101302;
    pub const MAC_OS_X_VERSION_10_13_4: u32 = 101304;
    pub const MAC_OS_X_VERSION_10_14: u32 = 101400;
    pub const MAC_OS_X_VERSION_10_14_1: u32 = 101401;
    pub const MAC_OS_X_VERSION_10_14_4: u32 = 101404;
    pub const MAC_OS_X_VERSION_10_14_5: u32 = 101405;
    pub const MAC_OS_X_VERSION_10_14_6: u32 = 101406;
    pub const MAC_OS_X_VERSION_10_15: u32 = 101500;
    pub const MAC_OS_X_VERSION_10_15_1: u32 = 101501;
    pub const MAC_OS_X_VERSION_10_15_4: u32 = 101504;
    pub const MAC_OS_X_VERSION_10_16: u32 = 101600;
    pub const MAC_OS_VERSION_11_0: u32 = 110000;
    pub const MAC_OS_VERSION_11_1: u32 = 110100;
    pub const MAC_OS_VERSION_11_3: u32 = 110300;
    pub const MAC_OS_VERSION_11_4: u32 = 110400;
    pub const MAC_OS_VERSION_11_5: u32 = 110500;
    pub const MAC_OS_VERSION_11_6: u32 = 110600;
    pub const MAC_OS_VERSION_12_0: u32 = 120000;
    pub const MAC_OS_VERSION_12_1: u32 = 120100;
    pub const MAC_OS_VERSION_12_2: u32 = 120200;
    pub const MAC_OS_VERSION_12_3: u32 = 120300;
    pub const MAC_OS_VERSION_12_4: u32 = 120400;
    pub const MAC_OS_VERSION_12_5: u32 = 120500;
    pub const MAC_OS_VERSION_12_6: u32 = 120600;
    pub const MAC_OS_VERSION_12_7: u32 = 120700;
    pub const MAC_OS_VERSION_13_0: u32 = 130000;
    pub const MAC_OS_VERSION_13_1: u32 = 130100;
    pub const MAC_OS_VERSION_13_2: u32 = 130200;
    pub const MAC_OS_VERSION_13_3: u32 = 130300;
    pub const MAC_OS_VERSION_13_4: u32 = 130400;
    pub const MAC_OS_VERSION_13_5: u32 = 130500;
    pub const MAC_OS_VERSION_13_6: u32 = 130600;
    pub const MAC_OS_VERSION_14_0: u32 = 140000;
    pub const MAC_OS_VERSION_14_1: u32 = 140100;
    pub const MAC_OS_VERSION_14_2: u32 = 140200;
    pub const MAC_OS_VERSION_14_3: u32 = 140300;
    pub const MAC_OS_VERSION_14_4: u32 = 140400;
    pub const MAC_OS_VERSION_14_5: u32 = 140500;
    pub const MAC_OS_VERSION_15_0: u32 = 150000;
    pub const __MAC_OS_X_VERSION_MAX_ALLOWED: u32 = 150000;
    pub const __ENABLE_LEGACY_MAC_AVAILABILITY: u32 = 1;
    pub const USE_CLANG_TYPES: u32 = 0;
    pub const __PTHREAD_SIZE__: u32 = 8176;
    pub const __PTHREAD_ATTR_SIZE__: u32 = 56;
    pub const __PTHREAD_MUTEXATTR_SIZE__: u32 = 8;
    pub const __PTHREAD_MUTEX_SIZE__: u32 = 56;
    pub const __PTHREAD_CONDATTR_SIZE__: u32 = 8;
    pub const __PTHREAD_COND_SIZE__: u32 = 40;
    pub const __PTHREAD_ONCE_SIZE__: u32 = 8;
    pub const __PTHREAD_RWLOCK_SIZE__: u32 = 192;
    pub const __PTHREAD_RWLOCKATTR_SIZE__: u32 = 16;
    pub const __DARWIN_WCHAR_MIN: i32 = -2147483648;
    pub const _FORTIFY_SOURCE: u32 = 2;
    pub const USE_CLANG_STDDEF: u32 = 0;
    pub const __WORDSIZE: u32 = 64;
    pub const INT8_MAX: u32 = 127;
    pub const INT16_MAX: u32 = 32767;
    pub const INT32_MAX: u32 = 2147483647;
    pub const INT64_MAX: u64 = 9223372036854775807;
    pub const INT8_MIN: i32 = -128;
    pub const INT16_MIN: i32 = -32768;
    pub const INT32_MIN: i32 = -2147483648;
    pub const INT64_MIN: i64 = -9223372036854775808;
    pub const UINT8_MAX: u32 = 255;
    pub const UINT16_MAX: u32 = 65535;
    pub const UINT32_MAX: u32 = 4294967295;
    pub const UINT64_MAX: i32 = -1;
    pub const INT_LEAST8_MIN: i32 = -128;
    pub const INT_LEAST16_MIN: i32 = -32768;
    pub const INT_LEAST32_MIN: i32 = -2147483648;
    pub const INT_LEAST64_MIN: i64 = -9223372036854775808;
    pub const INT_LEAST8_MAX: u32 = 127;
    pub const INT_LEAST16_MAX: u32 = 32767;
    pub const INT_LEAST32_MAX: u32 = 2147483647;
    pub const INT_LEAST64_MAX: u64 = 9223372036854775807;
    pub const UINT_LEAST8_MAX: u32 = 255;
    pub const UINT_LEAST16_MAX: u32 = 65535;
    pub const UINT_LEAST32_MAX: u32 = 4294967295;
    pub const UINT_LEAST64_MAX: i32 = -1;
    pub const INT_FAST8_MIN: i32 = -128;
    pub const INT_FAST16_MIN: i32 = -32768;
    pub const INT_FAST32_MIN: i32 = -2147483648;
    pub const INT_FAST64_MIN: i64 = -9223372036854775808;
    pub const INT_FAST8_MAX: u32 = 127;
    pub const INT_FAST16_MAX: u32 = 32767;
    pub const INT_FAST32_MAX: u32 = 2147483647;
    pub const INT_FAST64_MAX: u64 = 9223372036854775807;
    pub const UINT_FAST8_MAX: u32 = 255;
    pub const UINT_FAST16_MAX: u32 = 65535;
    pub const UINT_FAST32_MAX: u32 = 4294967295;
    pub const UINT_FAST64_MAX: i32 = -1;
    pub const INTPTR_MAX: u64 = 9223372036854775807;
    pub const INTPTR_MIN: i64 = -9223372036854775808;
    pub const UINTPTR_MAX: i32 = -1;
    pub const SIZE_MAX: i32 = -1;
    pub const WINT_MIN: i32 = -2147483648;
    pub const WINT_MAX: u32 = 2147483647;
    pub const SIG_ATOMIC_MIN: i32 = -2147483648;
    pub const SIG_ATOMIC_MAX: u32 = 2147483647;
    pub type __int8_t = ::std::os::raw::c_schar;
    pub type __uint8_t = ::std::os::raw::c_uchar;
    pub type __int16_t = ::std::os::raw::c_short;
    pub type __uint16_t = ::std::os::raw::c_ushort;
    pub type __int32_t = ::std::os::raw::c_int;
    pub type __uint32_t = ::std::os::raw::c_uint;
    pub type __int64_t = ::std::os::raw::c_longlong;
    pub type __uint64_t = ::std::os::raw::c_ulonglong;
    pub type __darwin_intptr_t = ::std::os::raw::c_long;
    pub type __darwin_natural_t = ::std::os::raw::c_uint;
    pub type __darwin_ct_rune_t = ::std::os::raw::c_int;
    #[repr(C)]
    #[derive(Copy, Clone)]
    pub union __mbstate_t {
        pub __mbstate8: [::std::os::raw::c_char; 128usize],
        pub _mbstateL: ::std::os::raw::c_longlong,
    }
    const _: () = {
        ["Size of __mbstate_t"][::std::mem::size_of::<__mbstate_t>() - 128usize];
        ["Alignment of __mbstate_t"][::std::mem::align_of::<__mbstate_t>() - 8usize];
        ["Offset of field: __mbstate_t::__mbstate8"]
            [::std::mem::offset_of!(__mbstate_t, __mbstate8) - 0usize];
        ["Offset of field: __mbstate_t::_mbstateL"]
            [::std::mem::offset_of!(__mbstate_t, _mbstateL) - 0usize];
    };
    pub type __darwin_mbstate_t = root::__mbstate_t;
    pub type __darwin_ptrdiff_t = ::std::os::raw::c_long;
    pub type __darwin_size_t = ::std::os::raw::c_ulong;
    pub type __darwin_va_list = root::__builtin_va_list;
    pub type __darwin_wchar_t = ::std::os::raw::c_int;
    pub type __darwin_rune_t = root::__darwin_wchar_t;
    pub type __darwin_wint_t = ::std::os::raw::c_int;
    pub type __darwin_clock_t = ::std::os::raw::c_ulong;
    pub type __darwin_socklen_t = root::__uint32_t;
    pub type __darwin_ssize_t = ::std::os::raw::c_long;
    pub type __darwin_time_t = ::std::os::raw::c_long;
    pub type __darwin_blkcnt_t = root::__int64_t;
    pub type __darwin_blksize_t = root::__int32_t;
    pub type __darwin_dev_t = root::__int32_t;
    pub type __darwin_fsblkcnt_t = ::std::os::raw::c_uint;
    pub type __darwin_fsfilcnt_t = ::std::os::raw::c_uint;
    pub type __darwin_gid_t = root::__uint32_t;
    pub type __darwin_id_t = root::__uint32_t;
    pub type __darwin_ino64_t = root::__uint64_t;
    pub type __darwin_ino_t = root::__darwin_ino64_t;
    pub type __darwin_mach_port_name_t = root::__darwin_natural_t;
    pub type __darwin_mach_port_t = root::__darwin_mach_port_name_t;
    pub type __darwin_mode_t = root::__uint16_t;
    pub type __darwin_off_t = root::__int64_t;
    pub type __darwin_pid_t = root::__int32_t;
    pub type __darwin_sigset_t = root::__uint32_t;
    pub type __darwin_suseconds_t = root::__int32_t;
    pub type __darwin_uid_t = root::__uint32_t;
    pub type __darwin_useconds_t = root::__uint32_t;
    pub type __darwin_uuid_t = [::std::os::raw::c_uchar; 16usize];
    pub type __darwin_uuid_string_t = [::std::os::raw::c_char; 37usize];
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct __darwin_pthread_handler_rec {
        pub __routine:
            ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
        pub __arg: *mut ::std::os::raw::c_void,
        pub __next: *mut root::__darwin_pthread_handler_rec,
    }
    const _: () = {
        ["Size of __darwin_pthread_handler_rec"]
            [::std::mem::size_of::<__darwin_pthread_handler_rec>() - 24usize];
        ["Alignment of __darwin_pthread_handler_rec"]
            [::std::mem::align_of::<__darwin_pthread_handler_rec>() - 8usize];
        ["Offset of field: __darwin_pthread_handler_rec::__routine"]
            [::std::mem::offset_of!(__darwin_pthread_handler_rec, __routine) - 0usize];
        ["Offset of field: __darwin_pthread_handler_rec::__arg"]
            [::std::mem::offset_of!(__darwin_pthread_handler_rec, __arg) - 8usize];
        ["Offset of field: __darwin_pthread_handler_rec::__next"]
            [::std::mem::offset_of!(__darwin_pthread_handler_rec, __next) - 16usize];
    };
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _opaque_pthread_attr_t {
        pub __sig: ::std::os::raw::c_long,
        pub __opaque: [::std::os::raw::c_char; 56usize],
    }
    const _: () = {
        ["Size of _opaque_pthread_attr_t"]
            [::std::mem::size_of::<_opaque_pthread_attr_t>() - 64usize];
        ["Alignment of _opaque_pthread_attr_t"]
            [::std::mem::align_of::<_opaque_pthread_attr_t>() - 8usize];
        ["Offset of field: _opaque_pthread_attr_t::__sig"]
            [::std::mem::offset_of!(_opaque_pthread_attr_t, __sig) - 0usize];
        ["Offset of field: _opaque_pthread_attr_t::__opaque"]
            [::std::mem::offset_of!(_opaque_pthread_attr_t, __opaque) - 8usize];
    };
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _opaque_pthread_cond_t {
        pub __sig: ::std::os::raw::c_long,
        pub __opaque: [::std::os::raw::c_char; 40usize],
    }
    const _: () = {
        ["Size of _opaque_pthread_cond_t"]
            [::std::mem::size_of::<_opaque_pthread_cond_t>() - 48usize];
        ["Alignment of _opaque_pthread_cond_t"]
            [::std::mem::align_of::<_opaque_pthread_cond_t>() - 8usize];
        ["Offset of field: _opaque_pthread_cond_t::__sig"]
            [::std::mem::offset_of!(_opaque_pthread_cond_t, __sig) - 0usize];
        ["Offset of field: _opaque_pthread_cond_t::__opaque"]
            [::std::mem::offset_of!(_opaque_pthread_cond_t, __opaque) - 8usize];
    };
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _opaque_pthread_condattr_t {
        pub __sig: ::std::os::raw::c_long,
        pub __opaque: [::std::os::raw::c_char; 8usize],
    }
    const _: () = {
        ["Size of _opaque_pthread_condattr_t"]
            [::std::mem::size_of::<_opaque_pthread_condattr_t>() - 16usize];
        ["Alignment of _opaque_pthread_condattr_t"]
            [::std::mem::align_of::<_opaque_pthread_condattr_t>() - 8usize];
        ["Offset of field: _opaque_pthread_condattr_t::__sig"]
            [::std::mem::offset_of!(_opaque_pthread_condattr_t, __sig) - 0usize];
        ["Offset of field: _opaque_pthread_condattr_t::__opaque"]
            [::std::mem::offset_of!(_opaque_pthread_condattr_t, __opaque) - 8usize];
    };
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _opaque_pthread_mutex_t {
        pub __sig: ::std::os::raw::c_long,
        pub __opaque: [::std::os::raw::c_char; 56usize],
    }
    const _: () = {
        ["Size of _opaque_pthread_mutex_t"]
            [::std::mem::size_of::<_opaque_pthread_mutex_t>() - 64usize];
        ["Alignment of _opaque_pthread_mutex_t"]
            [::std::mem::align_of::<_opaque_pthread_mutex_t>() - 8usize];
        ["Offset of field: _opaque_pthread_mutex_t::__sig"]
            [::std::mem::offset_of!(_opaque_pthread_mutex_t, __sig) - 0usize];
        ["Offset of field: _opaque_pthread_mutex_t::__opaque"]
            [::std::mem::offset_of!(_opaque_pthread_mutex_t, __opaque) - 8usize];
    };
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _opaque_pthread_mutexattr_t {
        pub __sig: ::std::os::raw::c_long,
        pub __opaque: [::std::os::raw::c_char; 8usize],
    }
    const _: () = {
        ["Size of _opaque_pthread_mutexattr_t"]
            [::std::mem::size_of::<_opaque_pthread_mutexattr_t>() - 16usize];
        ["Alignment of _opaque_pthread_mutexattr_t"]
            [::std::mem::align_of::<_opaque_pthread_mutexattr_t>() - 8usize];
        ["Offset of field: _opaque_pthread_mutexattr_t::__sig"]
            [::std::mem::offset_of!(_opaque_pthread_mutexattr_t, __sig) - 0usize];
        ["Offset of field: _opaque_pthread_mutexattr_t::__opaque"]
            [::std::mem::offset_of!(_opaque_pthread_mutexattr_t, __opaque) - 8usize];
    };
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _opaque_pthread_once_t {
        pub __sig: ::std::os::raw::c_long,
        pub __opaque: [::std::os::raw::c_char; 8usize],
    }
    const _: () = {
        ["Size of _opaque_pthread_once_t"]
            [::std::mem::size_of::<_opaque_pthread_once_t>() - 16usize];
        ["Alignment of _opaque_pthread_once_t"]
            [::std::mem::align_of::<_opaque_pthread_once_t>() - 8usize];
        ["Offset of field: _opaque_pthread_once_t::__sig"]
            [::std::mem::offset_of!(_opaque_pthread_once_t, __sig) - 0usize];
        ["Offset of field: _opaque_pthread_once_t::__opaque"]
            [::std::mem::offset_of!(_opaque_pthread_once_t, __opaque) - 8usize];
    };
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _opaque_pthread_rwlock_t {
        pub __sig: ::std::os::raw::c_long,
        pub __opaque: [::std::os::raw::c_char; 192usize],
    }
    const _: () = {
        ["Size of _opaque_pthread_rwlock_t"]
            [::std::mem::size_of::<_opaque_pthread_rwlock_t>() - 200usize];
        ["Alignment of _opaque_pthread_rwlock_t"]
            [::std::mem::align_of::<_opaque_pthread_rwlock_t>() - 8usize];
        ["Offset of field: _opaque_pthread_rwlock_t::__sig"]
            [::std::mem::offset_of!(_opaque_pthread_rwlock_t, __sig) - 0usize];
        ["Offset of field: _opaque_pthread_rwlock_t::__opaque"]
            [::std::mem::offset_of!(_opaque_pthread_rwlock_t, __opaque) - 8usize];
    };
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _opaque_pthread_rwlockattr_t {
        pub __sig: ::std::os::raw::c_long,
        pub __opaque: [::std::os::raw::c_char; 16usize],
    }
    const _: () = {
        ["Size of _opaque_pthread_rwlockattr_t"]
            [::std::mem::size_of::<_opaque_pthread_rwlockattr_t>() - 24usize];
        ["Alignment of _opaque_pthread_rwlockattr_t"]
            [::std::mem::align_of::<_opaque_pthread_rwlockattr_t>() - 8usize];
        ["Offset of field: _opaque_pthread_rwlockattr_t::__sig"]
            [::std::mem::offset_of!(_opaque_pthread_rwlockattr_t, __sig) - 0usize];
        ["Offset of field: _opaque_pthread_rwlockattr_t::__opaque"]
            [::std::mem::offset_of!(_opaque_pthread_rwlockattr_t, __opaque) - 8usize];
    };
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct _opaque_pthread_t {
        pub __sig: ::std::os::raw::c_long,
        pub __cleanup_stack: *mut root::__darwin_pthread_handler_rec,
        pub __opaque: [::std::os::raw::c_char; 8176usize],
    }
    const _: () = {
        ["Size of _opaque_pthread_t"][::std::mem::size_of::<_opaque_pthread_t>() - 8192usize];
        ["Alignment of _opaque_pthread_t"][::std::mem::align_of::<_opaque_pthread_t>() - 8usize];
        ["Offset of field: _opaque_pthread_t::__sig"]
            [::std::mem::offset_of!(_opaque_pthread_t, __sig) - 0usize];
        ["Offset of field: _opaque_pthread_t::__cleanup_stack"]
            [::std::mem::offset_of!(_opaque_pthread_t, __cleanup_stack) - 8usize];
        ["Offset of field: _opaque_pthread_t::__opaque"]
            [::std::mem::offset_of!(_opaque_pthread_t, __opaque) - 16usize];
    };
    pub type __darwin_pthread_attr_t = root::_opaque_pthread_attr_t;
    pub type __darwin_pthread_cond_t = root::_opaque_pthread_cond_t;
    pub type __darwin_pthread_condattr_t = root::_opaque_pthread_condattr_t;
    pub type __darwin_pthread_key_t = ::std::os::raw::c_ulong;
    pub type __darwin_pthread_mutex_t = root::_opaque_pthread_mutex_t;
    pub type __darwin_pthread_mutexattr_t = root::_opaque_pthread_mutexattr_t;
    pub type __darwin_pthread_once_t = root::_opaque_pthread_once_t;
    pub type __darwin_pthread_rwlock_t = root::_opaque_pthread_rwlock_t;
    pub type __darwin_pthread_rwlockattr_t = root::_opaque_pthread_rwlockattr_t;
    pub type __darwin_pthread_t = *mut root::_opaque_pthread_t;
    pub type __darwin_nl_item = ::std::os::raw::c_int;
    pub type __darwin_wctrans_t = ::std::os::raw::c_int;
    pub type __darwin_wctype_t = root::__uint32_t;
    pub type int_least8_t = i8;
    pub type int_least16_t = i16;
    pub type int_least32_t = i32;
    pub type int_least64_t = i64;
    pub type uint_least8_t = u8;
    pub type uint_least16_t = u16;
    pub type uint_least32_t = u32;
    pub type uint_least64_t = u64;
    pub type int_fast8_t = i8;
    pub type int_fast16_t = i16;
    pub type int_fast32_t = i32;
    pub type int_fast64_t = i64;
    pub type uint_fast8_t = u8;
    pub type uint_fast16_t = u16;
    pub type uint_fast32_t = u32;
    pub type uint_fast64_t = u64;
    pub type intmax_t = ::std::os::raw::c_long;
    pub type uintmax_t = ::std::os::raw::c_ulong;
    extern "C" {
        pub fn imaxabs(j: root::intmax_t) -> root::intmax_t;
    }
    #[repr(C)]
    #[derive(Debug, Copy, Clone)]
    pub struct imaxdiv_t {
        pub quot: root::intmax_t,
        pub rem: root::intmax_t,
    }
    const _: () = {
        ["Size of imaxdiv_t"][::std::mem::size_of::<imaxdiv_t>() - 16usize];
        ["Alignment of imaxdiv_t"][::std::mem::align_of::<imaxdiv_t>() - 8usize];
        ["Offset of field: imaxdiv_t::quot"][::std::mem::offset_of!(imaxdiv_t, quot) - 0usize];
        ["Offset of field: imaxdiv_t::rem"][::std::mem::offset_of!(imaxdiv_t, rem) - 8usize];
    };
    extern "C" {
        pub fn imaxdiv(__numer: root::intmax_t, __denom: root::intmax_t) -> root::imaxdiv_t;
    }
    extern "C" {
        pub fn strtoimax(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
            __base: ::std::os::raw::c_int,
        ) -> root::intmax_t;
    }
    extern "C" {
        pub fn strtoumax(
            __nptr: *const ::std::os::raw::c_char,
            __endptr: *mut *mut ::std::os::raw::c_char,
            __base: ::std::os::raw::c_int,
        ) -> root::uintmax_t;
    }
    extern "C" {
        pub fn wcstoimax(
            __nptr: *const u32,
            __endptr: *mut *mut u32,
            __base: ::std::os::raw::c_int,
        ) -> root::intmax_t;
    }
    extern "C" {
        pub fn wcstoumax(
            __nptr: *const u32,
            __endptr: *mut *mut u32,
            __base: ::std::os::raw::c_int,
        ) -> root::uintmax_t;
    }
    pub mod swift {
        #[allow(unused_imports)]
        use self::super::super::root;
        pub mod runtime {
            #[allow(unused_imports)]
            use self::super::super::super::root;
            pub mod backtrace {
                #[allow(unused_imports)]
                use self::super::super::super::super::root;
                #[repr(C)]
                #[derive(Debug, Copy, Clone)]
                pub struct CrashInfo {
                    pub crashing_thread: u64,
                    pub signal: u64,
                    pub fault_address: u64,
                    pub mctx: u64,
                }
                const _: () = {
                    ["Size of CrashInfo"][::std::mem::size_of::<CrashInfo>() - 32usize];
                    ["Alignment of CrashInfo"][::std::mem::align_of::<CrashInfo>() - 8usize];
                    ["Offset of field: CrashInfo::crashing_thread"]
                        [::std::mem::offset_of!(CrashInfo, crashing_thread) - 0usize];
                    ["Offset of field: CrashInfo::signal"]
                        [::std::mem::offset_of!(CrashInfo, signal) - 8usize];
                    ["Offset of field: CrashInfo::fault_address"]
                        [::std::mem::offset_of!(CrashInfo, fault_address) - 16usize];
                    ["Offset of field: CrashInfo::mctx"]
                        [::std::mem::offset_of!(CrashInfo, mctx) - 24usize];
                };
            }
        }
    }
    pub type __builtin_va_list = *mut ::std::os::raw::c_char;
}
